sequenceDiagram
    autonumber
    
    Client->>AuthenticationServiceV2: authenticate(credentials)
    Note over AuthenticationServiceV2: Generate logging context
    
    AuthenticationServiceV2->>ISDSHelper: getIsdsGetCredentialResponse(username)
    ISDSHelper-->>AuthenticationServiceV2: Return credential info
    
    AuthenticationServiceV2->>AuthenticationServiceHelperV2: clientValidations(validateUser, headers)
    Note over AuthenticationServiceHelperV2: Perform Mod-10 check<br/>Validate BIN range
    
    AuthenticationServiceV2->>AuthenticationServiceHelperV2: checkCustomerType(customerType)
    
    AuthenticationServiceV2->>ExternalService: Get debit card details
    ExternalService-->>AuthenticationServiceV2: Return card details
    
    AuthenticationServiceV2->>AuthenticationServiceHelperV2: checkCardStatus(cardDetails)
    
    alt Retail customer
        AuthenticationServiceV2->>AuthenticationServiceHelperV2: validateOTPLockStatus()
    end
    
    AuthenticationServiceV2->>ISDSHelper: initialISDSValidations(credential)
    Note over ISDSHelper: Check if card is suspended
    
    AuthenticationServiceV2->>ISDSHelper: isdsValidations(credential, password)
    ISDSHelper-->>AuthenticationServiceV2: Return authentication result
    
    alt Authentication fails
        AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(FAILURE)
        AuthenticationServiceV2-->>Client: Return authentication error
    else Authentication successful
        AuthenticationServiceV2->>RSAServices: rsaQuery(username)
        RSAServices-->>AuthenticationServiceV2: Return RSA user status
        
        alt RSA status not VERIFIED or DELETED
            AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(FAILURE)
            AuthenticationServiceV2-->>Client: Return authentication error
        else RSA status VERIFIED
            opt Non-commercial customer
                AuthenticationServiceV2->>TMXServices: notifyTMX(tmxParam)
                TMXServices-->>AuthenticationServiceV2: Return fraud assessment
            end
            
            AuthenticationServiceV2->>RSAServices: rsaAnalyze(factData)
            RSAServices-->>AuthenticationServiceV2: Return risk assessment
            
            alt RSA risk policy DENY
                AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(FAILURE)
                AuthenticationServiceV2-->>Client: Return authentication error
            else RSA risk policy CHALLENGE
                alt Commercial customer
                    AuthenticationServiceV2->>RSAServices: rsaChallenge()
                    RSAServices-->>AuthenticationServiceV2: Return challenge details
                    AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(SUCCESS)
                    AuthenticationServiceV2-->>Client: Return RSA challenge response
                else Retail customer
                    AuthenticationServiceV2->>AuthenticationServiceHelperV2: setAuthenticationResponseHeaderWhenOTPChallenge()
                    AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(ATTEMPT)
                    AuthenticationServiceV2-->>Client: Return OTP challenge response
                end
            else RSA risk policy ALLOW
                AuthenticationServiceV2->>AuthenticationServiceHelperV2: setAuthenticationResponseHeaderWhenSkipVerifyChallenge()
                AuthenticationServiceV2->>LoginEventPublisher: publishPasswordEvent(SUCCESS)
                AuthenticationServiceV2-->>Client: Return authentication success
            end
        end
    end
