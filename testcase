import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { DynamoDBAPIClient } from './DynamoDBAPIClient';

// Mock AWS SDK modules
jest.mock('@aws-sdk/client-dynamodb', () => ({
    DynamoDBClient: jest.fn().mockImplementation(() => ({}))
}));

jest.mock('@aws-sdk/lib-dynamodb', () => ({
    DynamoDBDocumentClient: {
        from: jest.fn().mockImplementation(() => ({}))
    }
}));

// Mock logger
jest.mock("../../../../common/utils/logger", () => ({
    info: jest.fn(),
    trace: jest.fn()
}));

describe('DynamoDBAPIClient Tests', () => {
    const mockCorrelationId = 'test-123';

    beforeEach(() => {
        jest.clearAllMocks();
        process.env.REGION = 'us-east-1';
    });

    afterEach(() => {
        process.env = {};
    });

    test('should create a new instance', () => {
        const client = DynamoDBAPIClient.getInstance(mockCorrelationId);
        expect(client).toBeDefined();
        expect(client).toBeInstanceOf(DynamoDBAPIClient);
    });

    test('should return same instance when called multiple times', () => {
        const instance1 = DynamoDBAPIClient.getInstance(mockCorrelationId);
        const instance2 = DynamoDBAPIClient.getInstance(mockCorrelationId);
        expect(instance1).toBe(instance2);
    });

    test('should initialize DynamoDB clients', () => {
        const client = DynamoDBAPIClient.getInstance(mockCorrelationId);
        expect(client.dbClient).toBeDefined();
        expect(client.dbDocumentClient).toBeDefined();
    });
});
