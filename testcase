import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ymca.prs0.tbp.model.ApiResponse;
import com.ymca.prs0.tbp.model.dto.TemplatedBatchDTO;
import com.ymca.prs0.tbp.service.TemplatedBatchService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith(MockitoExtension.class)
class TemplatedBatchControllerTest {

    private static final String API_PATH = "/PRS0/batch/v1/templated-file";
    private static final String FILE_KEY = "test-file-key";
    private static final String REQUEST_ID = "test-request-id";

    @Mock
    private TemplatedBatchService templatedBatchService;

    @InjectMocks
    private TemplatedBatchController templatedBatchController;

    private MockMvc mockMvc;
    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(templatedBatchController)
                .build();
        objectMapper = new ObjectMapper();
    }

    @Test
    void processTemplatedBatch_WhenValidRequest_ShouldReturnAccepted() throws Exception {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);

        Map<String, String> marTechResponse = new HashMap<>();
        marTechResponse.put("message", "Task Submitted");
        marTechResponse.put("status", "Queued");

        ApiResponse apiResponse = ApiResponse.builder()
                .id(REQUEST_ID)
                .marTechResponse(marTechResponse)
                .build();

        when(templatedBatchService.processTemplatedBatch(any(TemplatedBatchDTO.class)))
                .thenReturn(apiResponse);

        String requestJson = objectMapper.writeValueAsString(dto);

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(status().isAccepted())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(REQUEST_ID))
                .andExpect(jsonPath("$.marTechResponse.message").value("Task Submitted"))
                .andExpect(jsonPath("$.marTechResponse.status").value("Queued"));

        verify(templatedBatchService).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenInvalidRequest_ShouldReturnBadRequest() throws Exception {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        // Not setting required fileKey to trigger validation error
        
        String requestJson = objectMapper.writeValueAsString(dto);

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(status().isBadRequest())
                .andExpect(result -> assertTrue(result.getResolvedException() 
                        instanceof MethodArgumentNotValidException));

        verify(templatedBatchService, never()).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenMalformedJson_ShouldReturnBadRequest() throws Exception {
        // Arrange
        String malformedJson = "{\"fileKey\": invalid-json}";

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content(malformedJson))
                .andExpect(status().isBadRequest());

        verify(templatedBatchService, never()).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenEmptyRequest_ShouldReturnBadRequest() throws Exception {
        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content("{}"))
                .andExpect(status().isBadRequest());

        verify(templatedBatchService, never()).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenServiceThrowsException_ShouldPropagateError() throws Exception {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);

        when(templatedBatchService.processTemplatedBatch(any(TemplatedBatchDTO.class)))
                .thenThrow(new RuntimeException("Service error"));

        String requestJson = objectMapper.writeValueAsString(dto);

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(status().isInternalServerError());

        verify(templatedBatchService).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenInvalidMediaType_ShouldReturnUnsupportedMediaType() throws Exception {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        String requestJson = objectMapper.writeValueAsString(dto);

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.TEXT_PLAIN)
                .content(requestJson))
                .andExpect(status().isUnsupportedMediaType());

        verify(templatedBatchService, never()).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }

    @Test
    void processTemplatedBatch_WhenValidRequestWithNullOptionalFields_ShouldReturnAccepted() throws Exception {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        // Set any optional fields to null explicitly

        ApiResponse apiResponse = ApiResponse.builder()
                .id(REQUEST_ID)
                .marTechResponse(new HashMap<>())
                .build();

        when(templatedBatchService.processTemplatedBatch(any(TemplatedBatchDTO.class)))
                .thenReturn(apiResponse);

        String requestJson = objectMapper.writeValueAsString(dto);

        // Act & Assert
        mockMvc.perform(post(API_PATH)
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson))
                .andExpect(status().isAccepted())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(REQUEST_ID));

        verify(templatedBatchService).processTemplatedBatch(any(TemplatedBatchDTO.class));
    }
}
