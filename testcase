import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from '../../../src/service/ccar/creditCardArrangementReportService';
import { ErrorCodes } from '../../../src/util/errorCodes';
import { ServerError } from '../../../src/util/serverError';

// Mock logging functions
jest.mock('../../../src/util/logging', () => ({
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    debug: jest.fn(),
    info: jest.fn()
}));

// Create a proper class mock for CrossAccountAPICache
class MockCrossAccountAPICache {
    constructor(
        crossRegion: string,
        crossAccountRoleRegion: string,
        crossAccountRole: string,
        singleAccountAPIKeyName: string,
        singleAccountAPIGatewayIDName: string,
        cacheTimeToLifeMS: number
    ) {
        // Validate required parameters
        if (!crossAccountRoleRegion) {
            throw new Error('REGION is required');
        }
        if (!singleAccountAPIKeyName) {
            throw new Error('API Key Name is required');
        }
        if (!singleAccountAPIGatewayIDName) {
            throw new Error('Gateway ID Name is required');
        }
    }

    Value() {
        return Promise.resolve({
            apiKey: 'mock-api-key',
            apiGatewayId: 'mock-gateway-id'
        });
    }
}

// Mock the CrossAccountAPICache module
jest.mock('../../../../common/cross account/cached_api_information', () => ({
    __esModule: true,
    default: MockCrossAccountAPICache
}));

describe('CreditCardArrangementReportService Tests', () => {
    let service: CreditCardArrangementReportService;
    const mockCorrelationId = 'test-correlation-id';
    const mockCardNumber = '1234567890123456';
    const mockTsysClientId = 'test-client-id';

    beforeEach(() => {
        jest.clearAllMocks();
        
        // Set ALL required environment variables with non-empty values
        process.env = {
            crossRegion: 'us-east-1',
            REGION: 'us-east-1',  // This is critical
            crossAccountRoleForCCAR: 'test-role',
            ssmParamCcarApiKey: 'test-api-key',
            ssmParamCcarGatewayId: 'test-gateway-id',
            getCardDetailsUrl: 'http://test-url',
            getCustomerDetailsUrl: 'http://test-url'
        };

        // Mock global fetch
        global.fetch = jest.fn();
    });

    afterEach(() => {
        jest.clearAllMocks();
        process.env = {};
    });

    describe('Service Initialization', () => {
        test('should initialize successfully with all required env vars', () => {
            try {
                console.log('Environment variables before initialization:', {
                    REGION: process.env.REGION,
                    apiKey: process.env.ssmParamCcarApiKey,
                    gatewayId: process.env.ssmParamCcarGatewayId
                });

                service = new CreditCardArrangementReportService(mockCorrelationId);
                expect(service).toBeDefined();
            } catch (error) {
                console.error('Service initialization failed:', {
                    name: error.name,
                    message: error.message,
                    stack: error.stack
                });
                throw error;
            }
        });

        test('should throw error when REGION is empty', () => {
            process.env.REGION = '';
            expect(() => {
                new CreditCardArrangementReportService(mockCorrelationId);
            }).toThrow();
        });

        test('should throw error when REGION is undefined', () => {
            delete process.env.REGION;
            expect(() => {
                new CreditCardArrangementReportService(mockCorrelationId);
            }).toThrow();
        });
    });

    // ... rest of the tests remain the same ...
});
