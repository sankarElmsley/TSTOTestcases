import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import { AutoCacheResult, AutoLocalCache } from "///common/cache/auto_local_cache";
import { CrossAccountAPICache } from "///common/cross_account/cached_api_information";

// Create mock for fetch
const mockFetchImplementation = jest.fn();
jest.mock('node-fetch', () => ({
  __esModule: true,
  default: (...args: any[]) => mockFetchImplementation(...args)
}));

// Mock the logger
jest.mock("///common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

describe("CreditcardUtilityService Tests", () => {
  let creditcardUtilityService: CreditcardUtilityService;
  const mockCorrelationId = "test-correlation-id";
  
  beforeEach(() => {
    // Reset the module before each test
    jest.resetModules();

    // Mock all required environment variables
    process.env.crossRegion = "us-east-1";
    process.env.REGION = "us-east-1";
    process.env.crossAccountRoleForCCU = "arn:aws:iam::123456789012:role/test-role";
    process.env.ssmParamCcuApiKey = "test-api-key-param";
    process.env.ssmParamCcuGatewayId = "test-gateway-id-param";
    process.env.getBinRangesUrl = "https://api.test.com/bin-ranges";

    // Mock CrossAccountAPICache
    const mockGetValue = jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id",
    });
    
    jest.spyOn(CrossAccountAPICache.prototype, 'getValue').mockImplementation(mockGetValue);

    // Clear mock implementations
    mockFetchImplementation.mockReset();
    jest.clearAllMocks();

    // Mock AutoLocalCache
    const mockBinResponse = {
      binList: {
        bin: [
          {
            binStart: "400000",
            binEnd: "499999",
            cardType: "VISA",
          },
        ],
      },
    };

    // Set up the mock response for fetch
    mockFetchImplementation.mockResolvedValue({
      status: 200,
      statusText: "OK",
      json: () => Promise.resolve(mockBinResponse)
    });

    // Create a mock implementation of AutoLocalCache
    const mockAutoLocalCache = {
      get_value: jest.fn().mockResolvedValue({
        value: mockBinResponse.binList.bin,
        ttl: 24 * 60 * 60 * 1000 // 24 hours in milliseconds
      })
    };

    // Mock the AutoLocalCache constructor
    jest.spyOn(AutoLocalCache.prototype, 'get_value')
      .mockImplementation(mockAutoLocalCache.get_value);
  });

  afterEach(() => {
    jest.resetAllMocks();
    // Clear environment variables
    delete process.env.crossRegion;
    delete process.env.REGION;
    delete process.env.crossAccountRoleForCCU;
    delete process.env.ssmParamCcuApiKey;
    delete process.env.ssmParamCcuGatewayId;
    delete process.env.getBinRangesUrl;
  });

  describe("getBinRangesCached", () => {
    it("should successfully retrieve BIN ranges when API returns 200", async () => {
      const mockBinResponse = {
        binList: {
          bin: [
            {
              binStart: "400000",
              binEnd: "499999",
              cardType: "VISA",
            },
          ],
        },
      };

      mockFetchImplementation.mockResolvedValueOnce({
        status: 200,
        statusText: "OK",
        json: () => Promise.resolve(mockBinResponse)
      });

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      const result = await creditcardUtilityService.getBinRangesCached();

      expect(result).toEqual(mockBinResponse.binList.bin);
      expect(mockFetchImplementation).toHaveBeenCalledWith(
        "https://api.test.com/bin-ranges",
        expect.objectContaining({
          method: "GET",
          headers: expect.objectContaining({
            "Content-Type": "application/json",
            "x-api-key": "mock-api-key",
            "x-apigw-api-id": "mock-gateway-id",
            "x-request-id": mockCorrelationId,
            "x-fapi-interaction-id": mockCorrelationId,
            "x-app-cat-id": "63623",
            APIHeaderRequest: "NA",
          }),
        })
      );
    });

    it("should throw ServerError when API returns non-200 status", async () => {
      mockFetchImplementation.mockResolvedValueOnce({
        status: 500,
        statusText: "Internal Server Error"
      });

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
    });

    it("should throw ServerError when API call fails", async () => {
      mockFetchImplementation.mockRejectedValueOnce(new Error("Network error"));

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
    });

    it("should use cached values for subsequent calls", async () => {
      const mockBinResponse = {
        binList: {
          bin: [
            {
              binStart: "400000",
              binEnd: "499999",
              cardType: "VISA",
            },
          ],
        },
      };

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      // First call should make the API request
      const result1 = await creditcardUtilityService.getBinRangesCached();
      // Second call should use cached value
      const result2 = await creditcardUtilityService.getBinRangesCached();

      expect(result1).toEqual(result2);
      expect(result1).toEqual(mockBinResponse.binList.bin);
      expect(mockFetchImplementation).toHaveBeenCalledTimes(1);
    });
  });
});
