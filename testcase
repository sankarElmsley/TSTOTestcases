import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});


package com.ymca.prs0.tbp.service.impl;

import com.ymca.prs0.tbp.config.properties.AuthProperties;
import com.ymca.prs0.tbp.config.properties.RetryStrategy;
import com.ymca.prs0.tbp.model.AccessTokenInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.env.Environment;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.*;
import reactor.core.publisher.Mono;

import static com.ymca.prs0.tbp.common.ApiConstants.Authorization.PING_FED_TOKEN_KEY;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ApiAuthServiceTest {

    @Mock
    private WebClient authTokenWebClient;

    @Mock
    private Environment environment;

    @Mock
    private AuthProperties authProperties;

    @Mock
    private WebClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    private ApiAuthService apiAuthService;

    @BeforeEach
    void setUp() {
        apiAuthService = new ApiAuthService(authTokenWebClient, environment, authProperties);
    }

    @Test
    void getToken_WhenTokenNotCached_ShouldFetchNewToken() {
        // Arrange
        final String tokenUrl = "http://test-token-url";
        final MultiValueMap<String, String> credentials = new LinkedMultiValueMap<>();
        credentials.add("client_id", "test-client");
        credentials.add("client_secret", "test-secret");

        AccessTokenInfo expectedToken = new AccessTokenInfo();
        expectedToken.setAccessToken("test-token");
        expectedToken.setExpiresIn(3600);

        RetryStrategy retryStrategy = new RetryStrategy();
        retryStrategy.setMaxAttempts(3);
        retryStrategy.setMinInterval(java.time.Duration.ofSeconds(1));
        retryStrategy.setJitterFactor(0.5);

        when(authProperties.getPingFedTokenUrl()).thenReturn(tokenUrl);
        when(authProperties.getAuthCredential(PING_FED_TOKEN_KEY)).thenReturn(credentials);
        when(authProperties.getRetry()).thenReturn(retryStrategy);
        
        when(authTokenWebClient.mutate()).thenReturn(WebClient.builder());
        when(authTokenWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(tokenUrl)).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.contentType(MediaType.APPLICATION_FORM_URLENCODED)).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.bodyValue(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(AccessTokenInfo.class)).thenReturn(Mono.just(expectedToken));

        // Act
        AccessTokenInfo result = apiAuthService.getToken(PING_FED_TOKEN_KEY);

        // Assert
        assertNotNull(result);
        assertEquals(expectedToken.getAccessToken(), result.getAccessToken());
        assertEquals(expectedToken.getExpiresIn(), result.getExpiresIn());
        verify(authProperties).getPingFedTokenUrl();
        verify(authProperties).getAuthCredential(PING_FED_TOKEN_KEY);
    }

    @Test
    void getToken_WhenTokenCached_ShouldReturnCachedToken() {
        // Arrange
        AccessTokenInfo initialToken = new AccessTokenInfo();
        initialToken.setAccessToken("cached-token");
        initialToken.setExpiresIn(3600);

        // Setup for initial token fetch
        setupMockWebClientForToken(initialToken);

        // First call to cache the token
        AccessTokenInfo firstCall = apiAuthService.getToken(PING_FED_TOKEN_KEY);

        // Reset mocks to verify no more interactions
        clearInvocations(authTokenWebClient, authProperties);

        // Act
        AccessTokenInfo result = apiAuthService.getToken(PING_FED_TOKEN_KEY);

        // Assert
        assertNotNull(result);
        assertEquals("cached-token", result.getAccessToken());
        verifyNoMoreInteractions(authTokenWebClient);
    }

    @Test
    void getToken_WhenCachedTokenExpired_ShouldFetchNewToken() {
        // Arrange
        AccessTokenInfo expiredToken = new AccessTokenInfo();
        expiredToken.setAccessToken("expired-token");
        expiredToken.setExpiresIn(-1); // Expired token

        AccessTokenInfo newToken = new AccessTokenInfo();
        newToken.setAccessToken("new-token");
        newToken.setExpiresIn(3600);

        // Setup for expired token
        setupMockWebClientForToken(expiredToken);
        
        // First call to cache the expired token
        apiAuthService.getToken(PING_FED_TOKEN_KEY);

        // Setup for new token
        setupMockWebClientForToken(newToken);

        // Act
        AccessTokenInfo result = apiAuthService.getToken(PING_FED_TOKEN_KEY);

        // Assert
        assertNotNull(result);
        assertEquals("new-token", result.getAccessToken());
    }

    @Test
    void getToken_WhenErrorOccurs_ShouldThrowException() {
        // Arrange
        when(authTokenWebClient.post()).thenThrow(new RuntimeException("API Error"));

        // Act & Assert
        assertThrows(RuntimeException.class, () -> 
            apiAuthService.getToken(PING_FED_TOKEN_KEY)
        );
    }

    private void setupMockWebClientForToken(AccessTokenInfo token) {
        when(authProperties.getPingFedTokenUrl()).thenReturn("http://test-token-url");
        when(authProperties.getAuthCredential(any())).thenReturn(new LinkedMultiValueMap<>());
        when(authProperties.getRetry()).thenReturn(new RetryStrategy());
        
        when(authTokenWebClient.mutate()).thenReturn(WebClient.builder());
        when(authTokenWebClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(any(String.class))).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.contentType(any())).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.bodyValue(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(AccessTokenInfo.class)).thenReturn(Mono.just(token));
    }
}
