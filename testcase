package com.bmo.channels.api.authentication.helper;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.jmock.integration.junit4.JMock;
import org.jmock.integration.junit4.JUnit4Mockery;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

@RunWith(JMock.class)
public class ScHeaderProviderTest {

    private Mockery context = new JUnit4Mockery();
    private HttpServletRequest mockRequest;
    private ScHeaderProvider scHeaderProvider;
    
    private final String appCatId = "83815";
    private final String financialId = "001";
    
    @Before
    public void setUp() {
        mockRequest = context.mock(HttpServletRequest.class);
        scHeaderProvider = new ScHeaderProvider(mockRequest, appCatId, financialId);
    }
    
    @Test
    public void testGetHeaders_NoHeaders() {
        // Setup mock request with no headers
        context.checking(new Expectations() {{
            oneOf(mockRequest).getHeaderNames();
            will(returnValue(Collections.emptyEnumeration()));
        }});
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 2 entries", 2, headers.size());
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_WithForwardableHeaders() {
        // Setup headers to be returned
        List<String> headerNames = Arrays.asList(
                ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode(),
                ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode(),
                ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode(),
                "some-other-header" // This one should not be forwarded
        );
        
        final Enumeration<String> headerNamesEnum = Collections.enumeration(headerNames);
        
        // Setup mock expectations with JMock
        context.checking(new Expectations() {{
            oneOf(mockRequest).getHeaderNames();
            will(returnValue(headerNamesEnum));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
            will(returnValue("api-key-value"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
            will(returnValue("Mozilla/5.0"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode());
            will(returnValue("Bearer token123"));
            
            oneOf(mockRequest).getHeader("some-other-header");
            will(returnValue("other-value"));
        }});
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 5 entries", 5, headers.size());
        assertEquals("API Key should be set correctly", "api-key-value", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertEquals("User Agent should be set correctly", "Mozilla/5.0", 
                headers.get(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
        assertEquals("Authorization should be set correctly", "Bearer token123", 
                headers.get(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode().toUpperCase()));
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
        assertFalse("Non-forwardable header should not be included", 
                headers.containsKey("SOME-OTHER-HEADER"));
    }
    
    @Test
    public void testGetHeaders_WithEmptyHeaderValues() {
        // Setup headers to be returned
        List<String> headerNames = Arrays.asList(
                ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode(),
                ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode()
        );
        
        final Enumeration<String> headerNamesEnum = Collections.enumeration(headerNames);
        
        // Setup mock expectations with JMock
        context.checking(new Expectations() {{
            oneOf(mockRequest).getHeaderNames();
            will(returnValue(headerNamesEnum));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
            will(returnValue(""));  // Empty string
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
            will(returnValue(null)); // Null value
        }});
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 2 entries", 2, headers.size());
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
        assertFalse("Empty header value should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertFalse("Null header value should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_AllForwardableHeaders() {
        // Setup headers to include all forwardable headers
        List<String> headerNames = Arrays.asList(
                ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode(),
                ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode(),
                ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode(),
                ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode(),
                ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode(),
                ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode(),
                ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode()
        );
        
        final Enumeration<String> headerNamesEnum = Collections.enumeration(headerNames);
        
        // Setup mock expectations with JMock
        context.checking(new Expectations() {{
            oneOf(mockRequest).getHeaderNames();
            will(returnValue(headerNamesEnum));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
            will(returnValue("test-api-key"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode());
            will(returnValue("192.168.1.1"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
            will(returnValue("Mozilla/5.0"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode());
            will(returnValue("Bearer token"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode());
            will(returnValue("client123"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode());
            will(returnValue("2025-05-21T10:00:00Z"));
            
            oneOf(mockRequest).getHeader(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode());
            will(returnValue("10.0.0.1"));
        }});
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 9 entries (7 forwardable + 2 defaults)", 9, headers.size());
        
        // Check that all forwardable headers are present
        assertEquals("API Key should be present", "test-api-key", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertEquals("True Client IP should be present", "192.168.1.1", 
                headers.get(ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode().toUpperCase()));
        assertEquals("User Agent should be present", "Mozilla/5.0", 
                headers.get(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
        assertEquals("Authorization should be present", "Bearer token", 
                headers.get(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode().toUpperCase()));
        assertEquals("Client ID should be present", "client123", 
                headers.get(ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode().toUpperCase()));
        assertEquals("Customer Last Logged Time should be present", "2025-05-21T10:00:00Z", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode().toUpperCase()));
        assertEquals("Customer IP Address should be present", "10.0.0.1", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode().toUpperCase()));
        
        // Check default headers
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_CaseInsensitiveHeaderNames() {
        // Setup headers with different cases
        List<String> headerNames = Arrays.asList(
                "X-API-KEY", // Uppercase
                "user-agent", // Lowercase
                "Authorization" // Mixed case
        );
        
        final Enumeration<String> headerNamesEnum = Collections.enumeration(headerNames);
        
        context.checking(new Expectations() {{
            oneOf(mockRequest).getHeaderNames();
            will(returnValue(headerNamesEnum));
            
            oneOf(mockRequest).getHeader("X-API-KEY");
            will(returnValue("api-key-upper"));
            
            oneOf(mockRequest).getHeader("user-agent");
            will(returnValue("Mozilla/5.0"));
            
            oneOf(mockRequest).getHeader("Authorization");
            will(returnValue("Bearer token"));
        }});
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 5 entries", 5, headers.size());
        
        // All header keys should be uppercase in the result
        assertTrue("API Key header should be uppercase", 
                headers.containsKey("X-API-KEY"));
        assertTrue("User Agent header should be uppercase", 
                headers.containsKey("USER-AGENT"));
        assertTrue("Authorization header should be uppercase", 
                headers.containsKey("AUTHORIZATION"));
    }
    
    @Test
    public void testHttpHeaderKeyShouldBeForwarded() {
        // Test forwardable headers
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-api-key"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("true-client-ip"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("user-agent"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("Authorization"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("clientId"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-customer-last-logged-time"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-customer-ip-address"));
        
        // Test case-insensitivity
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("X-API-KEY"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("TRUE-CLIENT-IP"));
        
        // Test non-forwardable headers
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-financial-id"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-app-cat-id"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-interaction-id"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-bmo-channel-urn"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("random-header"));
    }
    
    @Test
    public void testHttpHeaderKeyGetCodeAndToString() {
        // Test getCode() method
        assertEquals("x-fapi-financial-id", 
                ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode());
        assertEquals("x-app-cat-id", 
                ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode());
        assertEquals("x-api-key", 
                ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
        
        // Test toString() method
        assertEquals("x-fapi-financial-id", 
                ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.toString());
        assertEquals("x-app-cat-id", 
                ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.toString());
        assertEquals("x-api-key", 
                ScHeaderProvider.HttpHeaderKey.X_API_KEY.toString());
    }
}
