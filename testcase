import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ApiErrorControllerTest {

    @Mock
    private HttpServletRequest request;

    @InjectMocks
    private ApiErrorController apiErrorController;

    private MockHttpServletRequest mockRequest;

    @BeforeEach
    void setUp() {
        mockRequest = new MockHttpServletRequest();
    }

    @Test
    void handleError_WhenExceptionPresent_ShouldThrowException() {
        // Arrange
        RuntimeException testException = new RuntimeException("Test error");
        when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION))
            .thenReturn(testException);

        // Act & Assert
        Exception thrownException = assertThrows(RuntimeException.class, () -> 
            apiErrorController.handleError(request));
        
        assertEquals("Test error", thrownException.getMessage());
        verify(request).getAttribute(RequestDispatcher.ERROR_EXCEPTION);
    }

    @Test
    void handleError_WhenNoException_ShouldNotThrowException() {
        // Arrange
        when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION))
            .thenReturn(null);

        // Act & Assert
        assertDoesNotThrow(() -> apiErrorController.handleError(request));
        verify(request).getAttribute(RequestDispatcher.ERROR_EXCEPTION);
    }

    @Test
    void handleError_WithMockRequest_WhenExceptionPresent_ShouldThrowException() {
        // Arrange
        RuntimeException testException = new RuntimeException("Test error");
        mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, testException);

        // Act & Assert
        Exception thrownException = assertThrows(RuntimeException.class, () -> 
            apiErrorController.handleError(mockRequest));
        
        assertEquals("Test error", thrownException.getMessage());
    }

    @Test
    void handleError_WithMockRequest_WhenNoException_ShouldNotThrowException() {
        // Act & Assert
        assertDoesNotThrow(() -> apiErrorController.handleError(mockRequest));
    }

    @Test
    void handleError_WithDifferentExceptionTypes() {
        // Test with different types of exceptions
        Exception[] exceptions = {
            new IllegalArgumentException("Invalid argument"),
            new NullPointerException("Null pointer"),
            new IllegalStateException("Invalid state")
        };

        for (Exception testException : exceptions) {
            // Arrange
            when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION))
                .thenReturn(testException);

            // Act & Assert
            Exception thrownException = assertThrows(Exception.class, () -> 
                apiErrorController.handleError(request));
            
            assertEquals(testException.getMessage(), thrownException.getMessage());
            assertEquals(testException.getClass(), thrownException.getClass());
        }
    }

    @Test
    void handleError_WithNestedExceptions() {
        // Arrange
        Exception innerException = new IllegalStateException("Inner exception");
        Exception outerException = new RuntimeException("Outer exception", innerException);
        
        when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION))
            .thenReturn(outerException);

        // Act & Assert
        Exception thrownException = assertThrows(RuntimeException.class, () -> 
            apiErrorController.handleError(request));
        
        assertEquals("Outer exception", thrownException.getMessage());
        assertNotNull(thrownException.getCause());
        assertEquals("Inner exception", thrownException.getCause().getMessage());
    }

    @Test
    void handleError_WithCustomException() {
        // Arrange
        class CustomTestException extends Exception {
            public CustomTestException(String message) {
                super(message);
            }
        }

        CustomTestException testException = new CustomTestException("Custom error");
        when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION))
            .thenReturn(testException);

        // Act & Assert
        Exception thrownException = assertThrows(CustomTestException.class, () -> 
            apiErrorController.handleError(request));
        
        assertEquals("Custom error", thrownException.getMessage());
        assertTrue(thrownException instanceof CustomTestException);
    }
}
