import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { TransientCreditCardDataHelper } from '../../../src/service/util/transientCreditCardDataHelper';
import { Account, SessionSummary } from '../../../model/edbcontext/sessionDataResponse';
import { ClientError } from '../../../util/clientError';
import { ErrorCodes } from '../../../util/errorCodes';
import moment from 'moment';

// Mock logger
jest.mock("../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  trace: jest.fn()
}));

describe('TransientCreditCardDataHelper Tests', () => {
  const mockCorrelationId = 'test-correlation-id';

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('getCardNumber', () => {
    const mockCreditCardAccounts: Account[] = [
      {
        accountNumber: '1234567890',
        accountCategory: 'CREDIT_CARD_ACCOUNTS'
      },
      {
        accountNumber: '0987654321',
        accountCategory: 'CREDIT_CARD_ACCOUNTS'
      }
    ];

    test('should return correct card number for valid account index', () => {
      const result = TransientCreditCardDataHelper.getCardNumber(
        mockCreditCardAccounts,
        0,
        mockCorrelationId
      );
      expect(result).toBe('1234567890');
    });

    test('should throw error when account index is out of range', () => {
      expect(() => {
        TransientCreditCardDataHelper.getCardNumber(
          mockCreditCardAccounts,
          3,
          mockCorrelationId
        );
      }).toThrow(ClientError);
    });
  });

  describe('filterCreditCardAccounts', () => {
    const mockAccounts: Account[] = [
      {
        accountNumber: '1234567890',
        accountCategory: 'CREDIT_CARD_ACCOUNTS'
      },
      {
        accountNumber: '5555555555',
        accountCategory: 'CHECKING_ACCOUNTS'
      },
      {
        accountNumber: '0987654321',
        accountCategory: 'CREDIT_CARD_ACCOUNTS'
      }
    ];

    test('should filter credit card accounts from getMySummary data', () => {
      const sessionData = {
        'mysummary/getMySummary': {
          accounts: mockAccounts
        }
      };

      const result = TransientCreditCardDataHelper.filterCreditCardAccounts(
        sessionData,
        mockCorrelationId
      );

      expect(result).toHaveLength(2);
      expect(result[0].accountNumber).toBe('1234567890');
      expect(result[1].accountNumber).toBe('0987654321');
    });

    test('should filter credit card accounts from verifyCredential data', () => {
      const sessionData = {
        'signin/verifyCredential': {
          accounts: mockAccounts
        }
      };

      const result = TransientCreditCardDataHelper.filterCreditCardAccounts(
        sessionData,
        mockCorrelationId
      );

      expect(result).toHaveLength(2);
      expect(result[0].accountNumber).toBe('1234567890');
      expect(result[1].accountNumber).toBe('0987654321');
    });

    test('should throw error when neither getMySummary nor verifyCredential data exists', () => {
      const sessionData = {
        'someOtherEndpoint': {
          accounts: mockAccounts
        }
      };

      expect(() => {
        TransientCreditCardDataHelper.filterCreditCardAccounts(
          sessionData,
          mockCorrelationId
        );
      }).toThrow(ClientError);
    });
  });

  describe('checkDateInBetween', () => {
    test('should return true for date within range', () => {
      const result = TransientCreditCardDataHelper.checkDateInBetween(
        '2024-01-15',
        '2024-01-01',
        '2024-01-31'
      );
      expect(result).toBe(true);
    });

    test('should return false for date before range', () => {
      const result = TransientCreditCardDataHelper.checkDateInBetween(
        '2024-01-01',
        '2024-01-15',
        '2024-01-31'
      );
      expect(result).toBe(false);
    });

    test('should return false for date after range', () => {
      const result = TransientCreditCardDataHelper.checkDateInBetween(
        '2024-02-01',
        '2024-01-01',
        '2024-01-31'
      );
      expect(result).toBe(false);
    });

    test('should return true for date equal to start date', () => {
      const result = TransientCreditCardDataHelper.checkDateInBetween(
        '2024-01-01',
        '2024-01-01',
        '2024-01-31'
      );
      expect(result).toBe(true);
    });

    test('should return true for date equal to end date', () => {
      const result = TransientCreditCardDataHelper.checkDateInBetween(
        '2024-01-31',
        '2024-01-01',
        '2024-01-31'
      );
      expect(result).toBe(true);
    });
  });
});
