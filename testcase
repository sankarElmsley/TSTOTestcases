import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.service.impl;

import com.ymca.prs0.tbp.model.EmailProcessStatus;
import com.ymca.prs0.tbp.model.MCProcessStatus;
import com.ymca.prs0.tbp.model.S3LockStatus;
import com.ymca.prs0.tbp.model.S3ObjectStatus;
import com.ymca.prs0.tbp.model.document.ProcessingEvent;
import com.ymca.prs0.tbp.model.document.Tracker;
import com.ymca.prs0.tbp.repository.TrackerRepository;
import com.ymca.prs0.tbp.service.ProcessingEventService;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TrackerServiceImplTest {

    @Mock
    private TrackerRepository trackerRepository;

    @Mock
    private ProcessingEventService processingEventService;

    @InjectMocks
    private TrackerServiceImpl trackerService;

    private static final String FILE_KEY = "test-file-key";
    private Tracker testTracker;
    private ProcessingEvent testProcessingEvent;

    @BeforeEach
    void setUp() {
        testTracker = new Tracker();
        testTracker.setFileKey(FILE_KEY);
        testTracker.setStatus(S3ObjectStatus.PENDING);
        testTracker.setLockStatus(S3LockStatus.N);
        testTracker.setTotalContentlength(1000L);
        testTracker.setProcessedContentLength(0L);
        testTracker.setProcessedRecCount(0L);
        testTracker.setMcProcessStatus(MCProcessStatus.PENDING);
        testTracker.setEmailProcessStatus(EmailProcessStatus.PENDING);

        testProcessingEvent = new ProcessingEvent();
        testProcessingEvent.setFileKey(FILE_KEY);
        testProcessingEvent.setEndPos(999L);
        testProcessingEvent.setStatus(S3ObjectStatus.PROCESSED);
    }

    @Test
    void isFileLocked_ShouldReturnRepositoryResult() {
        // Arrange
        when(trackerRepository.isFileLocked(FILE_KEY)).thenReturn(true);

        // Act
        boolean result = trackerService.isFileLocked(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(trackerRepository).isFileLocked(FILE_KEY);
    }

    @Test
    void isNewFile_WhenFileNotExists_ShouldReturnTrue() {
        // Arrange
        when(trackerRepository.findFirstByFileKey(FILE_KEY)).thenReturn(Optional.empty());

        // Act
        boolean result = trackerService.isNewFile(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(trackerRepository).findFirstByFileKey(FILE_KEY);
    }

    @Test
    void isFileAlreadyFailed_WhenFileFailed_ShouldReturnTrue() {
        // Arrange
        testTracker.setStatus(S3ObjectStatus.FAILED);
        when(trackerRepository.findFirstByFileKeyAndStatus(FILE_KEY, S3ObjectStatus.FAILED))
            .thenReturn(Optional.of(testTracker));

        // Act
        boolean result = trackerService.isFileAlreadyFailed(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(trackerRepository).findFirstByFileKeyAndStatus(FILE_KEY, S3ObjectStatus.FAILED);
    }

    @Test
    void isFileInterrupted_WhenFileInterrupted_ShouldReturnTrue() {
        // Arrange
        testProcessingEvent.setEndPos(500L); // Less than total content length
        when(trackerRepository.findFirstByFileKey(FILE_KEY)).thenReturn(Optional.of(testTracker));
        when(processingEventService.getLastProcessingEvent(FILE_KEY)).thenReturn(testProcessingEvent);

        // Act
        boolean result = trackerService.isFileInterrupted(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(trackerRepository).findFirstByFileKey(FILE_KEY);
        verify(processingEventService).getLastProcessingEvent(FILE_KEY);
    }

    @Test
    void updateTracker_WhenProcessingComplete_ShouldUpdateStatus() {
        // Arrange
        testTracker.setTotalContentlength(1000L);
        when(trackerRepository.findFirstByFileKey(FILE_KEY)).thenReturn(Optional.of(testTracker));
        when(processingEventService.getSequencedProcessingEvents(FILE_KEY)).thenReturn(Arrays.asList(testProcessingEvent));

        // Act
        trackerService.updateTracker(FILE_KEY, S3LockStatus.N, 1000L, 100L, "");

        // Assert
        verify(trackerRepository).save(argThat(tracker -> 
            tracker.getStatus() == S3ObjectStatus.PROCESSED &&
            tracker.getProcessedContentLength() == 1000L &&
            tracker.getProcessedRecCount() == 100L
        ));
    }

    @Test
    void updateInProgressJobs_ShouldUpdateAllInProgressStatuses() {
        // Arrange
        List<Tracker> inProgressTrackers = Arrays.asList(testTracker);
        when(trackerRepository.findAllByStatus(S3ObjectStatus.INPROGRESS)).thenReturn(inProgressTrackers);
        when(trackerRepository.findAllByMcProcessStatus(MCProcessStatus.INPROGRESS)).thenReturn(inProgressTrackers);
        when(trackerRepository.findAllByEmailProcessStatus(EmailProcessStatus.INPROGRESS)).thenReturn(inProgressTrackers);

        // Act
        trackerService.updateInProgressJobs();

        // Assert
        verify(trackerRepository).updateLockAndStatusForIds(any(), eq(S3ObjectStatus.PENDING), eq(S3LockStatus.N));
        verify(trackerRepository).updateMCProcessStatusForIds(any(), eq(MCProcessStatus.PENDING));
        verify(trackerRepository).updateEmailProcessStatusForIds(any(), eq(EmailProcessStatus.PENDING));
    }

    @Test
    void getFileKeysByMCProcessStatus_ShouldReturnFileKeys() {
        // Arrange
        List<Tracker> trackers = Arrays.asList(testTracker);
        when(trackerRepository.findAllByStatusAndMcProcessStatus(S3ObjectStatus.PROCESSED, MCProcessStatus.PENDING))
            .thenReturn(trackers);

        // Act
        List<String> result = trackerService.getFileKeysByMCProcessStatus(MCProcessStatus.PENDING);

        // Assert
        assertEquals(1, result.size());
        assertEquals(FILE_KEY, result.get(0));
    }

    @Test
    void updateStatus_ShouldCallRepository() {
        // Act
        trackerService.updateStatus(S3ObjectStatus.PROCESSED, FILE_KEY);

        // Assert
        verify(trackerRepository).updateStatus(S3ObjectStatus.PROCESSED, FILE_KEY);
    }

    @Test
    void lockFile_ShouldReturnRepositoryResult() {
        // Arrange
        when(trackerRepository.lockFile(FILE_KEY)).thenReturn(true);

        // Act
        boolean result = trackerService.lockFile(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(trackerRepository).lockFile(FILE_KEY);
    }

    @Test
    void getTracker_WhenTrackerNotFound_ShouldThrowException() {
        // Arrange
        when(trackerRepository.findFirstByFileKey(FILE_KEY)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(RuntimeException.class, () -> trackerService.getTracker(FILE_KEY));
    }

    @Test
    void createTrackerAndLockFile_ShouldReturnRepositoryResult() {
        // Arrange
        when(trackerRepository.createTrackerAndLockFile(any(Tracker.class))).thenReturn(true);

        // Act
        boolean result = trackerService.createTrackerAndLockFile(testTracker);

        // Assert
        assertTrue(result);
        verify(trackerRepository).createTrackerAndLockFile(testTracker);
    }
}
