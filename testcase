import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------
import { SbDilTransientCreditCardDataService } from "../src/service/ctccd/sbDilTransientCreditCardDataService";
import { TransientCreditCardDataRequest } from "../src/model/ctccd/transientCreditCardDataRequest";
import { CreditCardDetailSessionDataService } from "../src/service/ctccd/creditCardDetailSessionDataService";
import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";
import { CdbContextService } from "../src/service/cdbcontext/cdbContextService";
import { EligibilityDecisionService } from "../src/service/dcn/eligibilityDecisionService";
import { TransientCreditCardDataHelper } from "../src/service/util/transientCreditCardDataHelper";
import { ServerError } from "../src/util/serverError";
import { ClientError } from "../src/util/clientError";
import { ErrorCodes } from "../src/util/errorCodes";
import { ApiConstants } from "../src/util/constants";

// Mock logger functions
jest.mock("../common/utils/logger", () => ({
    debug: jest.fn(),
    debugWithSanitize: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceError: jest.fn(),
    logBackendServiceResponse: jest.fn()
}));

// Mock the dependent services
jest.mock("../src/service/ctccd/creditCardDetailSessionDataService");
jest.mock("../src/service/ccar/creditCardArrangementReportService");
jest.mock("../src/service/cdbcontext/cdbContextService");
jest.mock("../src/service/dcn/eligibilityDecisionService");
jest.mock("../src/service/util/transientCreditCardDataHelper");

describe("SbDilTransientCreditCardDataService", () => {
    // Test variables
    const mockEcifId = "test-ecif-id";
    const mockSessionId = "test-session-id";
    const mockCorrelationId = "test-correlation-id";
    const mockAccountIndex = 1;
    const mockCardNumber = "1234567890123456";
    const mockRequestBody: TransientCreditCardDataRequest = {
        accountIndex: mockAccountIndex
    };

    // Mock services
    let mockCreditCardDetailSessionDataService: jest.Mocked<CreditCardDetailSessionDataService>;
    let mockCreditCardArrangementReportService: jest.Mocked<CreditCardArrangementReportService>;
    let mockCdbContextService: jest.Mocked<CdbContextService>;
    let mockEligibilityDecisionService: jest.Mocked<EligibilityDecisionService>;

    // Service under test
    let service: SbDilTransientCreditCardDataService;

    beforeEach(() => {
        jest.clearAllMocks();

        // Setup mocks
        mockCreditCardDetailSessionDataService = new CreditCardDetailSessionDataService(mockCorrelationId) as jest.Mocked<CreditCardDetailSessionDataService>;
        mockCreditCardArrangementReportService = new CreditCardArrangementReportService(mockCorrelationId) as jest.Mocked<CreditCardArrangementReportService>;
        mockCdbContextService = new CdbContextService(mockSessionId, mockEcifId, mockCorrelationId) as jest.Mocked<CdbContextService>;
        mockEligibilityDecisionService = new EligibilityDecisionService(mockCorrelationId) as jest.Mocked<EligibilityDecisionService>;

        // Mock constructor calls
        (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCreditCardDetailSessionDataService);
        (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => mockCreditCardArrangementReportService);
        (CdbContextService as jest.Mock).mockImplementation(() => mockCdbContextService);
        (EligibilityDecisionService as jest.Mock).mockImplementation(() => mockEligibilityDecisionService);

        service = new SbDilTransientCreditCardDataService(mockEcifId, mockSessionId, mockRequestBody, mockCorrelationId);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe("getSbDilEligibility", () => {
        it("should successfully retrieve SB DIL eligibility when session data is found", async () => {
            // Mock session data with card details
            const mockSessionData = {
                ecifId: mockEcifId,
                sessionId: mockSessionId,
                accountIndex: mockAccountIndex,
                accountDetail: { someProperty: "accountDetail" },
                ccarCardDetail: {
                    lob: "creditCard",
                    accountGeneralInfo: { clientProductCode: "123" },
                    customerInfo: [{ customerType: "individual" }]
                },
                ccarCustomerDetail: {}
            };

            // Mock SessionData fetch
            const mockSessionResponse = {
                data: [{ account: "data" }]
            };
            mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);

            // Mock TransientCreditCardDataHelper methods
            (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
            (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);

            // Mock session data retrieval
            mockCreditCardDetailSessionDataService.fetchCardDetails.mockResolvedValue(mockSessionData);

            // Mock eligibility decision
            const mockDecisionResponse = {
                eligibility: "ELIGIBLE",
                reason: "QUALIFYING_PRODUCT"
            };
            mockEligibilityDecisionService.getDilEligibilityDecision.mockResolvedValue(mockDecisionResponse);

            // Execute the method
            const result = await service.getSbDilEligibility();

            // Verify interactions
            expect(mockCdbContextService.getSessionData).toHaveBeenCalled();
            expect(TransientCreditCardDataHelper.filterCreditCardAccounts).toHaveBeenCalledWith(mockSessionResponse.data, mockCorrelationId);
            expect(TransientCreditCardDataHelper.getCardNumber).toHaveBeenCalledWith([{ cardNumber: mockCardNumber }], mockAccountIndex, mockCorrelationId);
            expect(mockCreditCardDetailSessionDataService.fetchCardDetails).toHaveBeenCalledWith(mockEcifId, mockSessionId, mockAccountIndex);
            expect(mockEligibilityDecisionService.getDilEligibilityDecision).toHaveBeenCalledWith("creditCard", "123", "individual");
            
            // Verify response
            expect(result).toEqual({
                statusCode: 200,
                headers: { "x-request-id": mockCorrelationId },
                body: JSON.stringify(mockDecisionResponse),
                isBase64Encoded: false
            });
            
            // Verify no CCAR service call was made since session data was found
            expect(mockCreditCardArrangementReportService.getCreditCardDetail).not.toHaveBeenCalled();
        });

        it("should retrieve card details from CCAR service when session data is not found", async () => {
            // Mock SessionData fetch
            const mockSessionResponse = {
                data: [{ account: "data" }]
            };
            mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);

            // Mock TransientCreditCardDataHelper methods
            (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
            (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);

            // Mock session data retrieval - no data found
            mockCreditCardDetailSessionDataService.fetchCardDetails.mockResolvedValue(undefined);

            // Mock CCAR service response
            const mockCardDetailResponse = {
                value: {
                    lob: "creditCard",
                    accountGeneralInfo: { clientProductCode: "456" },
                    customerInfo: [{ customerType: "business" }]
                }
            };
            mockCreditCardArrangementReportService.getCreditCardDetail.mockResolvedValue(mockCardDetailResponse);

            // Mock eligibility decision
            const mockDecisionResponse = {
                eligibility: "NOT_ELIGIBLE",
                reason: "NON_QUALIFYING_PRODUCT"
            };
            mockEligibilityDecisionService.getDilEligibilityDecision.mockResolvedValue(mockDecisionResponse);

            // Execute the method
            const result = await service.getSbDilEligibility();

            // Verify interactions
            expect(mockCdbContextService.getSessionData).toHaveBeenCalled();
            expect(mockCreditCardDetailSessionDataService.fetchCardDetails).toHaveBeenCalledWith(mockEcifId, mockSessionId, mockAccountIndex);
            expect(mockCreditCardArrangementReportService.getCreditCardDetail).toHaveBeenCalledWith(false, mockCardNumber, ApiConstants.TSYS_CLIENT_ID_CANADA, true);
            expect(mockEligibilityDecisionService.getDilEligibilityDecision).toHaveBeenCalledWith("creditCard", "456", "business");
            
            // Verify response
            expect(result).toEqual({
                statusCode: 200,
                headers: { "x-request-id": mockCorrelationId },
                body: JSON.stringify(mockDecisionResponse),
                isBase64Encoded: false
            });
        });

        it("should throw ClientError when customer has no credit card accounts", async () => {
            // Mock SessionData fetch
            const mockSessionResponse = {
                data: [{ account: "data" }]
            };
            mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);

            // Mock TransientCreditCardDataHelper methods - no credit cards found
            (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([]);

            // Execute and verify error
            await expect(service.getSbDilEligibility()).rejects.toThrow(ClientError);
            await expect(service.getSbDilEligibility()).rejects.toEqual(
                expect.objectContaining({
                    message: ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorMessage,
                    code: ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorCode
                })
            );

            // Verify no further calls were made
            expect(mockCreditCardDetailSessionDataService.fetchCardDetails).not.toHaveBeenCalled();
            expect(mockCreditCardArrangementReportService.getCreditCardDetail).not.toHaveBeenCalled();
            expect(mockEligibilityDecisionService.getDilEligibilityDecision).not.toHaveBeenCalled();
        });

        it("should throw ServerError when CDB context API fails", async () => {
            // Mock SessionData fetch with error
            const mockError = new Error("CDB context API failed");
            mockCdbContextService.getSessionData.mockRejectedValue(mockError);

            // Execute and verify error
            await expect(service.getSbDilEligibility()).rejects.toThrow(ServerError);
            await expect(service.getSbDilEligibility()).rejects.toEqual(
                expect.objectContaining({
                    message: ErrorCodes.CDB_CONTEXT_API_FAILED.errorMessage,
                    code: ErrorCodes.CDB_CONTEXT_API_FAILED.errorCode
                })
            );

            // Verify no further calls were made
            expect(mockCreditCardDetailSessionDataService.fetchCardDetails).not.toHaveBeenCalled();
            expect(mockCreditCardArrangementReportService.getCreditCardDetail).not.toHaveBeenCalled();
            expect(mockEligibilityDecisionService.getDilEligibilityDecision).not.toHaveBeenCalled();
        });

        it("should throw ServerError when eligibility decision API fails", async () => {
            // Mock SessionData fetch
            const mockSessionResponse = {
                data: [{ account: "data" }]
            };
            mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);

            // Mock TransientCreditCardDataHelper methods
            (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
            (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);

            // Mock session data retrieval
            mockCreditCardDetailSessionDataService.fetchCardDetails.mockResolvedValue(undefined);

            // Mock CCAR service response
            const mockCardDetailResponse = {
                value: {
                    lob: "creditCard",
                    accountGeneralInfo: { clientProductCode: "456" },
                    customerInfo: [{ customerType: "business" }]
                }
            };
            mockCreditCardArrangementReportService.getCreditCardDetail.mockResolvedValue(mockCardDetailResponse);

            // Mock eligibility decision failure
            const mockError = new Error("Decision API failed");
            mockEligibilityDecisionService.getDilEligibilityDecision.mockRejectedValue(mockError);

            // Execute and verify error
            await expect(service.getSbDilEligibility()).rejects.toThrow(ServerError);
            await expect(service.getSbDilEligibility()).rejects.toEqual(
                expect.objectContaining({
                    message: ErrorCodes.DECISION_API_FAILED.errorMessage,
                    code: ErrorCodes.DECISION_API_FAILED.errorCode
                })
            );
        });

        it("should handle error from session data service but continue with CCAR call", async () => {
            // Mock SessionData fetch
            const mockSessionResponse = {
                data: [{ account: "data" }]
            };
            mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);

            // Mock TransientCreditCardDataHelper methods
            (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
            (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);

            // Mock session data retrieval with error
            const sessionError = new Error("Session data error");
            mockCreditCardDetailSessionDataService.fetchCardDetails.mockRejectedValue(sessionError);

            // Mock CCAR service response
            const mockCardDetailResponse = {
                value: {
                    lob: "creditCard",
                    accountGeneralInfo: { clientProductCode: "456" },
                    customerInfo: [{ customerType: "business" }]
                }
            };
            mockCreditCardArrangementReportService.getCreditCardDetail.mockResolvedValue(mockCardDetailResponse);

            // Mock eligibility decision
            const mockDecisionResponse = {
                eligibility: "ELIGIBLE",
                reason: "QUALIFYING_PRODUCT"
            };
            mockEligibilityDecisionService.getDilEligibilityDecision.mockResolvedValue(mockDecisionResponse);

            // Execute the method - should succeed despite session data error
            const result = await service.getSbDilEligibility();

            // Verify CCAR was called as fallback
            expect(mockCreditCardArrangementReportService.getCreditCardDetail).toHaveBeenCalled();
            
            // Verify response
            expect(result.statusCode).toBe(200);
        });
    });
});
