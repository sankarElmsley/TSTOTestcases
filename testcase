import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

import { CdbContextService } from "./CdbContextService";
import { CrossAccountAPICache } from "common/cross_account/cached_api_information";
import { ServerError } from "util/serverError";
import { ErrorCodes } from "util/errorcodes";

// Mock dependencies
jest.mock("common/cross_account/cached_api_information");
jest.mock("common/utils/logger", () => ({
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

describe("CdbContextService Tests", () => {
    let service: CdbContextService;
    let mockApiCache: jest.Mocked<CrossAccountAPICache>;
    
    beforeEach(() => {
        // Set up environment variables
        process.env.crossRegion = "us-east-1";
        process.env.REGION = "us-east-1";
        process.env.crossAccountRoleForCdbContext = "test-role";
        process.env.ssmParamCdbContextApiKey = "test-api-key";
        process.env.ssmParamCdbContextGatewayId = "test-gateway-id";
        process.env.getSessionDataUrl = "https://api.test.com/(contextId)/data";
        
        // Mock CrossAccountAPICache implementation
        mockApiCache = {
            value: jest.fn().mockResolvedValue({
                apiKey: "test-key",
                apiGatewayId: "test-gateway"
            })
        } as unknown as jest.Mocked<CrossAccountAPICache>;
        
        (CrossAccountAPICache as jest.Mock).mockImplementation(() => mockApiCache);
        
        // Create service instance
        service = new CdbContextService(
            "test-session-id",
            "test-ecif-id",
            "test-correlation-id"
        );
        
        // Reset mocks
        jest.clearAllMocks();
        
        // Mock global fetch
        global.fetch = jest.fn();
    });

    afterEach(() => {
        // Clean up environment variables
        delete process.env.crossRegion;
        delete process.env.REGION;
        delete process.env.crossAccountRoleForCdbContext;
        delete process.env.ssmParamCdbContextApiKey;
        delete process.env.ssmParamCdbContextGatewayId;
        delete process.env.getSessionDataUrl;
        
        jest.restoreAllMocks();
    });

    describe("getSessionData", () => {
        test("should successfully retrieve session data when API returns 200", async () => {
            const mockResponse = { test: "data" };
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                statusText: "OK",
                json: () => Promise.resolve(mockResponse)
            });

            const result = await service.getSessionData();

            expect(result).toEqual(mockResponse);
            expect(global.fetch).toHaveBeenCalledWith(
                "https://api.test.com/test-session-id.test-ecif-id/data",
                expect.objectContaining({
                    method: "GET",
                    headers: expect.objectContaining({
                        "x-api-key": "test-key",
                        "x-apigw-api-id": "test-gateway",
                        "x-request-id": "test-correlation-id"
                    })
                })
            );
        });

        test("should throw ServerError when API returns non-200 status", async () => {
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 404,
                statusText: "Not Found"
            });

            await expect(service.getSessionData()).rejects.toThrow(
                new ServerError(
                    ErrorCodes.SESSION_DATA_API_INVALID_RESPONSE_STATUS.errorMessage,
                    ErrorCodes.SESSION_DATA_API_INVALID_RESPONSE_STATUS.errorCode
                )
            );
        });

        test("should handle API call exceptions", async () => {
            (global.fetch as jest.Mock).mockRejectedValueOnce(new Error("Network error"));

            await expect(service.getSessionData()).rejects.toThrow(
                new ServerError(
                    ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR.errorMessage,
                    ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR.errorCode
                )
            );
        });

        test("should handle SSM parameter initialization errors", async () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error("SSM Error");
            });

            await expect(service.getSessionData()).rejects.toThrow(
                new ServerError(
                    ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR_SM_PARAM.errorMessage,
                    ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR_SM_PARAM.errorCode
                )
            );
        });
    });
});
