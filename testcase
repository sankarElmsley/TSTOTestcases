import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoSettings;
import org.springframework.data.mongodb.core.BulkOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.index.Index;
import org.springframework.data.mongodb.core.index.IndexOperations;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.test.util.ReflectionTestUtils;
import com.mongodb.bulk.BulkWriteResult;
import org.bson.types.ObjectId;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class SFMCRawRecordCustomRepositoryImplTest {

    @Mock
    private MongoTemplate mongoTemplate;

    @Mock
    private BulkOperations bulkOperations;

    @Mock
    private BulkWriteResult bulkWriteResult;

    @Mock
    private IndexOperations indexOperations;

    @InjectMocks
    private SFMCRawRecordCustomRepositoryImpl repository;

    @Captor
    private ArgumentCaptor<Query> queryCaptor;

    private final List<ObjectId> mockObjectIds = Arrays.asList(
        new ObjectId("507f1f77bcf86d799439011"),
        new ObjectId("507f1f77bcf86d799439012")
    );

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(repository, "deleteBatchSize", 100);
        when(mongoTemplate.bulkOps(eq(BulkOperations.BulkMode.UNORDERED), eq(SFMCRawRecord.class)))
                .thenReturn(bulkOperations);
        when(mongoTemplate.indexOps(eq(SFMCRawRecord.class))).thenReturn(indexOperations);
        when(indexOperations.ensureIndex(any(Index.class))).thenReturn("index");
        when(bulkOperations.remove(any(Query.class))).thenReturn(bulkOperations);
        when(bulkOperations.execute()).thenReturn(bulkWriteResult);
    }

    @Test
    void updateStatusForIds_ShouldUpdateStatusForGivenIds() {
        // Arrange
        when(mongoTemplate.bulkOps(any(), eq(SFMCRawRecord.class))).thenReturn(bulkOperations);
        when(bulkOperations.execute()).thenReturn(bulkWriteResult);

        // Act
        repository.updateStatusForIds(mockObjectIds, RawRecordStatus.PROCESSED);

        // Assert
        verify(bulkOperations).updateMulti(
                argThat(query -> query.getQueryObject().get("_id").toString().contains("$in")),
                argThat(update -> update.getUpdateObject().get("$set").toString().contains("status"))
        );
        verify(bulkOperations).execute();
    }

    @Test
    @DisplayName("Should delete records in batches")
    void shouldDeleteInBatches() {
        // Arrange
        String fileKey = "test-file";
        List<SFMCRawRecord> firstBatch = createMockRecords(2);
        List<SFMCRawRecord> secondBatch = createMockRecords(3);
        
        when(mongoTemplate.find(any(Query.class), eq(SFMCRawRecord.class)))
                .thenReturn(firstBatch)
                .thenReturn(secondBatch)
                .thenReturn(Collections.emptyList());
        when(bulkWriteResult.getDeletedCount()).thenReturn(2L).thenReturn(3L).thenReturn(0L);

        // Act
        repository.deleteInBatches(fileKey, 100);

        // Assert
        verify(mongoTemplate, times(3)).find(queryCaptor.capture(), eq(SFMCRawRecord.class));
        verify(bulkOperations, times(2)).remove(any(Query.class));
        verify(bulkOperations, times(2)).execute();
        verify(indexOperations).ensureIndex(any(Index.class));

        List<Query> capturedQueries = queryCaptor.getAllValues();
        assertThat(capturedQueries).hasSize(3)
            .allMatch(query -> query.toString().contains("fileKey"));
    }

    private List<SFMCRawRecord> createMockRecords(int count) {
        return Arrays.stream(new int[count])
                .mapToObj(i -> {
                    SFMCRawRecord record = new SFMCRawRecord();
                    record.set_id(new ObjectId());
                    return record;
                })
                .collect(Collectors.toList());
    }
}
