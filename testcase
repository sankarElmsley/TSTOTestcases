import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

import { CreditCardAccountEntryViewReportService } from "../src/service/ccaev/creditCardAccountEntryViewReportService";
import { ServerError } from "../src/util/serverError";
import { ErrorCodes } from "../src/util/errorCodes";

let creditCardAccountEntryViewService: CreditCardAccountEntryViewReportService;
const mockSessionId = "test-session-123";
const mockEcifId = "test-ecif-123";
const mockCorrelationId = "test-correlation-id";

// Mock AWS SDK
jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-secrets-manager', () => ({
  SecretsManagerClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      SecretString: JSON.stringify({
        clientId: 'mock-client-id',
        clientSecret: 'mock-client-secret'
      })
    })
  }))
}));

// Mock the common/aws/sts module
jest.mock("../../../../common/aws/sts", () => ({
  AssumeRole: jest.fn().mockResolvedValue({
    accessKeyId: "mock-access-key",
    secretAccessKey: "mock-secret-key",
    sessionToken: "mock-session-token"
  })
}));

// Mock the common/aws/ssm module
jest.mock("../../../../common/aws/ssm", () => ({
  GetParamValue: jest.fn().mockResolvedValue("mock-param-value")
}));

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    value: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id"
    })
  }))
}));

// Mock CognitoTokenCache
jest.mock("../../../../common/cognito/cached_cognito_token", () => ({
  CognitoTokenCache: jest.fn().mockImplementation(() => ({
    Value: jest.fn().mockResolvedValue("mock-cognito-token")
  }))
}));

describe("CreditCardAccountEntryViewReportService", () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Set up environment variables
    process.env = {
      AWS_REGION: "us-east-1",
      AWS_SDK_LOAD_CONFIG: "1",
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRoleForCdbContext: "test-role",
      ssmParamCdbContextApiKey: "test-api-key",
      ssmParamCdbContextGatewayId: "test-gateway-id",
      cachedCognitoTokenSecretName: "test-cognito-secret",
      awsProxySgUx: "test-proxy-url",
      cognitoSecretArn: "test-secret-arn"
    };

    // Create new instance
    creditCardAccountEntryViewService = new CreditCardAccountEntryViewReportService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Clean up environment variables
    process.env = {};
  });

  describe("getPostedCCTransactions", () => {
    test("should fetch posted transactions successfully", async () => {
      const result = await creditCardAccountEntryViewService.getPostedCCTransactions();
      expect(result).toBeDefined();
    });

    test("should handle apiInfoCache initialization failure", async () => {
      // Mock CrossAccountAPICache constructor to throw
      const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      CrossAccountAPICache.mockImplementationOnce(() => {
        throw new Error("Failed to initialize API cache");
      });

      // Create new instance to trigger error
      expect(() => {
        new CreditCardAccountEntryViewReportService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        );
      }).toThrow(ServerError);
    });

    test("should handle cognitoTokenCache initialization failure", async () => {
      // Mock CognitoTokenCache constructor to throw
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      CognitoTokenCache.mockImplementationOnce(() => {
        throw new Error("Failed to initialize Cognito cache");
      });

      await expect(creditCardAccountEntryViewService.getPostedCCTransactions())
        .rejects
        .toThrow();
    });

    test("should handle cognitoTokenCache.Value() failure", async () => {
      // Mock CognitoTokenCache Value method to reject
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      CognitoTokenCache.mockImplementationOnce(() => ({
        Value: jest.fn().mockRejectedValue(new Error("Failed to get Cognito token"))
      }));

      await expect(creditCardAccountEntryViewService.getPostedCCTransactions())
        .rejects
        .toThrow();
    });

    test("should handle missing environment variables", async () => {
      // Clear environment variables
      process.env = {};

      expect(() => {
        new CreditCardAccountEntryViewReportService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        );
      }).not.toThrow();
    });
  });

  describe("Constructor initialization", () => {
    test("should initialize with correct parameters", () => {
      const service = new CreditCardAccountEntryViewReportService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );
      expect(service).toBeDefined();
    });

    test("should handle missing required parameters", () => {
      expect(() => {
        new CreditCardAccountEntryViewReportService("", "", "");
      }).not.toThrow();
    });
  });

  describe("API information cache", () => {
    test("should initialize apiInfoCache only once", () => {
      const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      
      // Create multiple instances
      new CreditCardAccountEntryViewReportService(mockSessionId, mockEcifId, mockCorrelationId);
      new CreditCardAccountEntryViewReportService(mockSessionId, mockEcifId, mockCorrelationId);
      
      // Should only be called once due to static cache
      expect(CrossAccountAPICache).toHaveBeenCalledTimes(1);
    });
  });

  describe("Cognito token cache", () => {
    test("should initialize cognitoTokenCache only once", async () => {
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      
      // Call getPostedCCTransactions multiple times
      await creditCardAccountEntryViewService.getPostedCCTransactions();
      await creditCardAccountEntryViewService.getPostedCCTransactions();
      
      // Should only be called once due to static cache
      expect(CognitoTokenCache).toHaveBeenCalledTimes(1);
    });

    test("should use cached cognito token for subsequent calls", async () => {
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      const mockValue = jest.fn().mockResolvedValue("mock-token");
      
      CognitoTokenCache.mockImplementation(() => ({
        Value: mockValue
      }));

      await creditCardAccountEntryViewService.getPostedCCTransactions();
      await creditCardAccountEntryViewService.getPostedCCTransactions();

      // Value should be called twice but constructor only once
      expect(mockValue).toHaveBeenCalledTimes(2);
      expect(CognitoTokenCache).toHaveBeenCalledTimes(1);
    });
  });
});


npm install --save-dev @aws-sdk/client-secrets-manager @aws-sdk/client-sts @aws-sdk/client-ssm

import { CreditCardAccountEntryViewReportService } from "../src/service/ccaev/creditCardAccountEntryViewReportService";
import { ServerError } from "../src/util/serverError";
import { ErrorCodes } from "../src/util/errorCodes";

let creditCardAccountEntryViewService: CreditCardAccountEntryViewReportService;
const mockSessionId = "test-session-123";
const mockEcifId = "test-ecif-123";
const mockCorrelationId = "test-correlation-id";

// Mock AWS SDK
jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    value: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id"
    })
  }))
}));

// Mock CognitoTokenCache
jest.mock("../../../../common/cognito/cached_cognito_token", () => ({
  CognitoTokenCache: jest.fn().mockImplementation(() => ({
    Value: jest.fn().mockResolvedValue("mock-cognito-token")
  }))
}));

describe("CreditCardAccountEntryViewReportService", () => {
  beforeEach(() => {
    jest.resetModules();
    jest.clearAllMocks();
    
    process.env = {
      AWS_REGION: "us-east-1",
      REGION: "us-east-1",
      crossRegion: "us-east-1",
      crossAccountRoleForCdbContext: "test-role",
      ssmParamCdbContextApiKey: "test-api-key",
      ssmParamCdbContextGatewayId: "test-gateway-id",
      cachedCognitoTokenSecretName: "test-cognito-secret",
      cognitoSecretArn: "test-secret-arn"
    };

    creditCardAccountEntryViewService = new CreditCardAccountEntryViewReportService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    process.env = {};
  });

  describe("getPostedCCTransactions", () => {
    test("should fetch posted transactions successfully", async () => {
      const result = await creditCardAccountEntryViewService.getPostedCCTransactions();
      expect(result).toBeDefined();
    });

    test("should handle apiInfoCache initialization failure", () => {
      const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      CrossAccountAPICache.mockImplementation(() => {
        throw new Error("Failed to initialize API cache");
      });

      expect(() => {
        new CreditCardAccountEntryViewReportService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        );
      }).toThrow(ServerError);
    });

    test("should handle cognitoTokenCache Value() failure", async () => {
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      const mockError = new Error("Failed to get Cognito token");
      
      CognitoTokenCache.mockImplementation(() => ({
        Value: jest.fn().mockRejectedValue(mockError)
      }));

      try {
        await creditCardAccountEntryViewService.getPostedCCTransactions();
        fail('Expected an error to be thrown');
      } catch (error) {
        expect(error).toBeDefined();
      }
    });
  });

  describe("Caching behavior", () => {
    test("should initialize apiInfoCache only once", () => {
      jest.isolateModules(() => {
        const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
        
        // Create multiple instances
        new CreditCardAccountEntryViewReportService(mockSessionId, mockEcifId, mockCorrelationId);
        new CreditCardAccountEntryViewReportService(mockSessionId, mockEcifId, mockCorrelationId);
        
        expect(CrossAccountAPICache).toHaveBeenCalledTimes(1);
      });
    });

    test("should initialize cognitoTokenCache only when calling getPostedCCTransactions", async () => {
      const CognitoTokenCache = require("../../../../common/cognito/cached_cognito_token").CognitoTokenCache;
      
      // First call should initialize cache
      await creditCardAccountEntryViewService.getPostedCCTransactions();
      expect(CognitoTokenCache).toHaveBeenCalledTimes(1);

      // Second call should use same cache
      await creditCardAccountEntryViewService.getPostedCCTransactions();
      expect(CognitoTokenCache).toHaveBeenCalledTimes(1);
    });
  });
});
