import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// File: EligibilityDecisionService.test.ts

// File: EligibilityDecisionService.test.ts

// Properly mock CrossAccountAPICache with a correctly structured implementation
jest.mock("../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    value: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id"
    })
  }))
}));

// Mock fetch
global.fetch = jest.fn();
global.performance = {
  ...global.performance,
  now: jest.fn().mockReturnValue(1000)
};

// Mock environment variables
process.env = {
  ...process.env,
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Mock logger functions
jest.mock("../../common/utils/logger", () => ({
  debug: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ServerError } from '../../util/serverError';
import { ClientError } from '../../util/clientError';
import { ApiConstants } from '../../util/constants';
import { ErrorCodes } from '../../util/errorCodes';
import { trace, info, debug, error, logBackendServiceRequest, logBackendServiceResponse, logBackendServiceError } from '../../common/utils/logger';

describe('EligibilityDecisionService', () => {
  // Test setup
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
    
    // We need to make sure each test gets a fresh mock implementation
    (CrossAccountAPICache as jest.Mock).mockImplementation(() => ({
      value: jest.fn().mockResolvedValue({
        apiKey: "mock-api-key",
        apiGatewayId: "mock-gateway-id"
      })
    }));
  });

  test('should create service instance', () => {
    // Basic test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
  });

  test('should handle successful eligibility decision API call', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE',
        reason: 'QUALIFYING_PRODUCT'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify the result
    expect(result).toBeDefined();
    expect(result.eligibility).toBe('ELIGIBLE');
    expect(result.reason).toBe('QUALIFYING_PRODUCT');
    
    // Verify fetch was called correctly
    expect(fetch).toHaveBeenCalledTimes(1);
    const [url, options] = (fetch as jest.Mock).mock.calls[0];
    expect(url).toContain(process.env.GET_ELIGIBILITY_DECISION_URL);
    expect(options.headers['x-api-key']).toBe('mock-api-key');
    expect(options.headers['x-apigw-api-id']).toBe('mock-gateway-id');
  });

  test('should handle non-200 response from API', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Expect the service to throw a ServerError
    await expect(
      service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType)
    ).rejects.toThrow(ServerError);
    
    // Verify error was logged
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
  });

  test('should retry on ClientError and succeed on second attempt', async () => {
    // First attempt fails with a ClientError
    (fetch as jest.Mock).mockRejectedValueOnce(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Second attempt succeeds
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify we got a result
    expect(result).toBeDefined();
    expect(result.eligibility).toBe('ELIGIBLE');
    
    // Verify fetch was called twice
    expect(fetch).toHaveBeenCalledTimes(2);
    
    // Verify error logging for the first attempt
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceError).toHaveBeenCalled();
  });
  
  test('should fail after max retries with ClientError', async () => {
    // Mock ClientError for all attempts 
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Expect the service to throw a ServerError after max retries
    await expect(
      service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType)
    ).rejects.toThrow(ServerError);
    
    // Verify fetch was called twice (max retries)
    expect(fetch).toHaveBeenCalledTimes(2);
    
    // Verify error logging
    expect(error).toHaveBeenCalledWith(
      expect.stringContaining('max retries'),
      expect.anything(),
      expect.anything()
    );
  });
  
  test('should throw original error for non-ClientError exceptions', async () => {
    // Mock a non-ClientError exception
    const originalError = new Error('Some unexpected error');
    (fetch as jest.Mock).mockRejectedValueOnce(originalError);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Expect the service to throw the original error
    await expect(
      service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType)
    ).rejects.toThrow(originalError);
    
    // Verify fetch was called once
    expect(fetch).toHaveBeenCalledTimes(1);
    
    // Verify error logging
    expect(logBackendServiceError).toHaveBeenCalled();
  });
  
  test('should use trace logging for entry and exit points', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify trace was called with entry and exit points
    expect(trace).toHaveBeenCalledWith(
      expect.stringContaining('In getDilEligibilityDecision'),
      mockCorrelationId
    );
    
    expect(trace).toHaveBeenCalledWith(
      expect.stringContaining('Out getDilEligibilityDecision'),
      mockCorrelationId
    );
  });
  
  test('should log backend service request and response', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify backend service logging
    expect(logBackendServiceRequest).toHaveBeenCalledWith(
      'DCN',
      expect.any(String),
      mockCorrelationId
    );
    
    expect(logBackendServiceResponse).toHaveBeenCalledWith(
      'DCN',
      expect.any(Number),
      expect.any(String),
      mockCorrelationId
    );
  });
  
  test('should log error on API failure', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call method and catch error
    await expect(
      service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType)
    ).rejects.toThrow();
    
    // Verify error was logged
    expect(error).toHaveBeenCalledWith(
      expect.stringContaining('service failed after attempt'),
      mockCorrelationId
    );
  });
  
  test('should log error on retry failure', async () => {
    // Mock ClientError for all attempts 
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call method and catch error
    await expect(
      service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType)
    ).rejects.toThrow();
    
    // Verify error logging
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceError).toHaveBeenCalled();
  });
  
  test('should send correct request payload', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify fetch was called with correct payload
    expect(fetch).toHaveBeenCalledTimes(1);
    const [url, requestInfo] = (fetch as jest.Mock).mock.calls[0];
    
    // Parse the request body and check its structure
    const requestBody = JSON.parse(requestInfo.body);
    expect(requestBody).toHaveProperty('decisionName', ApiConstants.DECISION_NAME_INSTALLMENT_LENDING);
    expect(requestBody).toHaveProperty('context');
    expect(requestBody.context).toHaveProperty('LOB', mockLob);
    expect(requestBody.context).toHaveProperty('CPC', mockClientProductCode);
    expect(requestBody.context).toHaveProperty('CustType', mockCustomerType);
  });

  test('should include all required headers in request', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify fetch was called with correct headers
    expect(fetch).toHaveBeenCalledTimes(1);
    const [url, requestInfo] = (fetch as jest.Mock).mock.calls[0];
    
    // Check headers
    expect(requestInfo.headers).toHaveProperty('Content-Type', 'application/json');
    expect(requestInfo.headers).toHaveProperty('x-apigw-api-id', 'mock-gateway-id');
    expect(requestInfo.headers).toHaveProperty('x-api-key', 'mock-api-key');
    expect(requestInfo.headers).toHaveProperty('x-request-id', mockCorrelationId);
    expect(requestInfo.headers).toHaveProperty('x-tapi-interaction-id', mockCorrelationId);
    expect(requestInfo.headers).toHaveProperty('x-app-cat-id', ApiConstants.APP_CAT_ID);
    expect(requestInfo.headers).toHaveProperty('x-client-id', ApiConstants.APP_CAT_ID);
    expect(requestInfo.headers).toHaveProperty('x-fapi-financial-id', ApiConstants.API_FINANCIAL_ID);
  });

  test('should handle error during CrossAccountAPICache creation', () => {
    // Mock CrossAccountAPICache to throw an error during instantiation
    jest.resetModules();
    jest.mock("../../common/cross_account/cached_api_information", () => ({
      CrossAccountAPICache: jest.fn().mockImplementation(() => {
        throw new Error('Failed to create cache');
      })
    }));
    
    // Reimport the modules to get the new mock
    const { EligibilityDecisionService } = require('../../service/dcn/eligibilityDecisionService');
    
    // Expect the constructor to throw a ServerError
    expect(() => {
      new EligibilityDecisionService(mockCorrelationId);
    }).toThrow(ServerError);
    
    // Restore the original mock
    jest.resetModules();
    jest.mock("../../common/cross_account/cached_api_information", () => ({
      CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        value: jest.fn().mockResolvedValue({
          apiKey: "mock-api-key",
          apiGatewayId: "mock-gateway-id"
        })
      }))
    }));
  });
});

====================================================================================================================

describe("Scenario: TransactionHistoryFlowService.getTransactionHistoryEndpointFlowTypes returns valid data", () => {
  let transactionHistoryFlowService;
  // Define accountResponse mock
  const accountResponse = {
    accounts: [{ accountIndex: 0, accountType: 'CREDIT_CARD', useDdsFlow: false }]
  };

  beforeEach(() => {
    transactionHistoryFlowService = new TransactionHistoryFlowService("ecifId", "sessionId", "correlationId");
  });

  test("getTransactionHistoryEndpointFlowTypes: valid ecifId, sessionId and accountIndex; returns the API response", async () => {
    transactionHistoryFlowService.getTransactionHistoryFlowType = jest.fn().mockImplementation(() => {
      return accountResponse;
    });
    const apiResponse = await transactionHistoryFlowService.getTransactionHistoryEndpointFlowTypes();
    expect(apiResponse).not.toBeNull();
    expect(apiResponse.body).not.toBeNull();
    expect(apiResponse.headers).not.toBeNull();
    expect(apiResponse.statusCode).not.toBeNull();
    expect(apiResponse.statusCode).toEqual(200);
  });

  test("getTransactionHistoryFlowType: return account response", async () => {
    const accounts = [{ 
      accountIndex: 0, 
      accountCategory: "CREDIT_CARD_ACCOUNTS", 
      accountType: "credit", 
      accountNumber: "123456789"
    }];
    const sessionData = { 
      "mysummary/getMySummary": { 
        accounts: accounts 
      } 
    };
    
    transactionHistoryFlowService.filterCreditCardAccounts = jest.fn().mockImplementation(() => {
      return accounts;
    });
    CdbContextService.prototype.getSessionData = jest.fn().mockImplementation(() => {
      return { data: sessionData };
    });
    CreditcardUtilityService.prototype.getBinRangesCached = jest.fn().mockImplementation(() => {
      return [];
    });
    const response = await transactionHistoryFlowService.getTransactionHistoryFlowType();
    expect(response.accounts).toHaveLength(1);
    expect(response.accounts[0].accountType).toEqual("CREDIT_CARD");
  });

  test("getTransactionHistoryFlowType: return empty response", async () => {
    const accounts = [];
    transactionHistoryFlowService.filterCreditCardAccounts = jest.fn().mockImplementation(() => {
      return accounts;
    });
    CdbContextService.prototype.getSessionData = jest.fn().mockImplementation(() => {
      return { data: { "mysummary/getMySummary": { accounts: [] } } };
    });
    CreditcardUtilityService.prototype.getBinRangesCached = jest.fn().mockImplementation(() => {
      return [];
    });
    const response = await transactionHistoryFlowService.getTransactionHistoryFlowType();
    expect(response.accounts.length).toEqual(0);
  });

  test("filterCreditCardAccounts: return creditCardAccounts", async () => {
    const creditCardAccount = { 
      accountCategory: "CREDIT_CARD_ACCOUNTS", 
      accountIndex: 0, 
      accountType: "credit", 
      useDdsFlow: false 
    };
    const summaryAccounts = {
      accounts: [creditCardAccount]
    };
    const sessionData = { "mysummary/getMySummary": summaryAccounts };
    const returnValue = transactionHistoryFlowService.filterCreditCardAccounts(sessionData);
    expect(returnValue).toEqual(summaryAccounts.accounts);
  });
});
