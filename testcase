import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

// Mock modules before importing anything
jest.mock('node:http', () => ({}));
jest.mock('node:https', () => ({}));
jest.mock('node:url', () => ({}));
jest.mock('node:stream', () => ({}));
jest.mock('node:buffer', () => ({}));

// Mock node-fetch
const mockFetchResponse = {
  status: 200,
  json: () => Promise.resolve({})
};
const mockFetch = jest.fn(() => Promise.resolve(mockFetchResponse));
jest.mock('node-fetch', () => mockFetch);

import { CreditCardAccountEntryViewReportService } from "../src/service/ccaev/creditCardAccountEntryViewReportService";
import { CrossAccountAPICache } from "../../../common/cross_account/cached_api_information";
import { CognitoTokenCache } from "../../../common/cognito/cached_cognito_token";

// Mock AWS SDK modules
jest.mock('@aws-sdk/client-secrets-manager', () => ({
  SecretsManagerClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      SecretString: JSON.stringify({
        clientId: 'test-client-id',
        clientSecret: 'test-client-secret'
      })
    })
  }))
}));

jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

// Mock the CrossAccountAPICache
jest.mock("../../../common/cross_account/cached_api_information");
const MockedCrossAccountAPICache = CrossAccountAPICache as jest.MockedClass<typeof CrossAccountAPICache>;

// Mock the CognitoTokenCache
jest.mock("../../../common/cognito/cached_cognito_token");
const MockedCognitoTokenCache = CognitoTokenCache as jest.MockedClass<typeof CognitoTokenCache>;

// Mock logger functions
jest.mock("../../../common/utils/logger", () => ({
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    debug: jest.fn(),
}));

describe('CreditCardAccountEntryViewReportService', () => {
    const mockSessionId = 'test-session-123';
    const mockEcifId = 'test-ecif-456';
    const mockCorrelationId = 'test-correlation-789';
    let service: CreditCardAccountEntryViewReportService;

    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();

        // Set up environment variables
        process.env = {
            crossRegion: 'us-east-1',
            REGION: 'us-east-1',
            crossAccountRoleForCdbContext: 'test-role',
            ssmParamCdbContextApiKey: 'test-api-key',
            ssmParamCdbContextGatewayId: 'test-gateway-id',
            cachedCognitoTokenSecretName: 'test-cognito-secret',
            awsProxySgUx: 'http://test-proxy',
            cognitoSecretArn: 'test-secret-arn'
        };

        // Mock CrossAccountAPICache implementation
        MockedCrossAccountAPICache.mockImplementation(() => ({
            Value: jest.fn().mockResolvedValue({
                apiKey: 'mock-api-key',
                apiGatewayId: 'mock-gateway-id'
            })
        } as unknown as CrossAccountAPICache));

        // Mock CognitoTokenCache implementation
        MockedCognitoTokenCache.mockImplementation(() => ({
            Value: jest.fn().mockResolvedValue('mock-cognito-token')
        } as unknown as CognitoTokenCache));

        // Create new instance of service
        service = new CreditCardAccountEntryViewReportService(
            mockSessionId,
            mockEcifId,
            mockCorrelationId
        );
    });

    afterEach(() => {
        jest.clearAllMocks();
        process.env = {};
    });

    describe('getPostedCCTransactions', () => {
        it('should successfully retrieve posted transactions', async () => {
            const mockResponse = { data: 'test-data' };
            mockFetch.mockImplementationOnce(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockResponse)
                })
            );

            const result = await service.getPostedCCTransactions();
            expect(result).toBeDefined();
            expect(MockedCognitoTokenCache.prototype.Value).toHaveBeenCalled();
        });

        it('should handle missing environment variables', async () => {
            process.env = {};
            
            const serviceWithNoEnv = new CreditCardAccountEntryViewReportService(
                mockSessionId,
                mockEcifId,
                mockCorrelationId
            );

            const result = await serviceWithNoEnv.getPostedCCTransactions();
            expect(result).toBeDefined();
        });

        it('should handle CognitoTokenCache errors', async () => {
            MockedCognitoTokenCache.mockImplementation(() => ({
                Value: jest.fn().mockRejectedValue(new Error('Cognito token error'))
            } as unknown as CognitoTokenCache));

            await expect(service.getPostedCCTransactions())
                .rejects
                .toThrow();
        });
    });

    describe('initialization', () => {
        it('should properly initialize with valid parameters', () => {
            expect(service).toBeDefined();
            expect(MockedCrossAccountAPICache).toHaveBeenCalled();
        });

        it('should handle CrossAccountAPICache initialization errors', () => {
            MockedCrossAccountAPICache.mockImplementation(() => {
                throw new Error('API Cache initialization error');
            });

            expect(() => {
                new CreditCardAccountEntryViewReportService(
                    mockSessionId,
                    mockEcifId,
                    mockCorrelationId
                );
            }).toThrow();
        });
    });
});
