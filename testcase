import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardRewardService } from "///src/service/ccr/creditCardRewardService";

// Mock logger
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    getValue: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id",
    }),
  })),
}));

describe("CreditCardRewardService Tests", () => {
  let creditCardRewardService: CreditCardRewardService;
  const mockSessionId = "test-session-id";
  const mockEcifId = "test-ecif-id";
  const mockCorrelationId = "test-correlation-id";

  beforeEach(() => {
    // Set up environment variables
    process.env.crossRegion = "us-east-1";
    process.env.REGION = "us-east-1";
    process.env.crossAccountRoleForCdbContext = "test-role";
    process.env.ssmParamCdbContextApiKey = "test-api-key";
    process.env.ssmParamCdbContextGatewayId = "test-gateway-id";
    
    // Reset all mocks
    jest.clearAllMocks();
    
    // Create new instance
    creditCardRewardService = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Clear environment variables
    delete process.env.crossRegion;
    delete process.env.REGION;
    delete process.env.crossAccountRoleForCdbContext;
    delete process.env.ssmParamCdbContextApiKey;
    delete process.env.ssmParamCdbContextGatewayId;
  });

  describe("constructor", () => {
    test("should create instance with provided values", () => {
      const service = new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );
      
      expect(service).toBeInstanceOf(CreditCardRewardService);
    });

    test("should throw error when environment variables are missing", () => {
      delete process.env.crossRegion;
      delete process.env.REGION;

      expect(() => 
        new CreditCardRewardService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        )
      ).not.toThrow();
    });
  });

  describe("loadApiInfo", () => {
    test("should initialize apiInfoCache with correct parameters", () => {
      const mockCrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;

      new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );

      expect(mockCrossAccountAPICache).toHaveBeenCalledWith(
        "us-east-1",
        "us-east-1",
        "test-role",
        "test-api-key",
        "test-gateway-id",
        60 * 60 * 1000
      );
    });

    test("should not reinitialize apiInfoCache if already exists", () => {
      const mockCrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      
      // Create first instance
      new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );
      
      // Reset mock
      mockCrossAccountAPICache.mockClear();
      
      // Create second instance
      new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );

      expect(mockCrossAccountAPICache).not.toHaveBeenCalled();
    });
  });

  describe("getRewardDetails", () => {
    test("should return empty string (placeholder implementation)", async () => {
      const result = await creditCardRewardService.getRewardDetails();
      expect(result).toBe("");
    });

    test("should log trace messages", async () => {
      const mockTrace = require("../../../../common/utils/logger").trace;
      
      await creditCardRewardService.getRewardDetails();

      expect(mockTrace).toHaveBeenCalledWith(
        "CreditCardRewardService - In getRewardDetails.....",
        mockCorrelationId
      );
      expect(mockTrace).toHaveBeenCalledWith(
        "CreditCardRewardService - Out getRewardDetails.",
        mockCorrelationId
      );
    });
  });

  describe("error handling", () => {
    test("should throw ServerError when CrossAccountAPICache initialization fails", () => {
      const mockCrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      
      mockCrossAccountAPICache.mockImplementationOnce(() => {
        throw new Error("API Cache Error");
      });

      expect(() => 
        new CreditCardRewardService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        )
      ).toThrow();
    });
  });
});
