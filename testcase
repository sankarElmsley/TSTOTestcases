import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';


# Consent Management System Flow Documentation

## Overview
The Consent Management System handles three main flows for managing user consent for financial data access.

## Detailed Flow Analysis

### Flow 1: Get Processing Purpose (Timestamp: 18:09:15)
Initial retrieval of consent purpose details.

#### API Endpoint
```
POST /identityManagement/consent/v1/consentcontent
POST /esbapi/party/bmopartyconsent/v1/getbmoprocessingpurpose
```

### Flow 2: Consent Acceptance (Timestamp: 18:09:32)
Recording user's consent decision.

#### API Endpoints
```
POST /identityManagement/consent/v1/consent/acceptance
POST /esbapi/party/bmopartyconsent/v1/getallbmopartyconsents
POST /esbapi/party/bmopartyconsent/v1/addbmopartyconsent
```

### Flow 3: Get BMO Processing Purpose (Timestamp: 19:57:08)
Separate flow for retrieving BMO-specific processing purpose details.

#### API Endpoints
```
POST /identityManagement/consent/v1/consentcontent
POST /esbapi/party/bmopartyconsent/v1/getbmoprocessingpurpose
```

#### Key Request Headers
- headerVersion: "1"
- digitalSignature: "digitalSignature"
- timeoutTime: "0"
- requestId: "REQ_butahy"
- correlation tracking IDs

## Common Elements Across Flows

### Security Headers
- Digital Signatures
- Transaction IDs
- Correlation IDs

### Response Times
- Get Processing Purpose: ~200ms
- Consent Acceptance: ~429ms
- Get BMO Processing Purpose: ~150-200ms

### Error Handling
- All successful responses return 200 OK
- Proper error codes for failures (not seen in logs)

## System Components Interaction
1. Client initiates requests to Consent Management API
2. API processes and validates requests
3. BMO Party Consent Service handles data operations
4. Responses flow back through the same chain

## Logging Patterns
- DEBUG level logging throughout
- Transaction tracing via correlation IDs
- Timestamp accuracy to millisecond level
- Full request/response cycle logging

## Transaction Flow Sequence
1. Get initial processing purpose
2. Record consent acceptance
3. Retrieve BMO-specific processing details

## Recommendations
1. Consider implementing caching for processing purpose details
2. Add more detailed error logging
3. Implement request rate limiting
4. Add performance monitoring
