import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// CHANGE 1: Add imports to TransientCreditcardDataService.ts
import { EligibilityDecisionService } from "../dcn/eligibilityDecisionService";
import { RetailCreditCardAccountDetailResponseMappingHelper as RetailMappingHelper } from "../mapper/retailCreditCardAccountDetailResponseMappingHelper";

// CHANGE 2: Add property and update constructor in TransientCreditcardDataService class
class TransientCreditcardDataService {
    // Add this property
    private readonly decisionService: EligibilityDecisionService;
    private dilEligibilityDecision: boolean = false;
    
    // Update constructor to include decisionService initialization
    constructor(ecifId: string, ocifId: string, sessionId: string, requestBody: TransientCreditCardDataRequest, correlationId: string) {
        // ... existing initializations ...
        this.decisionService = new EligibilityDecisionService(correlationId);
        // ... existing initializations ...
    }
    
    // CHANGE 3: Add method to get DIL eligibility
    private async getDilEligibilityDecision(cardNumber: string, creditcardDetailResponse: CreditCardAccountDetailResponse): Promise<boolean> {
        console.trace(
            TransientCreditcardDataService.LOG_PREFIX.concat("In getDilEligibilityDecision..."),
            this.correlationId
        );
        
        try {
            const lineOfBusiness = creditcardDetailResponse?.lob ?? '';
            const clientProductCode = creditcardDetailResponse?.retail?.inqGeneralAcctResponse?.accountGeneralInfo?.clientProductCode ?? '';
            const customerInfo = RetailMappingHelper.findCustomerInfo(
                cardNumber, 
                creditcardDetailResponse?.retail?.inqCustInfoResponse
            );
            
            const customerType = customerInfo?.customerType ?? '';
            
            console.info(
                TransientCreditcardDataService.LOG_PREFIX.concat(
                    "Eligibility Decision request params: lineOfBusiness: ", lineOfBusiness,
                    ", clientProductCode: ", clientProductCode,
                    ", customerType: ", customerType
                ),
                this.correlationId
            );
            
            if (lineOfBusiness && clientProductCode && customerType) {
                const decisionApiResponse = await this.decisionService.getDilEligibilityDecision(
                    lineOfBusiness, 
                    clientProductCode, 
                    customerType
                );
                
                console.info(
                    TransientCreditcardDataService.LOG_PREFIX.concat(
                        "Eligibility Decision is retrieved from the DCN API."
                    ),
                    this.correlationId
                );
                
                const eligibilityDecision = decisionApiResponse?.result?.AllowInstallmentLending?.isEligible ?? false;
                return eligibilityDecision;
            }
        } catch (e) {
            console.error(
                TransientCreditcardDataService.LOG_PREFIX.concat(
                    "Error while fetching DIL eligibility decision."
                ),
                e,
                this.correlationId
            );
        }
        
        return false;
    }
    
    // CHANGE 4: Update retrieveCardDetails to get DIL eligibility
    private async retrieveCardDetails(cardNumber: string): Promise<void> {
        try {
            // ... existing code ...
            
            // After credit card details are retrieved, get DIL eligibility
            if (this.creditCardDetailResponse) {
                this.dilEligibilityDecision = await this.getDilEligibilityDecision(
                    cardNumber, 
                    this.creditCardDetailResponse
                );
            } else {
                this.dilEligibilityDecision = false;
            }
            
            // ... rest of existing code ...
        } catch (error) {
            console.error("Unexpected error in retrieveCardDetails", error);
            throw error;
        }
    }
    
    // CHANGE 5: Update formatAndSaveAccountDetail to use dilEligibilityDecision 
    private async formatAndSaveAccountDetail(
        cardNumber: string,
        creditcardDetailResponse?: CreditCardAccountDetailResponse,
        customerDetailResponse?: CustomerDetailsResponse,
        transientCreditCardAccountDetail?: AccountDetail,
        availableCredit?: number,
        rewardTypeResponse?: GetRewardTypeResponse
    ): Promise<AccountDetails> {
        // ... existing code ...
        
        try {
            if (creditcardDetailResponse && customerDetailResponse) {
                if (transientCreditCardAccountDetail) {
                    // Update existing account detail
                    transientCreditCardAccountDetail.allowInstallmentLending = this.dilEligibilityDecision;
                    transientCreditCardAccountDetails = {
                        accountDetail: transientCreditCardAccountDetail
                    };
                } else {
                    // Create new account detail
                    transientCreditCardAccountDetail =
                        CreditCardAccountDetailMapper.mapRetailCreditCardAccountDetail(
                            cardNumber,
                            creditcardDetailResponse,
                            customerDetailResponse,
                            this.correlationId,
                            this.matchedBin,
                            availableCredit,
                            rewardTypeResponse,
                            this.dilEligibilityDecision  // Pass DIL eligibility here
                        );
                    
                    // ... rest of existing code ...
                }
            }
            // ... rest of existing code ...
        } catch (e) {
            // ... existing error handling ...
        }
        
        return transientCreditCardAccountDetails;
    }
}

// CHANGE 6: Update CreditCardAccountDetailMapper.mapRetailCreditCardAccountDetail
// In CreditCardAccountDetailMapper.ts:
public static mapRetailCreditCardAccountDetail(
    cardNumber: string,
    creditcardDetailResponse: CreditCardAccountDetailResponse,
    customerDetailResponse: CustomerDetailsResponse,
    correlationId: string,
    bin: Bin,
    availableCredit?: number,
    rewardTypeResponse?: GetRewardTypeResponse,
    dilEligibility?: boolean // Add this parameter
): AccountDetail {
    // ... existing code ...
    
    const accountDetail: AccountDetail = {
        // ... existing properties ...
        
        // Replace hardcoded true with dynamic value
        allowInstallmentLending: dilEligibility !== undefined ? dilEligibility : false,
    };
    
    // ... existing code ...
    
    return accountDetail;
}
