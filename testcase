import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// Mock CrossAccountAPICache
jest.mock("../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    value: jest.fn().mockResolvedValue({
      apiGatewayId: 'mock-api-gateway-id',
      apiKey: 'mock-api-key'
    })
  }))
}));

// Mock fetch
global.fetch = jest.fn();

// Mock performance API
global.performance = {
  ...global.performance,
  now: jest.fn().mockReturnValue(1000)
};

// Mock environment variables
process.env = {
  ...process.env,
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Mock logger functions
jest.mock("../../common/utils/logger", () => ({
  debug: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ServerError } from '../../util/serverError';
import { ClientError } from '../../util/clientError';
import { ApiConstants } from '../../util/constants';
import { ErrorCodes } from '../../util/errorCodes';
import { debug, error, info, trace, logBackendServiceError, logBackendServiceRequest, logBackendServiceResponse } from "../../common/utils/logger";

describe('EligibilityDecisionService', () => {
  // Test constants
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should create service instance correctly', () => {
    // Basic test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
    
    // Verify CrossAccountAPICache was initialized
    expect(CrossAccountAPICache).toHaveBeenCalledWith(
      'us-east-1',
      'us-east-1',
      'mock-role-arn',
      'mock-api-key-param',
      'mock-api-gateway-id',
      expect.any(Number) // Cache time to live
    );
  });

  test('should successfully call getDilEligibilityDecision and return eligible response', async () => {
    // Mock successful API response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true,
            reason: 'QUALIFYING_PRODUCT'
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(true);
    expect(result.result.AllowInstallmentLending.reason).toBe('QUALIFYING_PRODUCT');
    
    // Verify fetch was called with correct parameters
    expect(fetch).toHaveBeenCalledWith(
      expect.stringContaining(ApiConstants.BACKEND_API_ENDPOINTS.DCN_GET_EVALUATION),
      expect.objectContaining({
        method: 'POST',
        headers: expect.objectContaining({
          'Content-Type': 'application/json',
          'x-apigw-api-id': 'mock-api-gateway-id',
          'x-api-key': 'mock-api-key',
          'x-request-id': mockCorrelationId,
          'x-tapi-interaction-id': mockCorrelationId
        }),
        body: expect.stringContaining(mockLob)
      })
    );
    
    // Verify logging
    expect(logBackendServiceRequest).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
    expect(info).toHaveBeenCalled();
    expect(trace).toHaveBeenCalled();
  });

  test('should successfully call getDilEligibilityDecision and return not eligible response', async () => {
    // Mock successful API response with not eligible result
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: false,
            reason: 'NON_QUALIFYING_PRODUCT'
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(false);
    expect(result.result.AllowInstallmentLending.reason).toBe('NON_QUALIFYING_PRODUCT');
  });

  test('should handle non-200 response from API', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST',
        errorMessage: 'Invalid request parameters'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow(ServerError);
    
    // Verify error logging
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
  });

  test('should retry on ClientError and succeed on second attempt', async () => {
    // First attempt fails with a ClientError
    (fetch as jest.Mock).mockRejectedValueOnce(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Second attempt succeeds
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(true);
    
    // Verify fetch was called twice
    expect(fetch).toHaveBeenCalledTimes(2);
    
    // Verify logging includes retry information
    expect(debug).toHaveBeenCalledWith(
      expect.stringContaining('retry count: 0'),
      mockCorrelationId
    );
    expect(logBackendServiceError).toHaveBeenCalled();
  });

  test('should fail after max retries on ClientError', async () => {
    // All attempts fail with ClientError
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 3', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow(ServerError);
    
    // Verify fetch was called maximum times
    expect(fetch).toHaveBeenCalledTimes(2);
    
    // Verify logging includes max retry information
    expect(error).toHaveBeenCalledWith(
      expect.stringContaining('service failed after max retries: 2'),
      expect.any(Object),
      mockCorrelationId
    );
  });

  test('should immediately throw on ServerError without retry', async () => {
    // Attempt fails with ServerError
    (fetch as jest.Mock).mockRejectedValueOnce(new ServerError('Server error', 'SERVER_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow(ServerError);
    
    // Verify fetch was called only once (no retry)
    expect(fetch).toHaveBeenCalledTimes(1);
    
    // Verify error was logged
    expect(logBackendServiceError).toHaveBeenCalled();
  });

  test('should throw ServerError when CrossAccountAPICache fails', async () => {
    // Mock CrossAccountAPICache failure
    jest.resetModules();
    jest.mock("../../common/cross_account/cached_api_information", () => ({
      CrossAccountAPICache: jest.fn().mockImplementation(() => {
        throw new Error('Failed to initialize CrossAccountAPICache');
      })
    }));
    
    // Import the service again after changing the mock
    const { EligibilityDecisionService } = require('../../service/dcn/eligibilityDecisionService');
    
    // Expect error when creating service
    expect(() => new EligibilityDecisionService(mockCorrelationId)).toThrow(ServerError);
    
    // Verify error was logged
    expect(error).toHaveBeenCalled();
  });

  test('should use correct request payload and decision name', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify request payload contains correct decision name and context
    expect(fetch).toHaveBeenCalledWith(
      expect.any(String),
      expect.objectContaining({
        body: expect.stringContaining(ApiConstants.DECISION_NAME_INSTALLMENT_LENDING)
      })
    );
    
    // Extract and parse the request payload
    const fetchCall = (fetch as jest.Mock).mock.calls[0];
    const requestInfo = fetchCall[1];
    const payload = JSON.parse(requestInfo.body);
    
    // Verify payload structure
    expect(payload).toEqual({
      decisionName: ApiConstants.DECISION_NAME_INSTALLMENT_LENDING,
      context: {
        CPC: mockClientProductCode,
        LOB: mockLob,
        CustType: mockCustomerType
      }
    });
  });

  test('should include all required headers in the API request', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify all required headers were included in request
    expect(fetch).toHaveBeenCalledWith(
      expect.any(String),
      expect.objectContaining({
        headers: expect.objectContaining({
          'Content-Type': 'application/json',
          'x-apigw-api-id': 'mock-api-gateway-id',
          'x-api-key': 'mock-api-key',
          'x-request-id': mockCorrelationId,
          'x-tapi-interaction-id': mockCorrelationId,
          'x-app-cat-id': ApiConstants.APP_CAT_ID,
          'x-client-id': ApiConstants.APP_CAT_ID,
          'x-fapi-financial-id': ApiConstants.API_FINANCIAL_ID
        })
      })
    );
  });

  test('should handle empty or null inputs appropriately', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: false
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method with empty/null inputs
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision('', null, undefined);
    
    // Extract and parse the request payload
    const fetchCall = (fetch as jest.Mock).mock.calls[0];
    const requestInfo = fetchCall[1];
    const payload = JSON.parse(requestInfo.body);
    
    // Verify payload contains empty/null values as expected
    expect(payload.context).toEqual({
      CPC: null,
      LOB: '',
      CustType: undefined
    });
  });
});
