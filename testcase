import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

let creditcardUtilityService: CreditcardUtilityService;
const mockBinData = [{ binStart: "400000", binEnd: "499999" }];
let mockGetValue = jest.fn().mockResolvedValue({
  value: mockBinData,
});

// Mock logger
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Mock auto_local_cache
jest.mock("../../../../common/cache/auto_local_cache", () => ({
  __esModule: true,
  AutoLocalCache: jest.fn().mockImplementation(() => ({
    get_value: () => mockGetValue(),
  })),
  AutoCacheResult: jest.fn().mockImplementation((value, ttl) => ({
    value,
    ttl,
  })),
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    getValue: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id",
    }),
  })),
}));

describe("CreditcardUtilityService Tests", () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Reset mockGetValue to success case
    mockGetValue = jest.fn().mockResolvedValue({
      value: mockBinData,
    });

    // Set up environment variables
    process.env.crossRegion = "us-east-1";
    process.env.REGION = "us-east-1";
    process.env.crossAccountRoleForCCU = "test-role";
    process.env.ssmParamCcuApiKey = "test-api-key";
    process.env.ssmParamCcuGatewayId = "test-gateway-id";
    process.env.getBinRangesUrl = "https://api.test.com/bin-ranges";

    // Create new instance
    creditcardUtilityService = new CreditcardUtilityService("correlationId");
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Clear environment variables
    delete process.env.crossRegion;
    delete process.env.REGION;
    delete process.env.crossAccountRoleForCCU;
    delete process.env.ssmParamCcuApiKey;
    delete process.env.ssmParamCcuGatewayId;
    delete process.env.getBinRangesUrl;
  });

  test("getBinRangesCached: returns the cached value", async () => {
    const result = await creditcardUtilityService.getBinRangesCached();
    expect(result).toEqual(mockBinData);
  });

  test("getBinRanges: successfully fetches bin ranges from API", async () => {
    const mockResponse = {
      binList: {
        bin: mockBinData
      }
    };

    global.fetch = jest.fn(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve(mockResponse),
      })
    ) as jest.Mock;

    const result = await creditcardUtilityService.getBinRangesCached();
    expect(result).toEqual(mockBinData);
  });

  test("getBinRanges: throws error when API returns non-200 status", async () => {
    mockGetValue = jest.fn().mockRejectedValue(new Error("API Error"));

    global.fetch = jest.fn(() =>
      Promise.resolve({
        status: 500,
        statusText: "Internal Server Error",
      })
    ) as jest.Mock;

    creditcardUtilityService = new CreditcardUtilityService("correlationId");
    await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
  });

  test("getBinRanges: throws error when API call fails", async () => {
    mockGetValue = jest.fn().mockRejectedValue(new Error("Network Error"));

    global.fetch = jest.fn(() => 
      Promise.reject(new Error("Network error"))
    ) as jest.Mock;

    creditcardUtilityService = new CreditcardUtilityService("correlationId");
    await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
  });
});
