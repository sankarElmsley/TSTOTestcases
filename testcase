import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

import { TransientCreditcardDataService } from "../src/service/TransientCreditcardDataService";
import { CdbContextService } from "../src/service/cdbContext/cdbContextService";
import { CreditcardUtilityService } from "../src/service/ceu/creditcardUtilityService";
import { ClientError } from "../src/util/clientError";
import { ServerError } from "../src/util/serverError";
import ErrorCodes from "../src/util/errorCodes";
import { CrossAccountAPICache } from "../common/cross_account/cached_api_information";

let transientCreditcardService: TransientCreditcardDataService;
const mockEcifId = "test-ecif-123";
const mockOcifId = "test-ocif-123";
const mockSessionId = "test-session-123";
const mockAccountIndex = 0;
const mockCorrelationId = "test-correlation-id";

// Mock AWS SDK
jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

// Mock the common/aws/sts module
jest.mock("../../../../common/aws/sts", () => ({
  AssumeRole: jest.fn().mockResolvedValue({
    accessKeyId: "mock-access-key",
    secretAccessKey: "mock-secret-key",
    sessionToken: "mock-session-token"
  })
}));

// Mock the common/aws/ssm module
jest.mock("../../../../common/aws/ssm", () => ({
  GetParamValue: jest.fn().mockResolvedValue("mock-param-value")
}));

// Mock response for successful case
const mockSuccessResponse = {
  data: {
    accountNumber: "4500000000000001",
    availableBalance: 5000,
    totalBalance: 1000,
    creditLimit: 6000,
    transactions: []
  }
};

// Mock session data response
const mockSessionData = {
  "mysummary/getMySummary": {
    accounts: [
      {
        accountCategory: "CREDIT_CARD_ACCOUNTS",
        accountNumber: "4500000000000001",
        accountType: "Credit Card"
      },
      {
        accountCategory: "CHECKING_ACCOUNTS",
        accountNumber: "1234567890",
        accountType: "Checking"
      }
    ]
  }
};

// Mock bin ranges response
const mockBinRanges = [
  {
    lowBIN: "450000",
    highBIN: "450099",
    LOB: "R"
  }
];

// Mock all required services
jest.mock("../src/service/cdbContext/cdbContextService");
jest.mock("../src/service/ceu/creditcardUtilityService");
jest.mock("../src/service/ccaev/creditCardAccountEntryViewService");
jest.mock("../src/service/creditCardDetailSessionDataService");

// Mock logger functions
jest.mock("../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn()
}));

describe("TransientCreditcardDataService", () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Set up environment variables
    process.env = {
      AWS_REGION: "us-east-1",
      AWS_SDK_LOAD_CONFIG: "1",
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRole: "test-role",
      ssmParamApiKey: "test-api-key",
      ssmParamGatewayId: "test-gateway-id",
      getCardDetailsUrl: "https://test-api.bmo.com/v1/card-details"
    };

    // Mock the static apiInfoCache
    Object.defineProperty(TransientCreditcardDataService, 'apiInfoCache', {
      value: {
        value: jest.fn().mockResolvedValue({
          apiKey: "mock-api-key",
          apiGatewayId: "mock-gateway-id"
        })
      },
      writable: true
    });

    // Create new instance
    transientCreditcardService = new TransientCreditcardDataService(
      mockEcifId,
      mockOcifId,
      mockSessionId,
      mockAccountIndex,
      mockCorrelationId
    );

    // Mock CdbContextService
    (CdbContextService as jest.Mock).mockImplementation(() => ({
      getSessionData: jest.fn().mockResolvedValue({ data: mockSessionData })
    }));

    // Mock CreditcardUtilityService
    (CreditcardUtilityService as jest.Mock).mockImplementation(() => ({
      getBinRangesCached: jest.fn().mockResolvedValue(mockBinRanges)
    }));

    // Mock fetch
    global.fetch = jest.fn(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve(mockSuccessResponse)
      })
    ) as jest.Mock;
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Clean up environment variables
    process.env = {};
    // Reset the static apiInfoCache
    Object.defineProperty(TransientCreditcardDataService, 'apiInfoCache', {
      value: null,
      writable: true
    });
  });

  describe("getCreditcardData", () => {
    test("should fetch credit card data successfully", async () => {
      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.data).toBeDefined();
      expect(result.data.accountNumber).toBe(mockSuccessResponse.data.accountNumber);
      expect(global.fetch).toHaveBeenCalled();
    });

    test("should handle ClientError appropriately", async () => {
      (CdbContextService as jest.Mock).mockImplementation(() => ({
        getSessionData: jest.fn().mockRejectedValue(
          new ClientError(
            ErrorCodes.SESSION_DATA_MISSING_MYSUMMARY_AND_SIGNIN_VERIFICATION.errorMessage,
            ErrorCodes.SESSION_DATA_MISSING_MYSUMMARY_AND_SIGNIN_VERIFICATION.errorCode
          )
        )
      }));

      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.status).toBe("Failure");
      expect(result.errorCode).toBe(
        ErrorCodes.SESSION_DATA_MISSING_MYSUMMARY_AND_SIGNIN_VERIFICATION.errorCode
      );
    });

    test("should handle ServerError appropriately", async () => {
      (CdbContextService as jest.Mock).mockImplementation(() => ({
        getSessionData: jest.fn().mockRejectedValue(
          new ServerError("Server Error", "SERVER_ERROR")
        )
      }));

      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.status).toBe("Failure");
      expect(result.errorCode).toBe("SERVER_ERROR");
    });

    test("should handle API non-200 response", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 500,
          statusText: "Internal Server Error"
        })
      ) as jest.Mock;

      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.status).toBe("Failure");
      expect(result.statusCode).toBe(500);
    });

    test("should handle apiInfoCache value() failure", async () => {
      Object.defineProperty(TransientCreditcardDataService, 'apiInfoCache', {
        value: {
          value: jest.fn().mockRejectedValue(new Error("Failed to get API info"))
        },
        writable: true
      });

      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.status).toBe("Failure");
      expect(result.statusCode).toBe(500);
    });

    test("should handle API network error", async () => {
      global.fetch = jest.fn(() => 
        Promise.reject(new Error("Network error"))
      ) as jest.Mock;

      const result = await transientCreditcardService.getCreditcardData();
      
      expect(result).toBeDefined();
      expect(result.status).toBe("Failure");
      expect(result.statusCode).toBe(500);
    });
  });

  describe("filterCreditCardAccounts", () => {
    test("should filter credit card accounts correctly", async () => {
      const sessionData = {
        "mysummary/getMySummary": {
          accounts: [
            {
              accountCategory: "CREDIT_CARD_ACCOUNTS",
              accountNumber: "4500000000000001"
            },
            {
              accountCategory: "CHECKING_ACCOUNTS",
              accountNumber: "1234567890"
            }
          ]
        }
      };

      const result = (transientCreditcardService as any).filterCreditCardAccounts(sessionData);
      
      expect(result).toHaveLength(1);
      expect(result[0].accountCategory).toBe("CREDIT_CARD_ACCOUNTS");
      expect(result[0].accountNumber).toBe("4500000000000001");
    });

    test("should throw error when no session summary data available", async () => {
      const sessionData = {};

      expect(() => {
        (transientCreditcardService as any).filterCreditCardAccounts(sessionData);
      }).toThrow(ClientError);
    });
  });

  describe("getCardNumber", () => {
    test("should return correct card number for valid index", async () => {
      const accounts = [
        {
          accountCategory: "CREDIT_CARD_ACCOUNTS",
          accountNumber: "4500000000000001"
        }
      ];

      const result = (transientCreditcardService as any).getCardNumber(accounts, 0);
      
      expect(result).toBe("4500000000000001");
    });

    test("should throw error when account index is out of range", async () => {
      const accounts = [
        {
          accountCategory: "CREDIT_CARD_ACCOUNTS",
          accountNumber: "4500000000000001"
        }
      ];

      expect(() => {
        (transientCreditcardService as any).getCardNumber(accounts, 1);
      }).toThrow(ClientError);
    });
  });

  describe("getCreditCardLOB", () => {
    test("should return correct LOB for matching bin range", async () => {
      const cardNumber = "4500000000000001";
      (transientCreditcardService as any).binRanges = mockBinRanges;

      const result = (transientCreditcardService as any).getCreditCardLOB(cardNumber);
      
      expect(result).toBe("R");
    });

    test("should return empty string for non-matching bin range", async () => {
      const cardNumber = "5500000000000001";
      (transientCreditcardService as any).binRanges = mockBinRanges;

      const result = (transientCreditcardService as any).getCreditCardLOB(cardNumber);
      
      expect(result).toBe("");
    });
  });
});
