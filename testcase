import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardRewardService } from "///src/service/ccr/creditCardRewardService";
import { ServerError } from "../../util/serverError";

// Mock logger
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn()
}));

describe("CreditCardRewardService Tests", () => {
  let service: CreditCardRewardService;
  const mockSessionId = "test-session-id";
  const mockEcifId = "test-ecif-id";
  const mockCorrelationId = "test-correlation-id";
  
  beforeEach(() => {
    // Set required environment variables
    process.env.crossRegion = "us-east-1";
    process.env.REGION = "us-east-1";
    process.env.crossAccountRoleForCdbContext = "test-role";
    process.env.ssmParamCdbContextApiKey = "test-api-key";
    process.env.ssmParamCdbContextGatewayId = "test-gateway-id";
    
    // Clear all mocks
    jest.clearAllMocks();
  });

  afterEach(() => {
    // Clean up environment variables
    delete process.env.crossRegion;
    delete process.env.REGION;
    delete process.env.crossAccountRoleForCdbContext;
    delete process.env.ssmParamCdbContextApiKey;
    delete process.env.ssmParamCdbContextGatewayId;
  });

  test("should get reward details", async () => {
    // Create service instance
    service = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );

    const result = await service.getRewardDetails();
    expect(result).toBe("");
  });

  test("should log trace messages in getRewardDetails", async () => {
    const mockTrace = require("../../../../common/utils/logger").trace;
    
    // Create service instance
    service = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );

    await service.getRewardDetails();

    expect(mockTrace).toHaveBeenCalledWith(
      "CreditCardRewardService - In getRewardDetails.....",
      mockCorrelationId
    );
    expect(mockTrace).toHaveBeenCalledWith(
      "CreditCardRewardService - Out getRewardDetails.",
      mockCorrelationId
    );
  });

  test("should initialize service with empty env vars", () => {
    process.env = {};
    
    service = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
    
    expect(service).toBeDefined();
  });

  test("should construct context ID correctly", () => {
    service = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
    
    // Access private property for testing
    const contextId = (service as any).contextId;
    expect(contextId).toBe(`${mockSessionId}.${mockEcifId}`);
  });

  test("should handle CrossAccountAPICache initialization error", () => {
    const mockError = require("../../../../common/utils/logger").error;
    
    // Mock CrossAccountAPICache to throw error
    require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache.mockImplementation(() => {
      throw new Error("Cache initialization failed");
    });

    expect(() => {
      new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );
    }).toThrow(ServerError);

    expect(mockError).toHaveBeenCalledWith(
      "CreditCardRewardService - Unexpected error while retrieving the SSM params for making backend API (CCR) call",
      expect.any(Error),
      mockCorrelationId
    );
  });

  test("should reuse existing API cache", () => {
    const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
    
    // Create first instance
    const service1 = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );

    // Reset mock to track new calls
    CrossAccountAPICache.mockClear();

    // Create second instance
    const service2 = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );

    // CrossAccountAPICache should not be called again
    expect(CrossAccountAPICache).not.toHaveBeenCalled();
  });
});
