import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

/**
 * @jest-environment node
 */

// AWS SDK Mock
jest.mock('aws-sdk', () => ({
    STS: jest.fn(() => ({
        assumeRole: jest.fn().mockReturnValue({
            promise: jest.fn().mockResolvedValue({
                Credentials: {
                    AccessKeyId: 'mock-access-key',
                    SecretAccessKey: 'mock-secret',
                    SessionToken: 'mock-token'
                }
            })
        })
    })),
    SSM: jest.fn(() => ({
        getParameter: jest.fn().mockReturnValue({
            promise: jest.fn().mockResolvedValue({
                Parameter: { Value: 'mock-param-value' }
            })
        })
    }))
}));

// Logger Mock
jest.mock('../common/utils/logger', () => ({
    debug: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    trace: jest.fn(),
    debugWithSanitize: jest.fn(),
    infoWithSanitize: jest.fn()
}));

// Service Mocks
jest.mock('./cdbContext/cdbContextService', () => ({
    CdbContextService: jest.fn().mockImplementation(() => ({
        getSessionData: jest.fn().mockResolvedValue({
            data: {
                'mysummary/getMySummary': {
                    accounts: [
                        {
                            accountCategory: 'CREDIT_CARD_ACCOUNTS',
                            accountNumber: '4500123456789012'
                        }
                    ]
                }
            }
        })
    }))
}));

jest.mock('./ceu/creditcardUtilityService', () => ({
    CreditcardUtilityService: jest.fn().mockImplementation(() => ({
        getBinRangesCached: jest.fn().mockResolvedValue([
            {
                lowBIN: '450010',
                highBIN: '450020',
                LOB: 'R'
            }
        ])
    }))
}));

import { TransientCreditcardDataService } from './TransientCreditcardDataService';

describe('TransientCreditcardDataService', () => {
    let service: TransientCreditcardDataService;
    const testData = {
        ecifId: 'test-ecif-123',
        ocifId: 'test-ocif-456',
        sessionId: 'test-session-789',
        accountIndex: 0,
        correlationId: 'test-correlation-101112'
    };

    beforeEach(() => {
        // Reset mocks
        jest.clearAllMocks();

        // Setup environment
        process.env = {
            AWS_REGION: 'us-east-1',
            CROSS_ACCOUNT_ROLE_ARN: 'arn:aws:iam::123456789012:role/test-role',
            SSM_PARAM_API_KEY: '/test/api-key',
            SSM_PARAM_GATEWAY_ID: '/test/gateway-id'
        };

        // Create service instance
        service = new TransientCreditcardDataService(
            testData.ecifId,
            testData.ocifId,
            testData.sessionId,
            testData.accountIndex,
            testData.correlationId
        );
    });

    afterEach(() => {
        process.env = {};
    });

    describe('Basic Tests', () => {
        it('should create service instance', () => {
            expect(service).toBeDefined();
            expect(service).toBeInstanceOf(TransientCreditcardDataService);
        });

        it('should get credit card data successfully', async () => {
            const result = await service.getCreditcardData();
            expect(result).toBeDefined();
            expect(result).toHaveProperty('correlationId', testData.correlationId);
        });
    });

    describe('Error Handling', () => {
        it('should handle missing session data', async () => {
            // Mock CdbContextService to return empty data
            require('./cdbContext/cdbContextService').CdbContextService
                .mockImplementationOnce(() => ({
                    getSessionData: jest.fn().mockResolvedValue({ data: {} })
                }));

            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });

        it('should handle invalid account index', async () => {
            const invalidService = new TransientCreditcardDataService(
                testData.ecifId,
                testData.ocifId,
                testData.sessionId,
                999, // Invalid index
                testData.correlationId
            );

            const result = await invalidService.getCreditcardData();
            expect(result.status).toBe('Failure');
        });
    });

    describe('AWS Integration', () => {
        it('should handle AWS service calls', async () => {
            const AWS = require('aws-sdk');
            const sts = new AWS.STS();
            const ssm = new AWS.SSM();

            // Verify STS call
            await sts.assumeRole({
                RoleArn: process.env.CROSS_ACCOUNT_ROLE_ARN,
                RoleSessionName: 'test-session'
            }).promise();
            expect(sts.assumeRole).toHaveBeenCalled();

            // Verify SSM call
            await ssm.getParameter({
                Name: process.env.SSM_PARAM_API_KEY,
                WithDecryption: true
            }).promise();
            expect(ssm.getParameter).toHaveBeenCalled();
        });
    });
});
