import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// File: EligibilityDecisionService.test.ts

// Mock CrossAccountAPICache
jest.mock("../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    value: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id"
    })
  }))
}));

// Mock fetch
global.fetch = jest.fn();
global.performance = {
  ...global.performance,
  now: jest.fn().mockReturnValue(1000)
};

// Mock environment variables
process.env = {
  ...process.env,
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Mock logger functions
jest.mock("../../common/utils/logger", () => ({
  debug: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ServerError } from '../../util/serverError';
import { ClientError } from '../../util/clientError';
import { ApiConstants } from '../../util/constants';
import { ErrorCodes } from '../../util/errorCodes';
import { trace, info, debug, error, logBackendServiceRequest, logBackendServiceResponse, logBackendServiceError } from '../../common/utils/logger';

describe('EligibilityDecisionService', () => {
  // Test setup
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should create service instance', () => {
    // Basic test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
  });

  test('should handle successful eligibility decision API call', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE',
        reason: 'QUALIFYING_PRODUCT'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify the result
    expect(result).toBeDefined();
    expect(result.eligibility).toBe('ELIGIBLE');
  });

  test('should handle non-200 response from API', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Simple try/catch to verify an error is thrown
    let errorThrown = false;
    try {
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    } catch (error) {
      errorThrown = true;
    }
    
    // Verify an error was thrown
    expect(errorThrown).toBe(true);
  });

  test('should retry on ClientError and succeed on second attempt', async () => {
    // First attempt fails with a ClientError
    (fetch as jest.Mock).mockRejectedValueOnce(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Second attempt succeeds
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Just verify we got a result
    expect(result).toBeDefined();
  });
  
  test('should fail after max retries with ClientError', async () => {
    // Mock ClientError for all attempts 
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Simple try/catch to verify an error is thrown
    let errorThrown = false;
    let caughtError;
    try {
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    } catch (error) {
      errorThrown = true;
      caughtError = error;
    }
    
    // Verify an error was thrown
    expect(errorThrown).toBe(true);
    expect(caughtError instanceof ServerError).toBe(true);
  });
  
  test('should throw original error for non-ClientError exceptions', async () => {
    // Mock a non-ClientError exception
    const originalError = new Error('Some unexpected error');
    (fetch as jest.Mock).mockRejectedValueOnce(originalError);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Simple try/catch to verify the original error is thrown
    let caughtError;
    try {
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    } catch (error) {
      caughtError = error;
    }
    
    // Verify the original error was thrown
    expect(caughtError).toBe(originalError);
  });
  
  test('should use trace logging for entry and exit points', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify trace was called with entry and exit points
    expect(trace).toHaveBeenCalledWith(
      expect.stringContaining('In getDilEligibilityDecision'),
      mockCorrelationId
    );
    
    expect(trace).toHaveBeenCalledWith(
      expect.stringContaining('Out getDilEligibilityDecision'),
      mockCorrelationId
    );
  });
  
  test('should log backend service request and response', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify backend service logging
    expect(logBackendServiceRequest).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
  });
  
  test('should log error on API failure', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call method and catch error
    try {
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    } catch (e) {
      // Expected error
    }
    
    // Verify error was logged
    expect(error).toHaveBeenCalled();
  });
  
  test('should log error on retry failure', async () => {
    // Mock ClientError for all attempts 
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call method and catch error
    try {
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    } catch (e) {
      // Expected error
    }
    
    // Verify error logging
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceError).toHaveBeenCalled();
  });
  
  test('should send correct request payload', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify fetch was called with correct payload
    expect(fetch).toHaveBeenCalledTimes(1);
    const [_, requestInfo] = (fetch as jest.Mock).mock.calls[0];
    
    // Parse the request body and check its structure
    const requestBody = JSON.parse(requestInfo.body);
    expect(requestBody).toHaveProperty('decisionName', ApiConstants.DECISION_NAME_INSTALLMENT_LENDING);
    expect(requestBody).toHaveProperty('context');
    expect(requestBody.context).toHaveProperty('LOB', mockLob);
    expect(requestBody.context).toHaveProperty('CPC', mockClientProductCode);
    expect(requestBody.context).toHaveProperty('CustType', mockCustomerType);
  });
});
