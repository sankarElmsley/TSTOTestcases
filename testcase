import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';



import { PutCommand, QueryCommand } from "@aws-sdk/lib-dynamodb";
import { marshall, unmarshall } from "@aws-sdk/util-dynamodb";
import { CreditCardDetailSessionDataService } from "../../../src/service/ctccd/creditCardDetailSessionDataService";
import { CardDetailSessionData } from "../../../src/model/cardDetail/cardDetailSessionData";
import { ErrorCodes } from "../../../src/util/errorCodes";
import { DynamoDBAPIClient } from "../../../src/service/util/dynamoDbClient";
import { ServerError } from "../../../src/util/serverError";

// Mock logger functions
const mockError = jest.fn();
jest.mock("../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn().mockImplementation((...args) => mockError(...args)),
  info: jest.fn(),
  trace: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

// Mock AWS SDK utilities
jest.mock("@aws-sdk/util-dynamodb", () => ({
  marshall: jest.fn().mockImplementation(input => input),
  unmarshall: jest.fn().mockImplementation(input => input),
}));

// Mock AWS DynamoDB commands
const mockQueryCommand = jest.fn();
jest.mock("@aws-sdk/lib-dynamodb", () => ({
  PutCommand: jest.fn().mockImplementation(params => ({ input: params })),
  QueryCommand: jest.fn().mockImplementation(params => {
    mockQueryCommand(params);
    return { input: params };
  }),
}));

// Mock DynamoDBAPIClient
const mockSendFunction = jest.fn();
jest.mock("../../../src/service/util/dynamoDbClient", () => ({
  DynamoDBAPIClient: {
    getInstance: jest.fn().mockImplementation(() => ({
      dbDocumentClient: { send: mockSendFunction },
    })),
  },
}));

describe("CreditCardDetailSessionDataService", () => {
  let service: CreditCardDetailSessionDataService;
  const mockCorrelationId = "test-correlation-id";
  const mockEcifId = "test-ecif";
  const mockSessionId = "test-session";
  const mockAccountIndex = 1;

  const mockCardDetails = {
    ecifId: mockEcifId,
    transientCreditCardId: "test-id",
    accountIndex: mockAccountIndex,
    sessionId: mockSessionId,
    accountDetail: {},
    ccarCustomerDetail: {},
    ccarCardDetail: {},
  };

  beforeEach(() => {
    jest.clearAllMocks();
    process.env.ccDetailDbTableName = "test-table";
    
    // Reset all mocks
    mockError.mockClear();
    mockQueryCommand.mockClear();
    mockSendFunction.mockClear();

    service = new CreditCardDetailSessionDataService(mockCorrelationId);
  });

  afterEach(() => {
    jest.clearAllMocks();
    process.env = {};
  });

  describe("fetchCardDetails", () => {
    it("should fetch card details successfully", async () => {
      // Setup successful response
      mockSendFunction.mockResolvedValueOnce({
        Items: [mockCardDetails],
      });

      const result = await service.fetchCardDetails(mockEcifId, mockSessionId, mockAccountIndex);

      expect(result).toBeDefined();
      expect(result).toEqual(mockCardDetails);
      expect(mockSendFunction).toHaveBeenCalled();
      expect(mockError).not.toHaveBeenCalled();
    });

    it("should handle DynamoDB query error", async () => {
      // Setup DynamoDB error
      mockSendFunction.mockRejectedValueOnce(new Error("DynamoDB error"));

      await expect(
        service.fetchCardDetails(mockEcifId, mockSessionId, mockAccountIndex)
      ).rejects.toThrow(new ServerError(
        ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage,
        ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorCode
      ));
      
      expect(mockError).toHaveBeenCalled();
    });

    it("should handle empty response", async () => {
      // Setup empty response
      mockSendFunction.mockResolvedValueOnce({
        Items: [],
      });

      const result = await service.fetchCardDetails(mockEcifId, mockSessionId, mockAccountIndex);

      expect(result).toBeUndefined();
      expect(mockError).not.toHaveBeenCalled();
    });

    it("should handle null response", async () => {
      // Setup null response
      mockSendFunction.mockResolvedValueOnce(null);

      await expect(
        service.fetchCardDetails(mockEcifId, mockSessionId, mockAccountIndex)
      ).rejects.toThrow(new ServerError(
        ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage,
        ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorCode
      ));
      
      expect(mockError).toHaveBeenCalled();
    });
  });
});
