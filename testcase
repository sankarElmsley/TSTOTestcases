import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.config;

import com.hierynomus.smbj.SMBClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import software.amazon.awssdk.services.s3.S3Client;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class AppConfigTest {

    @InjectMocks
    private AppConfig appConfig;

    private static final String TEST_ACCESS_KEY = "testAccessKey";
    private static final String TEST_SECRET_KEY = "testSecretKey";
    private static final String TEST_ENDPOINT = "http://localhost:4566";

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(appConfig, "accessKey", TEST_ACCESS_KEY);
        ReflectionTestUtils.setField(appConfig, "secretKey", TEST_SECRET_KEY);
        ReflectionTestUtils.setField(appConfig, "s3EndPoint", TEST_ENDPOINT);
    }

    @Test
    void s3Client_ShouldCreateValidClient() {
        // Act
        S3Client s3Client = appConfig.s3Client();

        // Assert
        assertNotNull(s3Client, "S3Client should not be null");
    }

    @Test
    void smbClient_ShouldCreateValidClient() {
        // Act
        SMBClient smbClient = appConfig.smbClient();

        // Assert
        assertNotNull(smbClient, "SMBClient should not be null");
        assertTrue(smbClient.getConfig().isEncryptData(), "SMB encryption should be enabled");
    }

    @Test
    void s3Client_WithInvalidCredentials_ShouldThrowException() {
        // Arrange
        ReflectionTestUtils.setField(appConfig, "accessKey", "");
        ReflectionTestUtils.setField(appConfig, "secretKey", "");

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> appConfig.s3Client(),
            "Should throw exception for invalid credentials");
    }

    @Test
    void s3Client_WithInvalidEndpoint_ShouldThrowException() {
        // Arrange
        ReflectionTestUtils.setField(appConfig, "s3EndPoint", "invalid-endpoint");

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> appConfig.s3Client(),
            "Should throw exception for invalid endpoint");
    }

    @Test
    void smbClient_ShouldHaveDefaultConfiguration() {
        // Act
        SMBClient smbClient = appConfig.smbClient();

        // Assert
        assertNotNull(smbClient.getConfig(), "SMB config should not be null");
        assertTrue(smbClient.getConfig().isSigningRequired(), "SMB signing should be required");
        assertNotNull(smbClient.getConfig().getDialects(), "SMB dialects should be configured");
    }
}



package com.ymca.prs0.tbp.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.test.util.ReflectionTestUtils;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class AsyncConfigTest {

    @InjectMocks
    private AsyncConfig asyncConfig;

    private static final int PROCESS_CORE_POOL_SIZE = 5;
    private static final int PROCESS_MAX_POOL_SIZE = 10;
    private static final int PROCESS_QUEUE_CAPACITY = 25;

    private static final int SMS_CORE_POOL_SIZE = 3;
    private static final int SMS_MAX_POOL_SIZE = 6;
    private static final int SMS_QUEUE_CAPACITY = 15;

    private static final int EMAIL_CORE_POOL_SIZE = 4;
    private static final int EMAIL_MAX_POOL_SIZE = 8;
    private static final int EMAIL_QUEUE_CAPACITY = 20;

    @BeforeEach
    void setUp() {
        // Set up test values for executor configurations
        ReflectionTestUtils.setField(asyncConfig, "processExecutorCorePoolSize", PROCESS_CORE_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorMaxPoolSize", PROCESS_MAX_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorQueueCapacity", PROCESS_QUEUE_CAPACITY);

        ReflectionTestUtils.setField(asyncConfig, "smsExecutorCorePoolSize", SMS_CORE_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "smsExecutorMaxPoolSize", SMS_MAX_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "smsExecutorQueueCapacity", SMS_QUEUE_CAPACITY);

        ReflectionTestUtils.setField(asyncConfig, "emailExecutorCorePoolSize", EMAIL_CORE_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "emailExecutorMaxPoolSize", EMAIL_MAX_POOL_SIZE);
        ReflectionTestUtils.setField(asyncConfig, "emailExecutorQueueCapacity", EMAIL_QUEUE_CAPACITY);
    }

    @Test
    void processBatchTaskExecutor_ShouldCreateWithCorrectConfiguration() {
        // Act
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) asyncConfig.processBatchTaskExecutor();

        // Assert
        assertNotNull(executor, "Executor should not be null");
        assertEquals(PROCESS_CORE_POOL_SIZE, executor.getCorePoolSize(), "Core pool size should match");
        assertEquals(PROCESS_MAX_POOL_SIZE, executor.getMaxPoolSize(), "Max pool size should match");
        assertEquals(PROCESS_QUEUE_CAPACITY, executor.getQueueCapacity(), "Queue capacity should match");
        assertFalse(executor.isWaitForTasksToCompleteOnShutdown(), "Should not wait for tasks on shutdown");
    }

    @Test
    void processSMSTaskExecutor_ShouldCreateWithCorrectConfiguration() {
        // Act
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) asyncConfig.processSMSTaskExecutor();

        // Assert
        assertNotNull(executor, "Executor should not be null");
        assertEquals(SMS_CORE_POOL_SIZE, executor.getCorePoolSize(), "Core pool size should match");
        assertEquals(SMS_MAX_POOL_SIZE, executor.getMaxPoolSize(), "Max pool size should match");
        assertEquals(SMS_QUEUE_CAPACITY, executor.getQueueCapacity(), "Queue capacity should match");
        assertFalse(executor.isWaitForTasksToCompleteOnShutdown(), "Should not wait for tasks on shutdown");
    }

    @Test
    void processEmailTaskExecutor_ShouldCreateWithCorrectConfiguration() {
        // Act
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) asyncConfig.processEmailTaskExecutor();

        // Assert
        assertNotNull(executor, "Executor should not be null");
        assertEquals(EMAIL_CORE_POOL_SIZE, executor.getCorePoolSize(), "Core pool size should match");
        assertEquals(EMAIL_MAX_POOL_SIZE, executor.getMaxPoolSize(), "Max pool size should match");
        assertEquals(EMAIL_QUEUE_CAPACITY, executor.getQueueCapacity(), "Queue capacity should match");
        assertFalse(executor.isWaitForTasksToCompleteOnShutdown(), "Should not wait for tasks on shutdown");
    }

    @Test
    void executors_ShouldBeInitialized() {
        // Act
        ThreadPoolTaskExecutor batchExecutor = (ThreadPoolTaskExecutor) asyncConfig.processBatchTaskExecutor();
        ThreadPoolTaskExecutor smsExecutor = (ThreadPoolTaskExecutor) asyncConfig.processSMSTaskExecutor();
        ThreadPoolTaskExecutor emailExecutor = (ThreadPoolTaskExecutor) asyncConfig.processEmailTaskExecutor();

        // Assert
        assertTrue(batchExecutor.isInitialized(), "Batch executor should be initialized");
        assertTrue(smsExecutor.isInitialized(), "SMS executor should be initialized");
        assertTrue(emailExecutor.isInitialized(), "Email executor should be initialized");
    }

    @Test
    void executors_WithZeroPoolSize_ShouldStillCreate() {
        // Arrange
        ReflectionTestUtils.setField(asyncConfig, "processExecutorCorePoolSize", 0);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorMaxPoolSize", 0);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorQueueCapacity", 0);

        // Act
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) asyncConfig.processBatchTaskExecutor();

        // Assert
        assertNotNull(executor, "Executor should be created even with zero pool size");
        assertEquals(0, executor.getCorePoolSize(), "Core pool size should be zero");
        assertEquals(0, executor.getMaxPoolSize(), "Max pool size should be zero");
        assertEquals(0, executor.getQueueCapacity(), "Queue capacity should be zero");
    }

    @Test
    void executors_WithNegativeValues_ShouldHandleGracefully() {
        // Arrange
        ReflectionTestUtils.setField(asyncConfig, "processExecutorCorePoolSize", -1);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorMaxPoolSize", -1);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorQueueCapacity", -1);

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> asyncConfig.processBatchTaskExecutor(),
            "Should throw exception for negative values");
    }

    @Test
    void executors_WithInvalidPoolSizeConfiguration_ShouldThrowException() {
        // Arrange
        ReflectionTestUtils.setField(asyncConfig, "processExecutorCorePoolSize", 10);
        ReflectionTestUtils.setField(asyncConfig, "processExecutorMaxPoolSize", 5);  // Max less than core

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> asyncConfig.processBatchTaskExecutor(),
            "Should throw exception when max pool size is less than core pool size");
    }
}
