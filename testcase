import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.service.impl;

import com.ymca.prs0.tbp.model.S3ObjectStatus;
import com.ymca.prs0.tbp.model.document.ProcessingEvent;
import com.ymca.prs0.tbp.repository.ProcessingEventRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProcessingEventServiceImplTest {

    @Mock
    private ProcessingEventRepository processingEventRepository;

    @InjectMocks
    private ProcessingEventServiceImpl processingEventService;

    private static final String FILE_KEY = "test-file-key";

    private ProcessingEvent createProcessingEvent(long endPos, int sequenceNum, S3ObjectStatus status) {
        ProcessingEvent event = new ProcessingEvent();
        event.setFileKey(FILE_KEY);
        event.setEndPos(endPos);
        event.setSequenceNum(sequenceNum);
        event.setStatus(status);
        return event;
    }

    @Test
    void saveProcessEvent_ShouldCallRepository() {
        // Arrange
        ProcessingEvent event = createProcessingEvent(100L, 1, S3ObjectStatus.SUCCESS);
        when(processingEventRepository.save(any(ProcessingEvent.class))).thenReturn(event);

        // Act
        processingEventService.saveProcessEvent(event);

        // Assert
        verify(processingEventRepository, times(1)).save(event);
        verifyNoMoreInteractions(processingEventRepository);
    }

    @Test
    void getSequencedProcessingEvents_ShouldReturnOrderedList() {
        // Arrange
        List<ProcessingEvent> events = Arrays.asList(
            createProcessingEvent(100L, 1, S3ObjectStatus.SUCCESS),
            createProcessingEvent(200L, 2, S3ObjectStatus.SUCCESS)
        );
        when(processingEventRepository.findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY)).thenReturn(events);

        // Act
        List<ProcessingEvent> result = processingEventService.getSequencedProcessingEvents(FILE_KEY);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals(1, result.get(0).getSequenceNum());
        assertEquals(2, result.get(1).getSequenceNum());
        verify(processingEventRepository).findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY);
    }

    @Test
    void getLastProcessingEvent_WithEvents_ShouldReturnEventWithHighestEndPos() {
        // Arrange
        ProcessingEvent event1 = createProcessingEvent(100L, 1, S3ObjectStatus.SUCCESS);
        ProcessingEvent event2 = createProcessingEvent(200L, 2, S3ObjectStatus.SUCCESS);
        List<ProcessingEvent> events = Arrays.asList(event1, event2);
        when(processingEventRepository.findAllByFileKey(FILE_KEY)).thenReturn(events);

        // Act
        ProcessingEvent result = processingEventService.getLastProcessingEvent(FILE_KEY);

        // Assert
        assertNotNull(result);
        assertEquals(200L, result.getEndPos());
        verify(processingEventRepository).findAllByFileKey(FILE_KEY);
    }

    @Test
    void getLastProcessingEvent_WithNoEvents_ShouldReturnNull() {
        // Arrange
        when(processingEventRepository.findAllByFileKey(FILE_KEY)).thenReturn(Collections.emptyList());

        // Act
        ProcessingEvent result = processingEventService.getLastProcessingEvent(FILE_KEY);

        // Assert
        assertNull(result);
        verify(processingEventRepository).findAllByFileKey(FILE_KEY);
    }

    @Test
    void deleteAll_ShouldCallRepository() {
        // Arrange
        doNothing().when(processingEventRepository).deleteByFileKey(FILE_KEY);

        // Act
        processingEventService.deleteAll(FILE_KEY);

        // Assert
        verify(processingEventRepository, times(1)).deleteByFileKey(FILE_KEY);
        verifyNoMoreInteractions(processingEventRepository);
    }

    @Test
    void isFailedChunksExist_WithFailedEvent_ShouldReturnTrue() {
        // Arrange
        List<ProcessingEvent> events = Arrays.asList(
            createProcessingEvent(100L, 1, S3ObjectStatus.SUCCESS),
            createProcessingEvent(200L, 2, S3ObjectStatus.FAILED)
        );
        when(processingEventRepository.findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY)).thenReturn(events);

        // Act
        boolean result = processingEventService.isFailedChunksExist(FILE_KEY);

        // Assert
        assertTrue(result);
        verify(processingEventRepository).findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY);
    }

    @Test
    void isFailedChunksExist_WithNoFailedEvents_ShouldReturnFalse() {
        // Arrange
        List<ProcessingEvent> events = Arrays.asList(
            createProcessingEvent(100L, 1, S3ObjectStatus.SUCCESS),
            createProcessingEvent(200L, 2, S3ObjectStatus.SUCCESS)
        );
        when(processingEventRepository.findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY)).thenReturn(events);

        // Act
        boolean result = processingEventService.isFailedChunksExist(FILE_KEY);

        // Assert
        assertFalse(result);
        verify(processingEventRepository).findAllByFileKeyOrderBySequenceNumAsc(FILE_KEY);
    }
}
