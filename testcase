import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';



import { CreditCardArrangementReportService } from '../../../src/service/ccar/creditCardArrangementReportService';
import { ErrorCodes } from '../../../src/util/errorCodes';

// Mock the logging functions
jest.mock('../../../src/util/logging', () => ({
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    debug: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../../common/cross account/cached_api_information', () => {
    return class MockCrossAccountAPICache {
        Value() {
            return Promise.resolve({
                apiKey: 'mock-api-key',
                apiGatewayId: 'mock-gateway-id'
            });
        }
    };
});

describe('CreditCardArrangementReportService', () => {
    let service: CreditCardArrangementReportService;
    const mockCorrelationId = 'test-correlation-id';
    const mockCardNumber = '1234567890123456';
    const mockTsysClientId = 'test-client-id';

    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        
        // Setup required environment variables
        process.env = {
            ...process.env,
            CrossRegion: 'test-region',
            REGION: 'test-region',
            crossAccountRoleForCCAR: 'test-role',
            ssmParamCcarApiKey: 'test-param-key',
            smParamCcarGatewayId: 'test-param-id',
            getCardDetailsUrl: 'http://test-url/',
            getCustomerDetailsUrl: 'http://test-url/'
        };

        // Mock fetch globally
        global.fetch = jest.fn();
        
        // Initialize service
        service = new CreditCardArrangementReportService(mockCorrelationId);
    });

    describe('getCreditCardDetail', () => {
        it('should fetch card details successfully when fetchAvailableBalanceAlone is false', async () => {
            // Mock successful API response
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve({
                    status: 'S',
                    data: { cardNumber: mockCardNumber }
                })
            });

            const result = await service.getCreditCardDetail(false, mockCardNumber, mockTsysClientId);
            
            expect(result).toEqual({
                status: 'S',
                data: { cardNumber: mockCardNumber }
            });
            expect(global.fetch).toHaveBeenCalledTimes(1);
        });

        it('should handle API error response', async () => {
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 500,
                statusText: 'Internal Server Error'
            });

            await expect(
                service.getCreditCardDetail(false, mockCardNumber, mockTsysClientId)
            ).rejects.toThrow(ErrorCodes.CC_DETAILS_API_INVALID_RESPONSE_STATUS.errorMessage);
        });
    });

    describe('fetchCustomerDetails', () => {
        it('should fetch customer details successfully', async () => {
            // Mock successful API response
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve({
                    status: 'S',
                    data: { customerId: 'test-customer' }
                })
            });

            const result = await service.fetchCustomerDetails(mockCardNumber, mockTsysClientId);
            
            expect(result).toEqual({
                status: 'S',
                data: { customerId: 'test-customer' }
            });
            expect(global.fetch).toHaveBeenCalledTimes(1);
        });
    });

    afterEach(() => {
        // Clean up
        jest.resetModules();
        process.env = {};
    });
});
