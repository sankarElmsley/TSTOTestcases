import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// Mock required dependencies first
jest.mock('../common/utils/logger', () => ({
  trace: jest.fn(),
  debug: jest.fn(),
  info: jest.fn(),
  error: jest.fn()
}));

jest.mock('../service/ctccd/creditCardDetailSessionDataService', () => ({
  CreditCardDetailSessionDataService: jest.fn(() => ({
    fetchSbDilEligibilityDecision: jest.fn(),
    saveSbDilEligibilityDecision: jest.fn()
  }))
}));

jest.mock('../service/ccar/creditCardArrangementReportService', () => ({
  CreditCardArrangementReportService: jest.fn(() => ({
    getCreditCardDetail: jest.fn()
  }))
}));

jest.mock('../service/cdbcontext/cdbContextService', () => ({
  CdbContextService: jest.fn(() => ({
    getSessionData: jest.fn()
  }))
}));

jest.mock('../service/dcn/eligibilityDecisionService', () => ({
  EligibilityDecisionService: jest.fn(() => ({
    getDilEligibilityDecision: jest.fn()
  }))
}));

jest.mock('../service/util/transientCreditCardDataHelper', () => ({
  TransientCreditCardDataHelper: {
    filterCreditCardAccounts: jest.fn(),
    getCardNumber: jest.fn()
  }
}));

jest.mock('../mapper/retailCreditCardAccountDetailResponseMappingHelper', () => ({
  RetailCreditCardAccountDetailResponseMappingHelper: {
    findCustomerInfo: jest.fn()
  }
}));

// Import the modules
import { SBDilTransientCreditCardDataService } from '../service/ctccd/SBDilTransientCreditCardDataService.new';
import { TransientCreditCardDataRequest } from '../model/ctccd/transientCreditCardDataRequest';
import { CreditCardDetailSessionDataService } from '../service/ctccd/creditCardDetailSessionDataService';
import { CreditCardArrangementReportService } from '../service/ccar/creditCardArrangementReportService';
import { CdbContextService } from '../service/cdbcontext/cdbContextService';
import { EligibilityDecisionService } from '../service/dcn/eligibilityDecisionService';
import { TransientCreditCardDataHelper } from '../service/util/transientCreditCardDataHelper';
import { RetailCreditCardAccountDetailResponseMappingHelper as RetailMappingHelper } from '../mapper/retailCreditCardAccountDetailResponseMappingHelper';
import { SbDilEligibilityDecisionSessionData } from '../model/cardDetail/cardDetailSessionData';
import { debug, error, info, trace } from '../common/utils/logger';

describe('SBDilTransientCreditCardDataService', () => {
  // Test constants
  const mockEcifId = 'test-ecif-id';
  const mockSessionId = 'test-session-id';
  const mockCorrelationId = 'test-correlation-id';
  const mockAccountIndex = 1;
  const mockCardNumber = '1234567890123456';
  
  const mockRequestBody: TransientCreditCardDataRequest = { 
    accountIndex: mockAccountIndex 
  };
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  test('should create service instance correctly', () => {
    // Verify the service can be instantiated with correct parameters
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    expect(service).toBeDefined();
    expect(CreditCardDetailSessionDataService).toHaveBeenCalledWith(mockCorrelationId);
    expect(CreditCardArrangementReportService).toHaveBeenCalledWith(mockCorrelationId);
    expect(CdbContextService).toHaveBeenCalledWith(mockSessionId, mockEcifId, mockCorrelationId);
    expect(EligibilityDecisionService).toHaveBeenCalledWith(mockCorrelationId);
  });
  
  test('should use session data when available for eligibility decision', async () => {
    // Mock session data with eligibility info
    const mockSbDilEligibilityDecisionSessionData = {
      ecifId: mockEcifId,
      sessionId: mockSessionId,
      accountIndex: mockAccountIndex,
      accountDetail: { 
        allowInstallmentLending: true 
      }
    };
    
    // Setup mock session service
    const mockCcDetailService = {
      fetchSbDilEligibilityDecision: jest.fn().mockResolvedValue(mockSbDilEligibilityDecisionSessionData),
      saveSbDilEligibilityDecision: jest.fn()
    };
    
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCcDetailService);
    
    // Create service and call method
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Execute method
    const result = await service.getSbDilEligibility();
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.statusCode).toBe(200);
    expect(result.headers['x-request-id']).toBe(mockCorrelationId);
    expect(result.headers['x-fapi-interaction-id']).toBe(mockCorrelationId);
    
    // Parse and verify body content
    const body = JSON.parse(result.body);
    expect(body.accountDetails.accountDetail.allowInstallmentLending).toBe(true);
    
    // Verify session data was used
    expect(mockCcDetailService.fetchSbDilEligibilityDecision).toHaveBeenCalledWith(mockEcifId, mockSessionId);
  });
  
  test('should fetch card data from backend when session data is not available', async () => {
    // Setup mocks for all backend services
    const mockCustomerInfo = {
      customerType: 'individual'
    };
    
    const mockCreditCardDetailResponse = {
      lob: 'creditCard',
      retail: {
        ingGeneralAcctResponse: {
          accountGeneralInfo: {
            clientProductCode: '123'
          }
        },
        inCustInfoResponse: [{ customerType: 'individual' }]
      }
    };
    
    const mockDecisionResponse = {
      result: {
        AllowInstallmentLending: {
          isEligible: true
        }
      }
    };

    // Setup service mocks
    const mockCcDetailService = {
      fetchSbDilEligibilityDecision: jest.fn().mockResolvedValue(null),
      saveSbDilEligibilityDecision: jest.fn().mockResolvedValue({})
    };
    
    const mockCdbService = {
      getSessionData: jest.fn().mockResolvedValue({ data: [{ account: 'details' }] })
    };
    
    const mockCcArrangementService = {
      getCreditCardDetail: jest.fn().mockResolvedValue(mockCreditCardDetailResponse)
    };
    
    const mockDecisionService = {
      getDilEligibilityDecision: jest.fn().mockResolvedValue(mockDecisionResponse)
    };
    
    // Setup mocks
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCcDetailService);
    (CdbContextService as jest.Mock).mockImplementation(() => mockCdbService);
    (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => mockCcArrangementService);
    (EligibilityDecisionService as jest.Mock).mockImplementation(() => mockDecisionService);
    (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
    (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);
    (RetailMappingHelper.findCustomerInfo as jest.Mock).mockReturnValue(mockCustomerInfo);
    
    // Create service and call method
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Execute method
    const result = await service.getSbDilEligibility();
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.statusCode).toBe(200);
    
    // Parse and verify body content
    const body = JSON.parse(result.body);
    expect(body.accountDetails.accountDetail.allowInstallmentLending).toBe(true);
    
    // Verify key service interactions
    expect(mockCcDetailService.fetchSbDilEligibilityDecision).toHaveBeenCalledWith(mockEcifId, mockSessionId);
    expect(mockCdbService.getSessionData).toHaveBeenCalled();
    expect(mockCcArrangementService.getCreditCardDetail).toHaveBeenCalled();
    expect(mockDecisionService.getDilEligibilityDecision).toHaveBeenCalled();
    expect(mockCcDetailService.saveSbDilEligibilityDecision).toHaveBeenCalled();
  });
  
  test('should handle error when session data service fails', async () => {
    // Setup mocks
    const mockCustomerInfo = {
      customerType: 'individual'
    };
    
    const mockCreditCardDetailResponse = {
      lob: 'creditCard',
      retail: {
        ingGeneralAcctResponse: {
          accountGeneralInfo: {
            clientProductCode: '123'
          }
        },
        inCustInfoResponse: [{ customerType: 'individual' }]
      }
    };
    
    const mockDecisionResponse = {
      result: {
        AllowInstallmentLending: {
          isEligible: true
        }
      }
    };

    // Setup service mocks
    const mockCcDetailService = {
      fetchSbDilEligibilityDecision: jest.fn().mockRejectedValue(new Error('Session service error')),
      saveSbDilEligibilityDecision: jest.fn().mockResolvedValue({})
    };
    
    const mockCdbService = {
      getSessionData: jest.fn().mockResolvedValue({ data: [{ account: 'details' }] })
    };
    
    const mockCcArrangementService = {
      getCreditCardDetail: jest.fn().mockResolvedValue(mockCreditCardDetailResponse)
    };
    
    const mockDecisionService = {
      getDilEligibilityDecision: jest.fn().mockResolvedValue(mockDecisionResponse)
    };
    
    // Setup mocks
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCcDetailService);
    (CdbContextService as jest.Mock).mockImplementation(() => mockCdbService);
    (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => mockCcArrangementService);
    (EligibilityDecisionService as jest.Mock).mockImplementation(() => mockDecisionService);
    (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([{ cardNumber: mockCardNumber }]);
    (TransientCreditCardDataHelper.getCardNumber as jest.Mock).mockReturnValue(mockCardNumber);
    (RetailMappingHelper.findCustomerInfo as jest.Mock).mockReturnValue(mockCustomerInfo);
    
    // Create service and call method
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Execute method
    const result = await service.getSbDilEligibility();
    
    // Verify service recovered after session service error
    expect(result).toBeDefined();
    expect(result.statusCode).toBe(200);
    
    // Verify error was logged
    expect(error).toHaveBeenCalled();
    
    // Verify fallback to backend services
    expect(mockCdbService.getSessionData).toHaveBeenCalled();
    expect(mockDecisionService.getDilEligibilityDecision).toHaveBeenCalled();
  });
  
  test('should throw ServerError when CDB context service fails', async () => {
    // Setup service mocks
    const mockCcDetailService = {
      fetchSbDilEligibilityDecision: jest.fn().mockResolvedValue(null)
    };
    
    const mockCdbService = {
      getSessionData: jest.fn().mockRejectedValue(new Error('CDB service error'))
    };
    
    // Setup mocks
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCcDetailService);
    (CdbContextService as jest.Mock).mockImplementation(() => mockCdbService);
    
    // Create service
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Execute and expect error
    await expect(service.getSbDilEligibility()).rejects.toThrow();
    expect(error).toHaveBeenCalled();
  });
  
  test('should throw ClientError when customer has no credit card accounts', async () => {
    // Setup service mocks
    const mockCcDetailService = {
      fetchSbDilEligibilityDecision: jest.fn().mockResolvedValue(null)
    };
    
    const mockCdbService = {
      getSessionData: jest.fn().mockResolvedValue({ data: [] })
    };
    
    // Setup mocks
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCcDetailService);
    (CdbContextService as jest.Mock).mockImplementation(() => mockCdbService);
    (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([]);
    
    // Create service
    const service = new SBDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Execute and expect error
    await expect(service.getSbDilEligibility()).rejects.toThrow();
    expect(error).toHaveBeenCalled();
  });
});
