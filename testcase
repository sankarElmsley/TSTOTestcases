import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------
import { SbDilTransientCreditCardDataService } from "../src/service/ctccd/sbDilTransientCreditCardDataService";
import { TransientCreditCardDataRequest } from "../src/model/ctccd/transientCreditCardDataRequest";
import { CreditCardDetailSessionDataService } from "../src/service/ctccd/creditCardDetailSessionDataService";
import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";
import { CdbContextService } from "../src/service/cdbcontext/cdbContextService";
import { EligibilityDecisionService } from "../src/service/dcn/eligibilityDecisionService";
import { TransientCreditCardDataHelper } from "../src/service/util/transientCreditCardDataHelper";
import { ClientError } from "../src/util/clientError";
import { ErrorCodes } from "../src/util/errorCodes";
import { ServerError } from "../src/util/serverError";

// Mock all needed modules
jest.mock("../src/service/ctccd/creditCardDetailSessionDataService");
jest.mock("../src/service/ccar/creditCardArrangementReportService");
jest.mock("../src/service/cdbcontext/cdbContextService");
jest.mock("../src/service/dcn/eligibilityDecisionService");
jest.mock("../src/service/util/transientCreditCardDataHelper", () => ({
    TransientCreditCardDataHelper: {
        filterCreditCardAccounts: jest.fn(),
        getCardNumber: jest.fn(),
        isDateExpired: jest.fn()
    }
}));

// Mock console to avoid test output pollution
const originalConsole = global.console;
beforeAll(() => {
    global.console = {
        ...console,
        trace: jest.fn(),
        info: jest.fn(),
        debug: jest.fn(),
        warn: jest.fn(),
        error: jest.fn()
    };
});

afterAll(() => {
    global.console = originalConsole;
});

describe("SbDilTransientCreditCardDataService", () => {
    // Test setup variables
    const mockEcifId = "test-ecif-id";
    const mockSessionId = "test-session-id";
    const mockCorrelationId = "test-correlation-id";
    const mockAccountIndex = 1;
    const mockCardNumber = "1234567890123456";
    const mockRequestBody = { accountIndex: mockAccountIndex };

    // Reset mocks before each test
    beforeEach(() => {
        jest.clearAllMocks();
    });

    test("should retrieve SB DIL eligibility successfully", async () => {
        // Mock CDB session response
        const mockSessionResponse = { data: [{ accountDetails: {} }] };
        
        // Mock service instance creation
        const mockCdbContextService = {
            getSessionData: jest.fn().mockResolvedValue(mockSessionResponse)
        };
        
        const mockSessionData = {
            ecifId: mockEcifId,
            sessionId: mockSessionId,
            accountIndex: mockAccountIndex,
            accountDetail: {},
            ccarCardDetail: {
                lob: "test-lob",
                accountGeneralInfo: { clientProductCode: "test-code" },
                customerInfo: [{ customerType: "test-type" }]
            },
            ccarCustomerDetail: {}
        };
        
        const mockCreditCardDetailSessionDataService = {
            fetchCardDetails: jest.fn().mockResolvedValue(mockSessionData)
        };
        
        const mockDecisionResponse = { eligibility: "ELIGIBLE" };
        
        const mockEligibilityDecisionService = {
            getDilEligibilityDecision: jest.fn().mockResolvedValue(mockDecisionResponse)
        };
        
        // Mock static helper methods
        TransientCreditCardDataHelper.filterCreditCardAccounts.mockReturnValue([{ card: "details" }]);
        TransientCreditCardDataHelper.getCardNumber.mockReturnValue(mockCardNumber);
        
        // Mock constructors
        (CdbContextService as jest.Mock).mockImplementation(() => mockCdbContextService);
        (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCreditCardDetailSessionDataService);
        (EligibilityDecisionService as jest.Mock).mockImplementation(() => mockEligibilityDecisionService);
        (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => ({}));

        // Create service and call method
        const service = new SbDilTransientCreditCardDataService(
            mockEcifId, 
            mockSessionId, 
            mockRequestBody as TransientCreditCardDataRequest, 
            mockCorrelationId
        );
        
        const result = await service.getSbDilEligibility();
        
        // Assertions
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body)).toEqual(mockDecisionResponse);
    });

    test("should throw ClientError when no credit cards found", async () => {
        // Mock CDB session response
        const mockSessionResponse = { data: [] };
        
        // Mock CdbContextService
        const mockCdbContextService = {
            getSessionData: jest.fn().mockResolvedValue(mockSessionResponse)
        };
        
        // Mock other services (not expected to be called)
        const mockCreditCardDetailSessionDataService = {
            fetchCardDetails: jest.fn()
        };
        
        // Mock static helper methods
        TransientCreditCardDataHelper.filterCreditCardAccounts.mockReturnValue([]);
        
        // Mock constructors
        (CdbContextService as jest.Mock).mockImplementation(() => mockCdbContextService);
        (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCreditCardDetailSessionDataService);
        (EligibilityDecisionService as jest.Mock).mockImplementation(() => ({}));
        (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => ({}));

        // Create service and call method
        const service = new SbDilTransientCreditCardDataService(
            mockEcifId, 
            mockSessionId, 
            mockRequestBody as TransientCreditCardDataRequest, 
            mockCorrelationId
        );
        
        // Expect the proper error to be thrown
        await expect(service.getSbDilEligibility()).rejects.toThrow(
            new ClientError(
                ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorMessage,
                ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorCode
            )
        );
    });
});
