package com.bmo.channels.api.authentication.helper;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import javax.servlet.http.HttpServletRequest;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Map;
import java.util.Vector;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ScHeaderProviderTest {

    @Mock
    private HttpServletRequest mockRequest;
    
    private ScHeaderProvider scHeaderProvider;
    
    private final String appCatId = "83815";
    private final String financialId = "001";
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        scHeaderProvider = new ScHeaderProvider(mockRequest, appCatId, financialId);
    }
    
    @Test
    public void testGetHeaders_NoHeaders() {
        // Setup mock request with no headers
        when(mockRequest.getHeaderNames()).thenReturn(Collections.emptyEnumeration());
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 2 entries", 2, headers.size());
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_WithForwardableHeaders() {
        // Setup headers to be returned
        Vector<String> headerNames = new Vector<>();
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode());
        headerNames.add("some-other-header"); // This one should not be forwarded
        
        // Setup mock expectations
        when(mockRequest.getHeaderNames()).thenReturn(headerNames.elements());
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode()))
                .thenReturn("api-key-value");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode()))
                .thenReturn("Mozilla/5.0");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode()))
                .thenReturn("Bearer token123");
        when(mockRequest.getHeader("some-other-header"))
                .thenReturn("other-value");
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 5 entries", 5, headers.size());
        assertEquals("API Key should be set correctly", "api-key-value", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertEquals("User Agent should be set correctly", "Mozilla/5.0", 
                headers.get(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
        assertEquals("Authorization should be set correctly", "Bearer token123", 
                headers.get(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode().toUpperCase()));
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
        assertFalse("Non-forwardable header should not be included", 
                headers.containsKey("SOME-OTHER-HEADER"));
    }
    
    @Test
    public void testGetHeaders_WithEmptyHeaderValues() {
        // Setup headers to be returned
        Vector<String> headerNames = new Vector<>();
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
        
        // Setup mock expectations
        when(mockRequest.getHeaderNames()).thenReturn(headerNames.elements());
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode()))
                .thenReturn("");  // Empty string
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode()))
                .thenReturn(null); // Null value
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 2 entries", 2, headers.size());
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
        assertFalse("Empty header value should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertFalse("Null header value should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_AllForwardableHeaders() {
        // Setup headers to include all forwardable headers
        Vector<String> headerNames = new Vector<>();
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode());
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode());
        
        // Setup mock expectations
        when(mockRequest.getHeaderNames()).thenReturn(headerNames.elements());
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode()))
                .thenReturn("test-api-key");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode()))
                .thenReturn("192.168.1.1");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode()))
                .thenReturn("Mozilla/5.0");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode()))
                .thenReturn("Bearer token");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode()))
                .thenReturn("client123");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode()))
                .thenReturn("2025-05-21T10:00:00Z");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode()))
                .thenReturn("10.0.0.1");
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 9 entries (7 forwardable + 2 defaults)", 9, headers.size());
        
        // Check that all forwardable headers are present
        assertEquals("API Key should be present", "test-api-key", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        assertEquals("True Client IP should be present", "192.168.1.1", 
                headers.get(ScHeaderProvider.HttpHeaderKey.TRUE_CLIENT_IP.getCode().toUpperCase()));
        assertEquals("User Agent should be present", "Mozilla/5.0", 
                headers.get(ScHeaderProvider.HttpHeaderKey.USER_AGENT.getCode().toUpperCase()));
        assertEquals("Authorization should be present", "Bearer token", 
                headers.get(ScHeaderProvider.HttpHeaderKey.AUTHORIZATION.getCode().toUpperCase()));
        assertEquals("Client ID should be present", "client123", 
                headers.get(ScHeaderProvider.HttpHeaderKey.CLIENT_ID.getCode().toUpperCase()));
        assertEquals("Customer Last Logged Time should be present", "2025-05-21T10:00:00Z", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_LAST_LOGGED_TIME.getCode().toUpperCase()));
        assertEquals("Customer IP Address should be present", "10.0.0.1", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_CUSTOMER_IP_ADDRESS.getCode().toUpperCase()));
        
        // Check default headers
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
    }
    
    @Test
    public void testGetHeaders_CaseInsensitiveHeaderNames() {
        // Setup headers with different cases
        Vector<String> headerNames = new Vector<>();
        headerNames.add("X-API-KEY"); // Uppercase
        headerNames.add("user-agent"); // Lowercase
        headerNames.add("Authorization"); // Mixed case
        
        // Setup mock expectations
        when(mockRequest.getHeaderNames()).thenReturn(headerNames.elements());
        when(mockRequest.getHeader("X-API-KEY")).thenReturn("api-key-upper");
        when(mockRequest.getHeader("user-agent")).thenReturn("Mozilla/5.0");
        when(mockRequest.getHeader("Authorization")).thenReturn("Bearer token");
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 5 entries", 5, headers.size());
        
        // All header keys should be uppercase in the result
        assertTrue("API Key header should be uppercase", 
                headers.containsKey("X-API-KEY"));
        assertTrue("User Agent header should be uppercase", 
                headers.containsKey("USER-AGENT"));
        assertTrue("Authorization header should be uppercase", 
                headers.containsKey("AUTHORIZATION"));
    }
    
    @Test
    public void testGetHeaders_WithNonForwardableHeaders() {
        // Setup headers including non-forwardable ones
        Vector<String> headerNames = new Vector<>();
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode()); // Forwardable
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_FAPI_INTERACTION_ID.getCode()); // Not forwardable
        headerNames.add(ScHeaderProvider.HttpHeaderKey.X_BMO_CHANNEL_URN.getCode()); // Not forwardable
        headerNames.add("custom-header"); // Not forwardable
        
        // Setup mock expectations
        when(mockRequest.getHeaderNames()).thenReturn(headerNames.elements());
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode()))
                .thenReturn("api-key-value");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_FAPI_INTERACTION_ID.getCode()))
                .thenReturn("interaction-id");
        when(mockRequest.getHeader(ScHeaderProvider.HttpHeaderKey.X_BMO_CHANNEL_URN.getCode()))
                .thenReturn("channel-urn");
        when(mockRequest.getHeader("custom-header"))
                .thenReturn("custom-value");
        
        // Execute
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        // Assert
        assertNotNull("Headers map should not be null", headers);
        assertEquals("Headers map should contain 3 entries (1 forwardable + 2 defaults)", 3, headers.size());
        
        // Check forwardable header is present
        assertEquals("API Key should be present", "api-key-value", 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode().toUpperCase()));
        
        // Check non-forwardable headers are not present
        assertFalse("Interaction ID should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.X_FAPI_INTERACTION_ID.getCode().toUpperCase()));
        assertFalse("Channel URN should not be included", 
                headers.containsKey(ScHeaderProvider.HttpHeaderKey.X_BMO_CHANNEL_URN.getCode().toUpperCase()));
        assertFalse("Custom header should not be included", 
                headers.containsKey("CUSTOM-HEADER"));
        
        // Check default headers
        assertEquals("Financial ID should be set correctly", financialId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_FAPI_FINANCIAL_ID.getCode().toUpperCase()));
        assertEquals("App Cat ID should be set correctly", appCatId, 
                headers.get(ScHeaderProvider.HttpHeaderKey.X_APP_CAT_ID.getCode().toUpperCase()));
    }
    
    @Test
    public void testHttpHeaderKeyShouldBeForwarded() {
        // Test forwardable headers
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-api-key"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("true-client-ip"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("user-agent"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("Authorization"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("clientId"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-customer-last-logged-time"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-customer-ip-address"));
        
        // Test case-insensitivity
        assertTrue
