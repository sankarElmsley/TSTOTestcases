import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

jest.mock("@aws-sdk/util-dynamodb", () => ({
  marshall: jest.fn((input) => input),
  unmarshall: jest.fn((input) => input)
}));

jest.mock("@aws-sdk/lib-dynamodb", () => ({
  PutCommand: jest.fn(),
  QueryCommand: jest.fn()
}));

// Create mock logger
const mockLogger = {
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn()
};

// Mock logger
jest.mock("../../../common/utils/logger", () => mockLogger);

import { CreditCardDetailSessionDataService } from "../../../src/service/cardDetail/creditCardDetailSessionDataService";
import { CardDetailSessionData } from "../../../src/model/cardDetail/cardDetailSessionData";
import { DynamoDBAPIClient } from "../../../src/service/util/dynamoDbClient";
import { ErrorCodes } from "../../../src/util/errorCodes";
import { PutCommand, QueryCommand } from "@aws-sdk/lib-dynamodb";

// Mock DynamoDB client
const mockSend = jest.fn();
const mockDbClient = {
  dbDocumentClient: {
    send: mockSend
  }
};

jest.mock("../../../src/service/util/dynamoDbClient", () => ({
  DynamoDBAPIClient: {
    getInstance: jest.fn().mockReturnValue(mockDbClient)
  }
}));

describe("CreditCardDetailSessionDataService", () => {
  let service: CreditCardDetailSessionDataService;
  const mockCorrelationId = "test-correlation-id";
  const mockCardDetails: CardDetailSessionData = {
    ecifId: "test-ecif",
    transientCreditCardId: "test-id",
    accountIndex: 1,
    sessionId: "test-session",
    accountDetail: {},
    ccarCustomerDetail: {},
    ccarCardDetail: {}
  };

  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();

    // Set up environment variables
    process.env.ccDetailDbTableName = "test-table";

    // Mock successful DynamoDB responses
    mockSend.mockImplementation((command) => {
      if (command instanceof PutCommand) {
        return Promise.resolve({});
      }
      if (command instanceof QueryCommand) {
        return Promise.resolve({
          Items: [mockCardDetails]
        });
      }
      return Promise.resolve({});
    });

    // Create service instance
    service = new CreditCardDetailSessionDataService(mockCorrelationId);
  });

  afterEach(() => {
    process.env = {};
    jest.resetAllMocks();
  });

  describe("saveCardDetails", () => {
    it("should save card details successfully", async () => {
      await service.saveCardDetails(mockCardDetails);

      expect(mockSend).toHaveBeenCalled();
      expect(mockLogger.debug).toHaveBeenCalled();
      expect(mockLogger.info).toHaveBeenCalled();
    });

    it("should handle errors when saving card details", async () => {
      // Mock error response
      mockSend.mockRejectedValueOnce(new Error("DB Error"));

      await expect(service.saveCardDetails(mockCardDetails))
        .rejects
        .toThrow(ErrorCodes.SAVE_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage);

      expect(mockLogger.error).toHaveBeenCalledWith(
        expect.stringContaining(ErrorCodes.SAVE_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage),
        expect.any(Error),
        mockCorrelationId
      );
    });
  });

  describe("fetchCardDetails", () => {
    it("should fetch card details successfully", async () => {
      const result = await service.fetchCardDetails("test-ecif", "test-session", 1);

      expect(result).toBeDefined();
      expect(mockSend).toHaveBeenCalled();
      expect(mockLogger.debugWithSanitize).toHaveBeenCalled();
      expect(mockLogger.info).toHaveBeenCalled();
    });

    it("should return undefined when no items found", async () => {
      // Mock empty response
      mockSend.mockResolvedValueOnce({ Items: [] });

      const result = await service.fetchCardDetails("test-ecif", "test-session", 1);

      expect(result).toBeUndefined();
      expect(mockLogger.error).toHaveBeenCalledWith(
        expect.stringContaining(ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_NO_ITEM.errorMessage),
        mockCorrelationId
      );
    });

    it("should handle errors when fetching card details", async () => {
      // Mock error response
      mockSend.mockRejectedValueOnce(new Error("DB Error"));

      await expect(service.fetchCardDetails("test-ecif", "test-session", 1))
        .rejects
        .toThrow(ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage);

      expect(mockLogger.error).toHaveBeenCalledWith(
        expect.stringContaining(ErrorCodes.FETCH_CARD_DTL_TEMP_STORAGE_ERROR.errorMessage),
        expect.any(Error),
        mockCorrelationId
      );
    });
  });

  describe("initialization", () => {
    it("should initialize with empty environment variables", () => {
      process.env = {};
      const serviceWithNoEnv = new CreditCardDetailSessionDataService(mockCorrelationId);
      expect(serviceWithNoEnv).toBeDefined();
    });

    it("should initialize the service successfully", () => {
      const testService = new CreditCardDetailSessionDataService(mockCorrelationId);
      expect(testService).toBeDefined();
    });
  });
});
