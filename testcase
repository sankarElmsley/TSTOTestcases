import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

/**
 * @jest-environment node
 */

// Mock AWS Services
const mockSTS = {
    assumeRole: jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue({
            Credentials: {
                AccessKeyId: 'mock-access-key',
                SecretAccessKey: 'mock-secret',
                SessionToken: 'mock-session-token'
            }
        })
    })
};

const mockSSM = {
    getParameter: jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue({
            Parameter: {
                Value: 'mock-parameter-value'
            }
        })
    })
};

jest.mock('aws-sdk', () => ({
    STS: jest.fn(() => mockSTS),
    SSM: jest.fn(() => mockSSM)
}));

// Mock the CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information");
import { CrossAccountAPICache } from "../../../../common/cross_account/cached_api_information";
const MockedCrossAccountAPICache = CrossAccountAPICache as jest.MockedClass<typeof CrossAccountAPICache>;

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
    debug: jest.fn(),
    debugWithSanitize: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    infoWithSanitize: jest.fn(),
    trace: jest.fn(),
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn()
}));

// Mock CdbContextService
jest.mock("../../src/service/cdbContext/cdbContextService", () => ({
    CdbContextService: jest.fn().mockImplementation(() => ({
        getSessionData: jest.fn().mockResolvedValue({
            data: {
                'mysummary/getMySummary': {
                    accounts: [
                        {
                            accountCategory: 'CREDIT_CARD_ACCOUNTS',
                            accountNumber: '4500123456789012'
                        }
                    ]
                }
            }
        })
    }))
}));

// Mock CreditcardUtilityService
jest.mock("../../src/service/ceu/creditcardUtilityService", () => ({
    CreditcardUtilityService: jest.fn().mockImplementation(() => ({
        getBinRangesCached: jest.fn().mockResolvedValue([
            {
                lowBIN: '450010',
                highBIN: '450020',
                LOB: 'R'
            }
        ])
    }))
}));

import { TransientCreditcardDataService } from "../../src/service/transientCreditCardDataService";

describe('TransientCreditcardDataService', () => {
    const mockSessionId = 'test-session-123';
    const mockEcifId = 'test-ecif-456';
    const mockOcifId = 'test-ocif-789';
    const mockAccountIndex = 0;
    const mockCorrelationId = 'test-correlation-101112';
    let service: TransientCreditcardDataService;

    beforeEach(() => {
        // Reset mocks
        jest.resetAllMocks();

        // Set up environment variables
        process.env = {
            crossRegion: 'us-east-1',
            REGION: 'us-east-1',
            crossAccountRoleForCdbContext: 'test-role',
            ssmParamCdbContextApiKey: 'test-api-key',
            ssmParamCdbContextGatewayId: 'test-gateway-id'
        };

        // Set up CrossAccountAPICache mock
        MockedCrossAccountAPICache.mockImplementation(() => ({
            value: jest.fn().mockResolvedValue({
                apiKey: 'mock-api-key',
                apiGatewayId: 'mock-gateway-id'
            })
        }));

        // Create service instance
        service = new TransientCreditcardDataService(
            mockEcifId,
            mockOcifId,
            mockSessionId,
            mockAccountIndex,
            mockCorrelationId
        );
    });

    afterEach(() => {
        process.env = {};
    });

    describe('Service Initialization', () => {
        it('should create service instance', () => {
            const testService = new TransientCreditcardDataService(
                mockEcifId,
                mockOcifId,
                mockSessionId,
                mockAccountIndex,
                mockCorrelationId
            );
            expect(testService).toBeDefined();
        });

        it('should initialize with empty env vars', () => {
            process.env = {};
            const serviceWithNoEnv = new TransientCreditcardDataService(
                mockEcifId,
                mockOcifId,
                mockSessionId,
                mockAccountIndex,
                mockCorrelationId
            );
            expect(serviceWithNoEnv).toBeDefined();
        });
    });

    describe('getCreditcardData', () => {
        it('should return credit card data successfully', async () => {
            const result = await service.getCreditcardData();
            expect(result).toBeDefined();
            expect(result.correlationId).toBe(mockCorrelationId);
        });

        it('should handle missing session data', async () => {
            // Mock CdbContextService to return empty data
            jest.mock("../../src/service/cdbContext/cdbContextService", () => ({
                CdbContextService: jest.fn().mockImplementation(() => ({
                    getSessionData: jest.fn().mockResolvedValue({ data: {} })
                }))
            }));

            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });

        it('should handle invalid account index', async () => {
            const invalidService = new TransientCreditcardDataService(
                mockEcifId,
                mockOcifId,
                mockSessionId,
                999,
                mockCorrelationId
            );

            const result = await invalidService.getCreditcardData();
            expect(result.status).toBe('Failure');
        });
    });

    describe('AWS Integration', () => {
        it('should handle STS assume role', async () => {
            const AWS = require('aws-sdk');
            const sts = new AWS.STS();
            
            await sts.assumeRole({
                RoleArn: process.env.crossAccountRoleForCdbContext,
                RoleSessionName: 'test-session'
            }).promise();

            expect(mockSTS.assumeRole).toHaveBeenCalledWith({
                RoleArn: process.env.crossAccountRoleForCdbContext,
                RoleSessionName: 'test-session'
            });
        });

        it('should handle SSM parameter retrieval', async () => {
            const AWS = require('aws-sdk');
            const ssm = new AWS.SSM();
            
            await ssm.getParameter({
                Name: process.env.ssmParamCdbContextApiKey,
                WithDecryption: true
            }).promise();

            expect(mockSSM.getParameter).toHaveBeenCalledWith({
                Name: process.env.ssmParamCdbContextApiKey,
                WithDecryption: true
            });
        });

        it('should handle AWS service errors', async () => {
            const AWS = require('aws-sdk');
            mockSSM.getParameter.mockReturnValueOnce({
                promise: jest.fn().mockRejectedValue(new Error('AWS Error'))
            });

            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });
    });

    describe('Error Handling', () => {
        it('should handle API errors gracefully', async () => {
            // Mock CdbContextService to throw error
            jest.mock("../../src/service/cdbContext/cdbContextService", () => ({
                CdbContextService: jest.fn().mockImplementation(() => ({
                    getSessionData: jest.fn().mockRejectedValue(new Error('API Error'))
                }))
            }));

            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });

        it('should handle BIN range lookup failures', async () => {
            // Mock CreditcardUtilityService to throw error
            jest.mock("../../src/service/ceu/creditcardUtilityService", () => ({
                CreditcardUtilityService: jest.fn().mockImplementation(() => ({
                    getBinRangesCached: jest.fn().mockRejectedValue(new Error('BIN lookup failed'))
                }))
            }));

            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });
    });
});
