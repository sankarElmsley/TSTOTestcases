import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// Add these imports to TransientCreditcardDataService.ts
import { EligibilityDecisionService } from "../dcn/eligibilityDecisionService";
import { RetailCreditCardAccountDetailResponseMappingHelper as RetailMappingHelper } from "../mapper/retailCreditCardAccountDetailResponseMappingHelper";

// In the TransientCreditcardDataService class:
private readonly decisionService: EligibilityDecisionService;
private dilEligibilityDecision: boolean = false;

// Modify the constructor to initialize decisionService
constructor(ecifId: string, ocifId: string, sessionId: string, requestBody: TransientCreditCardDataRequest, correlationId: string) {
    this.ecifId = ecifId;
    this.ocifId = ocifId;
    this.sessionId = sessionId;
    this.accountIndex = requestBody.accountIndex;
    this.requestBody = requestBody;
    this.correlationId = correlationId;
    this.responseMapper = new TransientCreditCardDataResponseMapper();
    this.creditCardDetailSessionDataService = new CreditCardDetailSessionDataService(correlationId);
    this.creditCardArrangementReportService = new CreditCardArrangementReportService(this.correlationId);
    this.creditCardAccountEntryViewReportService = new CreditCardAccountEntryViewReportService(this.correlationId);
    this.creditCardAccountAuthorizationService = new CreditCardAccountAuthorizationService(correlationId);
    this.creditCardRewardService = new CreditCardRewardService(correlationId);
    this.customerInstallmentPlanOfferService = new CustomerInstallmentPlanOfferService(correlationId);
    this.creditCardUtilityService = new CreditcardUtilityService(correlationId);
    this.cdbContextService = new CdbContextService(sessionId, ecifId, correlationId);
    this.decisionService = new EligibilityDecisionService(correlationId);
    this.tsysAccountId = "";
    this.binRanges = [];
    this.promoOfferCipoResponse = [];
}

// Add method to determine DIL eligibility - no caching, direct call to API
private async getDilEligibilityDecision(cardNumber: string): Promise<boolean> {
    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("In getDilEligibilityDecision..."),
        this.correlationId
    );
    
    if (!this.creditCardDetailResponse) {
        console.warn(
            TransientCreditcardDataService.LOG_PREFIX.concat(
                "Credit card details not available, cannot determine DIL eligibility"
            ),
            this.correlationId
        );
        return false;
    }
    
    try {
        const lineOfBusiness = this.creditCardDetailResponse?.lob ?? '';
        const clientProductCode = this.creditCardDetailResponse?.retail?.inqGeneralAcctResponse?.accountGeneralInfo?.clientProductCode ?? '';
        const customerInfo = RetailMappingHelper.findCustomerInfo(
            cardNumber, 
            this.creditCardDetailResponse?.retail?.inqCustInfoResponse
        );
        
        console.debug(
            TransientCreditcardDataService.LOG_PREFIX.concat(
                "customerInfo found customerType: ", 
                customerInfo?.customerType ?? 'unknown'
            ),
            this.correlationId
        );
        
        const customerType = customerInfo?.customerType ?? '';
        
        console.info(
            TransientCreditcardDataService.LOG_PREFIX.concat(
                "Eligibility Decision request params: lineOfBusiness: ", lineOfBusiness,
                ", clientProductCode: ", clientProductCode,
                ", customerType: ", customerType
            ),
            this.correlationId
        );
        
        if (lineOfBusiness && clientProductCode && customerType) {
            const decisionApiResponse = await this.decisionService.getDilEligibilityDecision(
                lineOfBusiness, 
                clientProductCode, 
                customerType
            );
            
            console.info(
                TransientCreditcardDataService.LOG_PREFIX.concat(
                    "Eligibility Decision is retrieved from the DCN API."
                ),
                this.correlationId
            );
            
            const eligibilityDecision = decisionApiResponse?.result?.AllowInstallmentLending?.isEligible ?? false;
            
            console.debug(
                TransientCreditcardDataService.LOG_PREFIX.concat(
                    "dilEligibilityDecision: ", eligibilityDecision ? 'true' : 'false'
                ),
                this.correlationId
            );
            
            return eligibilityDecision;
        }
    } catch (e) {
        console.error(
            TransientCreditcardDataService.LOG_PREFIX.concat(
                "Error while fetching DIL eligibility decision."
            ),
            e,
            this.correlationId
        );
    }
    
    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("Out getDilEligibilityDecision."),
        this.correlationId
    );
    
    return false;
}

// Modify retrieveCardDetails to determine DIL eligibility
private async retrieveCardDetails(cardNumber: string): Promise<void> {
    try {
        console.trace(
            TransientCreditcardDataService.LOG_PREFIX.concat(
                "In retrieveCardDetails....."
            ),
            this.correlationId
        );

        // ... existing code to retrieve card details ...
        
        // After credit card details are retrieved, get DIL eligibility
        this.dilEligibilityDecision = await this.getDilEligibilityDecision(cardNumber);
        
        console.trace(
            TransientCreditcardDataService.LOG_PREFIX.concat("Out retrieveCardDetails."),
            this.correlationId
        );
    } catch (error) {
        console.error("Unexpected error in retrieveCardDetails", error);
        throw error;
    }
}

// Modify formatAndSaveAccountDetail to use dilEligibilityDecision
private async formatAndSaveAccountDetail(
    cardNumber: string,
    creditcardDetailResponse?: CreditCardAccountDetailResponse,
    customerDetailResponse?: CustomerDetailsResponse,
    transientCreditCardAccountDetail?: AccountDetail,
    availableCredit?: number,
    rewardTypeResponse?: GetRewardTypeResponse
): Promise<AccountDetails> {
    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("In formatAndSaveAccountDetail..."),
        this.correlationId
    );

    let transientCreditCardAccountDetails: AccountDetails;

    try {
        if (creditcardDetailResponse && customerDetailResponse) {
            if (transientCreditCardAccountDetail) {
                // If we have cached account details, update DIL eligibility
                transientCreditCardAccountDetail.allowInstallmentLending = this.dilEligibilityDecision;
                transientCreditCardAccountDetails = {
                    accountDetail: transientCreditCardAccountDetail
                };
            } else {
                // Create a new account detail with DIL eligibility
                transientCreditCardAccountDetail =
                    CreditCardAccountDetailMapper.mapRetailCreditCardAccountDetail(
                        cardNumber,
                        creditcardDetailResponse,
                        customerDetailResponse,
                        this.correlationId,
                        this.matchedBin,
                        availableCredit,
                        rewardTypeResponse,
                        this.dilEligibilityDecision // Pass DIL eligibility here
                    );

                transientCreditCardAccountDetails = {
                    accountDetail: transientCreditCardAccountDetail
                };

                await this.storeCardDetails(
                    transientCreditCardAccountDetail,
                    creditcardDetailResponse,
                    customerDetailResponse
                );
            }
        } else {
            // ... existing error handling ...
        }
    } catch (e) {
        // ... existing error handling ...
    }

    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("Out formatAndSaveAccountDetail."),
        this.correlationId
    );

    return transientCreditCardAccountDetails;
}

// Modify storeCardDetails to ensure DIL eligibility is stored with card details
private async storeCardDetails(
    accountDetail: AccountDetail,
    ccarCardDetailResponse: CreditCardAccountDetailResponse,
    ccarCustomerDetailResponse: CustomerDetailsResponse
): Promise<void> {
    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("In storeCardDetails..."),
        this.correlationId
    );

    // Ensure DIL eligibility is set in the account detail
    accountDetail.allowInstallmentLending = this.dilEligibilityDecision;
    
    let retryCardDetailSessionDataStorageCount = 0;
    let retryRequired = true;

    while (retryCardDetailSessionDataStorageCount < 2 && retryRequired) {
        try {
            let cardDetailsPayload: CardDetailSessionData = {
                ecifId: this.ecifId,
                sessionId: this.sessionId,
                accountIndex: this.accountIndex,
                transientCreditCardId: `${this.sessionId}_${this.accountIndex}`,
                accountDetail: accountDetail,
                ccarCardDetail: ccarCardDetailResponse,
                ccarCustomerDetail: ccarCustomerDetailResponse,
            };

            await this.creditCardDetailSessionDataService.saveCardDetails(cardDetailsPayload);
            retryRequired = false;
        } catch (e) {
            console.error(
                TransientCreditcardDataService.LOG_PREFIX.concat(
                    "Error while storing CardDetails to Session: retry attempt ",
                    retryCardDetailSessionDataStorageCount
                ),
                e,
                this.correlationId
            );

            retryCardDetailSessionDataStorageCount++;
        }
    }

    console.trace(
        TransientCreditcardDataService.LOG_PREFIX.concat("Out storeCardDetails."),
        this.correlationId
    );
}

// Modify CreditCardAccountDetailMapper to accept dilEligibility (in CreditCardAccountDetailMapper.ts)
public static mapRetailCreditCardAccountDetail(
    cardNumber: string,
    creditcardDetailResponse: CreditCardAccountDetailResponse,
    customerDetailResponse: CustomerDetailsResponse,
    correlationId: string,
    bin: Bin,
    availableCredit?: number,
    rewardTypeResponse?: GetRewardTypeResponse,
    dilEligibility?: boolean // New parameter
): AccountDetail {
    // ... existing code ...

    const accountDetail: AccountDetail = {
        // ... existing properties ...
        
        // Use the passed dilEligibility value instead of hardcoding
        allowInstallmentLending: dilEligibility !== undefined ? dilEligibility : false
    };

    // ... rest of the code ...

    return accountDetail;
}
