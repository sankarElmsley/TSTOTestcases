import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoSettings;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.data.mongodb.core.FindAndModifyOptions;
import com.mongodb.client.result.UpdateResult;
import org.bson.types.ObjectId;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class TrackerCustomRepositoryImplTest {

    @Mock
    private MongoTemplate mongoTemplate;

    @Mock
    private UpdateResult updateResult;

    @InjectMocks
    private TrackerCustomRepositoryImpl repository;

    @Captor
    private ArgumentCaptor<Query> queryCaptor;

    @Captor
    private ArgumentCaptor<Update> updateCaptor;

    private static final String TEST_FILE_KEY = "test-file-key";
    private final List<ObjectId> mockObjectIds = Arrays.asList(
        new ObjectId("507f1f77bcf86d799439011"),
        new ObjectId("507f1f77bcf86d799439012")
    );

    @BeforeEach
    void setUp() {
        when(mongoTemplate.upsert(any(Query.class), any(Update.class), eq(Tracker.class)))
                .thenReturn(updateResult);
    }

    @Test
    @DisplayName("Should create tracker and lock file successfully")
    void createTrackerAndLockFile_Success() {
        // Arrange
        Tracker tracker = new Tracker();
        tracker.setFileKey(TEST_FILE_KEY);
        tracker.setStatus(S3ObjectStatus.PENDING);
        tracker.setMcProcessStatus(MCProcessStatus.PENDING);
        tracker.setEmailProcessStatus(EmailProcessStatus.PENDING);
        when(updateResult.getUpsertedId()).thenReturn(new ObjectId());

        // Act
        boolean result = repository.createTrackerAndLockFile(tracker);

        // Assert
        assertThat(result).isTrue();
        verify(mongoTemplate).upsert(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("fileKey")).isEqualTo(TEST_FILE_KEY);
    }

    @Test
    @DisplayName("Should update lock status")
    void updateLockStatus_Success() {
        // Act
        repository.updateLockStatus(S3LockStatus.Y, TEST_FILE_KEY);

        // Assert
        verify(mongoTemplate).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("fileKey")).isEqualTo(TEST_FILE_KEY);
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set")).asString().contains("lockStatus");
    }

    @Test
    @DisplayName("Should check if file is locked")
    void isFileLocked_Success() {
        // Arrange
        when(mongoTemplate.exists(any(Query.class), eq(Tracker.class))).thenReturn(true);

        // Act
        boolean result = repository.isFileLocked(TEST_FILE_KEY);

        // Assert
        assertThat(result).isTrue();
        verify(mongoTemplate).exists(queryCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("lockStatus")).isEqualTo(S3LockStatus.Y);
    }

    @Test
    @DisplayName("Should lock file successfully")
    void lockFile_Success() {
        // Arrange
        Tracker tracker = new Tracker();
        when(mongoTemplate.findAndModify(any(Query.class), any(Update.class), 
            any(FindAndModifyOptions.class), eq(Tracker.class))).thenReturn(tracker);

        // Act
        boolean result = repository.lockFile(TEST_FILE_KEY);

        // Assert
        assertThat(result).isTrue();
        verify(mongoTemplate).findAndModify(queryCaptor.capture(), updateCaptor.capture(), 
            any(FindAndModifyOptions.class), eq(Tracker.class));
    }

    @Test
    @DisplayName("Should lock MC process status")
    void lockMCProcessStatus_Success() {
        // Arrange
        Tracker tracker = new Tracker();
        when(mongoTemplate.findAndModify(any(Query.class), any(Update.class), 
            any(FindAndModifyOptions.class), eq(Tracker.class))).thenReturn(tracker);

        // Act
        boolean result = repository.lockMCProcessStatus(TEST_FILE_KEY);

        // Assert
        assertThat(result).isTrue();
        verify(mongoTemplate).findAndModify(queryCaptor.capture(), updateCaptor.capture(), 
            any(FindAndModifyOptions.class), eq(Tracker.class));
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(MCProcessStatus.INPROGRESS.toString());
    }

    @Test
    @DisplayName("Should lock email process status")
    void lockEmailProcessStatus_Success() {
        // Arrange
        Tracker tracker = new Tracker();
        when(mongoTemplate.findAndModify(any(Query.class), any(Update.class), 
            any(FindAndModifyOptions.class), eq(Tracker.class))).thenReturn(tracker);

        // Act
        boolean result = repository.lockEmailProcessStatus(TEST_FILE_KEY);

        // Assert
        assertThat(result).isTrue();
        verify(mongoTemplate).findAndModify(queryCaptor.capture(), updateCaptor.capture(), 
            any(FindAndModifyOptions.class), eq(Tracker.class));
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(EmailProcessStatus.INPROGRESS.toString());
    }

    @Test
    @DisplayName("Should update S3 object status")
    void updateStatus_Success() {
        // Act
        repository.updateStatus(S3ObjectStatus.COMPLETED, TEST_FILE_KEY);

        // Assert
        verify(mongoTemplate).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(S3ObjectStatus.COMPLETED.toString());
    }

    @Test
    @DisplayName("Should update MC process status")
    void updateMCProcessStatus_Success() {
        // Act
        repository.updateMCProcessStatus(MCProcessStatus.COMPLETED, TEST_FILE_KEY);

        // Assert
        verify(mongoTemplate).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(MCProcessStatus.COMPLETED.toString());
    }

    @Test
    @DisplayName("Should update email process status")
    void updateEmailProcessStatus_Success() {
        // Act
        repository.updateEmailProcessStatus(EmailProcessStatus.COMPLETED, TEST_FILE_KEY);

        // Assert
        verify(mongoTemplate).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(EmailProcessStatus.COMPLETED.toString());
    }

    @Test
    @DisplayName("Should update lock and status for multiple IDs")
    void updateLockAndStatusForIds_Success() {
        // Act
        repository.updateLockAndStatusForIds(mockObjectIds, S3ObjectStatus.COMPLETED, S3LockStatus.N);

        // Assert
        verify(mongoTemplate).updateMulti(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("_id").toString()).contains("$in");
        Update capturedUpdate = updateCaptor.getValue();
        assertThat(capturedUpdate.getUpdateObject().get("$set"))
            .asString()
            .contains(S3ObjectStatus.COMPLETED.toString())
            .contains(S3LockStatus.N.toString());
    }

    @Test
    @DisplayName("Should update MC process status for multiple IDs")
    void updateMCProcessStatusForIds_Success() {
        // Act
        repository.updateMCProcessStatusForIds(mockObjectIds, MCProcessStatus.COMPLETED);

        // Assert
        verify(mongoTemplate).updateMulti(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("_id").toString()).contains("$in");
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(MCProcessStatus.COMPLETED.toString());
    }

    @Test
    @DisplayName("Should update email process status for multiple IDs")
    void updateEmailProcessStatusForIds_Success() {
        // Act
        repository.updateEmailProcessStatusForIds(mockObjectIds, EmailProcessStatus.COMPLETED);

        // Assert
        verify(mongoTemplate).updateMulti(queryCaptor.capture(), updateCaptor.capture(), eq(Tracker.class));
        assertThat(queryCaptor.getValue().getQueryObject().get("_id").toString()).contains("$in");
        assertThat(updateCaptor.getValue().getUpdateObject().get("$set"))
            .asString().contains(EmailProcessStatus.COMPLETED.toString());
    }
}
