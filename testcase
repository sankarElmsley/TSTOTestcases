import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.service.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.io.ByteArrayInputStream;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class S3ServiceImplTest {

    @Mock
    private S3Client s3Client;

    @InjectMocks
    private S3ServiceImpl s3Service;

    private static final String BUCKET = "test-bucket";
    private static final String FILE_POLL_LOCATION = "test/location/";
    private static final String TEST_FILE_KEY = "test-file.dat";
    private static final String TEST_FILE_PATH = FILE_POLL_LOCATION + TEST_FILE_KEY;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(s3Service, "bucket", BUCKET);
        ReflectionTestUtils.setField(s3Service, "filePollLocation", FILE_POLL_LOCATION);
    }

    @Test
    void pollFiles_ShouldReturnDatFiles() {
        // Arrange
        S3Object validFile1 = S3Object.builder()
                .key(FILE_POLL_LOCATION + "file1.dat")
                .build();
        S3Object validFile2 = S3Object.builder()
                .key(FILE_POLL_LOCATION + "file2.DAT")
                .build();
        S3Object invalidFile = S3Object.builder()
                .key(FILE_POLL_LOCATION + "file3.txt")
                .build();

        ListObjectsV2Response listResponse = ListObjectsV2Response.builder()
                .contents(Arrays.asList(validFile1, validFile2, invalidFile))
                .build();

        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenReturn(listResponse);

        // Act
        List<String> result = s3Service.pollFiles();

        // Assert
        assertEquals(2, result.size());
        assertTrue(result.contains("file1.dat"));
        assertTrue(result.contains("file2.DAT"));
        assertFalse(result.contains("file3.txt"));
        
        verify(s3Client).listObjectsV2(any(ListObjectsV2Request.class));
    }

    @Test
    void readS3FileKey_ShouldReturnInputStream() {
        // Arrange
        byte[] testData = "test data".getBytes();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(testData);
        ResponseInputStream<GetObjectResponse> responseInputStream = 
            new ResponseInputStream<>(GetObjectResponse.builder().build(), inputStream);

        when(s3Client.getObject(any(GetObjectRequest.class)))
                .thenReturn(responseInputStream);

        // Act
        ResponseInputStream<GetObjectResponse> result = s3Service.readS3FileKey(TEST_FILE_KEY);

        // Assert
        assertNotNull(result);
        verify(s3Client).getObject(any(GetObjectRequest.class));
    }

    @Test
    void readS3FileKeyPart_ShouldReturnPartialInputStream() {
        // Arrange
        long startPos = 0L;
        long endPos = 100L;
        byte[] testData = "partial test data".getBytes();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(testData);
        ResponseInputStream<GetObjectResponse> responseInputStream = 
            new ResponseInputStream<>(GetObjectResponse.builder().build(), inputStream);

        ArgumentCaptor<GetObjectRequest> requestCaptor = ArgumentCaptor.forClass(GetObjectRequest.class);
        
        when(s3Client.getObject(any(GetObjectRequest.class)))
                .thenReturn(responseInputStream);

        // Act
        ResponseInputStream<GetObjectResponse> result = 
            s3Service.readS3FileKeyPart(TEST_FILE_KEY, startPos, endPos);

        // Assert
        assertNotNull(result);
        verify(s3Client).getObject(requestCaptor.capture());
        GetObjectRequest capturedRequest = requestCaptor.getValue();
        assertEquals("bytes=" + startPos + "-" + endPos, capturedRequest.range());
        assertEquals(BUCKET, capturedRequest.bucket());
        assertEquals(FILE_POLL_LOCATION + TEST_FILE_KEY, capturedRequest.key());
    }

    @Test
    void getS3ObjectContentLength_ShouldReturnLength() {
        // Arrange
        long expectedLength = 1000L;
        HeadObjectResponse headObjectResponse = HeadObjectResponse.builder()
                .contentLength(expectedLength)
                .build();

        when(s3Client.headObject((Consumer<HeadObjectRequest.Builder>) any()))
                .thenReturn(headObjectResponse);

        // Act
        long result = s3Service.getS3ObjectContentLength(TEST_FILE_KEY);

        // Assert
        assertEquals(expectedLength, result);
        verify(s3Client).headObject((Consumer<HeadObjectRequest.Builder>) any());
    }

    @Test
    void getS3ObjectContentLength_WhenHeadObjectFails_ShouldThrowException() {
        // Arrange
        when(s3Client.headObject((Consumer<HeadObjectRequest.Builder>) any()))
                .thenThrow(S3Exception.builder().message("S3 Error").build());

        // Act & Assert
        assertThrows(S3Exception.class, () -> 
            s3Service.getS3ObjectContentLength(TEST_FILE_KEY));
        
        verify(s3Client).headObject((Consumer<HeadObjectRequest.Builder>) any());
    }
}
