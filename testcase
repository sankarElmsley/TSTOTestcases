import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';



import { CreditCardArrangementReportService } from '../../../src/service/ccar/creditCardArrangementReportService';
import { ErrorCodes } from '../../../src/util/errorCodes';
import CrossAccountAPICache from '../../../../common/cross account/cached_api_information';

// Mock CrossAccountAPICache
jest.mock('../../../../common/cross account/cached_api_information', () => {
    return jest.fn().mockImplementation(() => ({
        Value: jest.fn().mockResolvedValue({
            apiKey: 'mock-api-key',
            apiGatewayId: 'mock-gateway-id'
        })
    }));
});

// Mock logging functions
jest.mock('../../util/logging', () => ({
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    debug: jest.fn(),
    info: jest.fn()
}));

// Mock fetch
global.fetch = jest.fn();

describe('CreditCardArrangementReportService', () => {
    let service: CreditCardArrangementReportService;
    const mockCorrelationId = 'test-correlation-id';
    const mockCardNumber = '1234567890123456';
    const mockTsysClientId = 'test-client-id';

    beforeEach(() => {
        jest.clearAllMocks();
        
        // Set environment variables exactly as they appear in the service
        process.env = {
            CrossRegion: 'test-region',
            REGION: 'test-region',
            crossAccountRoleForCCAR: 'test-role',
            ssmParamCcarApiKey: 'test-api-key',
            smParamCcarGatewayId: 'test-gateway-id',
            getCardDetailsUrl: 'http://test-url',
            getCustomerDetailsUrl: 'http://test-url'
        };

        // Create a new instance for each test
        service = new CreditCardArrangementReportService(mockCorrelationId);
    });

    describe('getCreditCardDetail', () => {
        it('should fetch card details successfully', async () => {
            const mockResponse = {
                status: 'S',
                data: {
                    cardNumber: mockCardNumber,
                    balance: 1000
                }
            };

            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve(mockResponse)
            });

            const result = await service.getCreditCardDetail(false, mockCardNumber, mockTsysClientId);
            expect(result).toEqual(mockResponse);
        });

        it('should fetch only available balance when flag is true', async () => {
            const mockResponse = {
                status: 'S',
                data: {
                    cardNumber: mockCardNumber,
                    availableBalance: 500
                }
            };

            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve(mockResponse)
            });

            const result = await service.getCreditCardDetail(true, mockCardNumber, mockTsysClientId);
            expect(result).toEqual(mockResponse);
        });

        it('should handle API error responses', async () => {
            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 500,
                statusText: 'Internal Server Error'
            });

            await expect(service.getCreditCardDetail(false, mockCardNumber, mockTsysClientId))
                .rejects
                .toThrow(ErrorCodes.CC_DETAILS_API_INVALID_RESPONSE_STATUS.errorMessage);
        });
    });

    describe('fetchCustomerDetails', () => {
        it('should fetch customer details successfully', async () => {
            const mockResponse = {
                status: 'S',
                data: {
                    customerName: 'John Doe',
                    customerId: '12345'
                }
            };

            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve(mockResponse)
            });

            const result = await service.fetchCustomerDetails(mockCardNumber, mockTsysClientId);
            expect(result).toEqual(mockResponse);
        });

        it('should handle failed customer details response', async () => {
            const mockResponse = {
                status: 'F',
                errorMessage: 'Failed to fetch customer details'
            };

            (global.fetch as jest.Mock).mockResolvedValueOnce({
                status: 200,
                json: () => Promise.resolve(mockResponse)
            });

            await expect(service.fetchCustomerDetails(mockCardNumber, mockTsysClientId))
                .rejects
                .toThrow(ErrorCodes.CUSTOMER_DETAILS_API_FAILURE_RESPONSE.errorMessage);
        });

        it('should handle API errors', async () => {
            (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));

            await expect(service.fetchCustomerDetails(mockCardNumber, mockTsysClientId))
                .rejects
                .toThrow(ErrorCodes.CUSTOMER_DETAILS_API_UNEXPECTED_ERROR.errorMessage);
        });
    });

    afterEach(() => {
        jest.clearAllMocks();
        process.env = {};
    });
});
