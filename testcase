import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------


// File: EligibilityDecisionService.test.ts

// Mock environment variables first
process.env = {
  ...process.env,
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Mock the CrossAccountAPICache class properly
jest.mock('../../common/cross_account/cached_api_information', () => {
  return {
    CrossAccountAPICache: jest.fn().mockImplementation(() => {
      return {
        value: jest.fn().mockResolvedValue({
          apiGatewayId: 'mock-api-gateway-id',
          apiKey: 'mock-api-key'
        })
      };
    })
  };
});

// Mock fetch
global.fetch = jest.fn();
global.performance = {
  ...global.performance,
  now: jest.fn().mockReturnValue(1000)
};

// Mock logger functions
jest.mock('../../common/utils/logger', () => ({
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
  logBackendServiceError: jest.fn(),
  trace: jest.fn(),
  info: jest.fn(),
  debug: jest.fn(),
  error: jest.fn()
}));

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ServerError } from '../../util/serverError';
import { ClientError } from '../../util/clientError';
import { ErrorCodes } from '../../util/errorCodes';
import { ApiConstants } from '../../util/constants';
import { logBackendServiceRequest, logBackendServiceResponse, logBackendServiceError } from '../../common/utils/logger';

describe('EligibilityDecisionService', () => {
  // Test setup
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should create service instance', () => {
    // Basic test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
    expect(CrossAccountAPICache).toHaveBeenCalled();
  });

  test('should pass correct parameters to CrossAccountAPICache constructor', () => {
    // Clear any previous calls to CrossAccountAPICache
    (CrossAccountAPICache as jest.Mock).mockClear();
    
    // Calculate the expected API Gateway ID from the host
    const gatewayHost = process.env.SSM_PARAM_DCN_GATEWAY_HOST || '';
    const expectedGatewayId = gatewayHost.substring(0, gatewayHost.indexOf('.'));
    
    // Create a new service instance which will call CrossAccountAPICache
    new EligibilityDecisionService(mockCorrelationId);
    
    // Check that CrossAccountAPICache was called with the correct parameters
    expect(CrossAccountAPICache).toHaveBeenCalledWith(
      process.env.CROSS_REGION,
      process.env.REGION,
      process.env.CROSS_ACCOUNT_ROLE_FOR_DCN,
      process.env.SSM_PARAM_DCN_API_KEY,
      expectedGatewayId,
      60 * 60 * 1000  // cacheTimeToLifeMS - 60 minutes in ms
    );
  });

  test('should handle SSM param initialization error', () => {
    // Save the original implementation
    const originalMockImplementation = (CrossAccountAPICache as jest.Mock).mockImplementation;
    
    // Make CrossAccountAPICache throw an error for this test only
    (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
      throw new Error('Failed to initialize CrossAccountAPICache');
    });
    
    // Define a function that creates the service to test error throwing
    function createServiceWithError() {
      return new EligibilityDecisionService(mockCorrelationId);
    }
    
    // Expect the function to throw a ServerError
    expect(createServiceWithError).toThrow(ServerError);
    
    // Restore the original implementation for subsequent tests
    (CrossAccountAPICache as jest.Mock).mockImplementation(originalMockImplementation);
  });

  test('should handle successful eligibility decision API call', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE',
        reason: 'QUALIFYING_PRODUCT'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify the result
    expect(result).toBeDefined();
    expect(result.eligibility).toBe('ELIGIBLE');
    expect(result.reason).toBe('QUALIFYING_PRODUCT');
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalledTimes(1);
  });

  test('should use correct headers in API request', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE',
        reason: 'QUALIFYING_PRODUCT'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalledTimes(1);
    
    // Verify request headers - use expect.objectContaining for more flexibility
    const [_, requestInfo] = (fetch as jest.Mock).mock.calls[0];
    expect(requestInfo.headers).toBeDefined();
    expect(requestInfo.headers).toEqual(
      expect.objectContaining({
        'Content-Type': 'application/json',
        'x-apigw-api-id': 'mock-api-gateway-id',
        'x-api-key': 'mock-api-key',
        'x-request-id': mockCorrelationId,
        'x-tapi-interaction-id': mockCorrelationId
      })
    );
  });

  test('should throw ServerError on non-200 response', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST',
        errorMessage: 'Bad Request'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    try {
      // This should throw
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
      fail('Expected getDilEligibilityDecision to throw, but it did not');
    } catch (error) {
      // Check it's the right type of error
      expect(error).toBeInstanceOf(ServerError);
    }
  });

  test('should retry on ClientError and succeed on second attempt', async () => {
    // First attempt fails with a ClientError
    (fetch as jest.Mock).mockRejectedValueOnce(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Second attempt succeeds
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        eligibility: 'ELIGIBLE',
        reason: 'QUALIFYING_PRODUCT'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
    
    // Verify the result
    expect(result).toBeDefined();
    expect(result.eligibility).toBe('ELIGIBLE');
    
    // Verify fetch was called twice (for retry)
    expect(fetch).toHaveBeenCalledTimes(2);
  });

  test('should fail after max retries', async () => {
    // Mock ClientError for all attempts
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    try {
      // This should throw
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
      fail('Expected getDilEligibilityDecision to throw after max retries, but it did not');
    } catch (error) {
      // Check it's the right type of error
      expect(error).toBeInstanceOf(ServerError);
    }
    
    // Verify fetch was called twice (for retries)
    expect(fetch).toHaveBeenCalledTimes(2);
  });

  test('should throw original error for non-ClientError exceptions', async () => {
    // Mock a non-ClientError exception
    const originalError = new Error('Some unexpected error');
    (fetch as jest.Mock).mockRejectedValueOnce(originalError);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    try {
      // This should throw
      await service.getDilEligibilityDecision(mockLob, mockClientProductCode, mockCustomerType);
      fail('Expected getDilEligibilityDecision to throw, but it did not');
    } catch (error) {
      // Check it's the original error
      expect(error).toBe(originalError);
    }
    
    // Verify fetch was called only once (no retry for non-ClientError)
    expect(fetch).toHaveBeenCalledTimes(1);
  });
});
