import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.controller;

import com.ymca.prs0.tbp.model.S3LockStatus;
import com.ymca.prs0.tbp.model.S3ObjectStatus;
import com.ymca.prs0.tbp.model.document.Tracker;
import com.ymca.prs0.tbp.service.S3Service;
import com.ymca.prs0.tbp.service.SMBService;
import com.ymca.prs0.tbp.service.TemplatedBatchService;
import com.ymca.prs0.tbp.service.TrackerService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith(MockitoExtension.class)
class S3TestControllerTest {

    @Mock
    private S3Service s3Service;

    @Mock
    private TemplatedBatchService templatedBatchService;

    @Mock
    private SMBService smbService;

    @Mock
    private TrackerService trackerService;

    @InjectMocks
    private S3TestController s3TestController;

    private MockMvc mockMvc;
    private static final String TEST_FILE_KEY = "test-file.txt";
    private static final long TEST_CONTENT_LENGTH = 1000L;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(s3TestController)
                .build();
    }

    @Test
    void getFileNames_WhenFilesExist_ShouldReturnFileList() throws Exception {
        // Arrange
        List<String> expectedFiles = Arrays.asList(TEST_FILE_KEY, "test-file2.txt");
        when(s3Service.pollFiles()).thenReturn(expectedFiles);

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/bucket/file-names"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$[0]").value(TEST_FILE_KEY))
                .andExpect(jsonPath("$[1]").value("test-file2.txt"));

        verify(s3Service).pollFiles();
    }

    @Test
    void getFileNames_WhenNoFiles_ShouldReturnEmptyList() throws Exception {
        // Arrange
        when(s3Service.pollFiles()).thenReturn(Collections.emptyList());

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/bucket/file-names"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$").isEmpty());

        verify(s3Service).pollFiles();
    }

    @Test
    void processFile_WhenValidFile_ShouldCreateTrackerAndReturnFileList() throws Exception {
        // Arrange
        List<String> fileKeys = Collections.singletonList(TEST_FILE_KEY);
        when(s3Service.pollFiles()).thenReturn(fileKeys);
        when(s3Service.getS3ObjectContentLength(TEST_FILE_KEY)).thenReturn(TEST_CONTENT_LENGTH);

        ArgumentCaptor<Tracker> trackerCaptor = ArgumentCaptor.forClass(Tracker.class);

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/templated-batch/process-file"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$[0]").value(TEST_FILE_KEY));

        verify(s3Service).pollFiles();
        verify(s3Service).getS3ObjectContentLength(TEST_FILE_KEY);
        verify(trackerService).saveTracker(trackerCaptor.capture());

        // Verify tracker properties
        Tracker capturedTracker = trackerCaptor.getValue();
        assertEquals(TEST_FILE_KEY, capturedTracker.getFileKey());
        assertEquals(S3LockStatus.Y, capturedTracker.getLockStatus());
        assertEquals(S3ObjectStatus.INPROGRESS, capturedTracker.getStatus());
        assertEquals(TEST_CONTENT_LENGTH, capturedTracker.getTotalContentlength());
    }

    @Test
    void processFile_WhenZeroContentLength_ShouldNotCreateTracker() throws Exception {
        // Arrange
        List<String> fileKeys = Collections.singletonList(TEST_FILE_KEY);
        when(s3Service.pollFiles()).thenReturn(fileKeys);
        when(s3Service.getS3ObjectContentLength(TEST_FILE_KEY)).thenReturn(0L);

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/templated-batch/process-file"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$[0]").value(TEST_FILE_KEY));

        verify(s3Service).pollFiles();
        verify(s3Service).getS3ObjectContentLength(TEST_FILE_KEY);
        verify(trackerService, never()).saveTracker(any(Tracker.class));
    }

    @Test
    void renameFile_ShouldMoveFileAndReturnFileList() throws Exception {
        // Arrange
        List<String> fileKeys = Collections.singletonList(TEST_FILE_KEY);
        when(s3Service.pollFiles()).thenReturn(fileKeys);

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/templated-batch/rename"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$[0]").value(TEST_FILE_KEY));

        verify(s3Service).pollFiles();
        verify(smbService).moveFile(eq(TEST_FILE_KEY), eq(""), eq("archive/"));
    }

    @Test
    void processFile_WhenNoFiles_ShouldReturnEmptyList() throws Exception {
        // Arrange
        when(s3Service.pollFiles()).thenReturn(Collections.emptyList());

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/templated-batch/process-file"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$").isEmpty());

        verify(s3Service).pollFiles();
        verify(s3Service, never()).getS3ObjectContentLength(any());
        verify(trackerService, never()).saveTracker(any());
    }

    @Test
    void renameFile_WhenNoFiles_ShouldReturnEmptyList() throws Exception {
        // Arrange
        when(s3Service.pollFiles()).thenReturn(Collections.emptyList());

        // Act & Assert
        mockMvc.perform(get("/PRS0/v1/templated-batch/rename"))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$").isEmpty());

        verify(s3Service).pollFiles();
        verify(smbService, never()).moveFile(any(), any(), any());
    }

    @Test
    void allEndpoints_WhenServiceThrowsException_ShouldPropagateError() throws Exception {
        // Arrange
        when(s3Service.pollFiles()).thenThrow(new RuntimeException("Service error"));

        // Test all endpoints
        String[] endpoints = {
            "/PRS0/v1/bucket/file-names",
            "/PRS0/v1/templated-batch/process-file",
            "/PRS0/v1/templated-batch/rename"
        };

        for (String endpoint : endpoints) {
            // Act & Assert
            mockMvc.perform(get(endpoint))
                    .andExpect(status().isInternalServerError());
        }
    }
}
