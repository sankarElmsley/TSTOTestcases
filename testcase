import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

# BMO Consent Management System API Documentation

## 1. Get Processing Purpose API
Used to retrieve consent purpose details and scope information for a specific vendor.

### Endpoint
```
POST /identityManagement/consent/v1/consentcontent
```

### Request
```json
{
    "headerVersion": "1",
    "digitalSignature": "digitalSignature",
    "timeoutTime": "0",
    "correlation": {
        "requestId": "REQ_butahy",
        "myId": "REQ_butahy_1",
        "myTimeStamp": "2024-09-24T19:57:08"
    },
    "what": {
        "APIFunction": "getbmoprocessingpurposePost",
        "API": "bmopartyconsent"
    },
    "clientId": "2068c3f44bcb100a1d291f28b5ce5c5a",
    "scopes": ["readAccoun"]
}
```

### Response
```json
{
    "scopes": [
        {
            "processingPurposeId": "561359846174881811",
            "en": "Bank Account and Credit Card balances, account names, and transaction details",
            "fr": "Soldes des comptes bancaires et de cartes de cr√©dit, noms des comptes et renseignements sur les transactions",
            "vendorName": "Intuit Canada ULC"
        }
    ]
}
```

### Description
- Retrieves processing purpose details for consent
- Supports multilingual responses (English/French)
- Includes vendor information and scope of data access
- Response time: ~200ms

## 2. Get All BMO Party Consents API
Used to retrieve existing consents before adding a new one.

### Endpoint
```
POST /esbapi/party/bmopartyconsent/v1/getallbmopartyconsents
```

### Request
```json
{
    "headerVersion": "1",
    "digitalSignature": "digitalSignature",
    "timeoutTime": "0",
    "correlation": {
        "requestId": "REQ_w5nkah",
        "myId": "REQ_w5nkah_1",
        "myTimeStamp": "2024-09-24T18:09:32.801"
    },
    "what": {
        "APIFunction": "getallbmopartyconsentsPost",
        "API": "bmopartyconsent"
    }
}
```

### Response
```json
{
    "correlation": {
        "requestId": "REQ_w5nkah",
        "myId": "GetA11092414e105c5fe-0a61-465d-a13a-6d56d724ae0b",
        "myTimeStamp": "2024-09-24T14:09:32.921-04:00",
        "callPath": "bmopartyconsent/null/GetAllBMOPartyConsents/"
    },
    "responseStatus": "0"
}
```

### Description
- Validates existing consents for the user
- Used as a prerequisite check before adding new consent
- Ensures no duplicate consents exist
- Response time: ~124ms

## 3. Add BMO Party Consent API
Records the user's consent decision in the system.

### Endpoint
```
POST /esbapi/party/bmopartyconsent/v1/addbmopartyconsent
```

### Request
```json
{
    "ECIFId": "90247224880430021320240801005403055",
    "Consent": [
        {
            "ProcPurpId": "561359846174881811",
            "AgreeInd": "1",
            "LanguageAgreedInType": "100",
            "LanguageAgreedInValue": "English",
            "EnforcementType": "0",
            "CreateDate": "2024-09-24T18:09:32.9412",
            "TenantType": "100000",
            "TenantValue": "BMO P&BB Canada",
            "ProfileSystemType": "100149",
            "ProfileSystemValue": "8545"
        }
    ]
}
```

### Response
```json
{
    "result": {
        "code": "0",
        "status": "SUCCESS"
    },
    "ECIFId": "90247224880430021320240801005403055",
    "Consent": {
        "ConsentId": "908972720137308012",
        "ConsentOwnerId": "902472248804300213",
        "ProcPurpId": "561359846174881811",
        "AgreeInd": "1",
        "LanguageAgreedInType": "100",
        "LanguageAgreedInValue": "English",
        "EnforcementType": "0",
        "CreateDate": "2024-09-24T18:09:32.9410002",
        "StartDate": "2024-09-24T18:09:33.077000Z",
        "ConsentActiveIndicator": "Y",
        "TenantType": "100000",
        "TenantValue": "BMO P&BB Canada",
        "ProfileSystemType": "100149",
        "ProfileSystemValue": "8545",
        "ConsentLastUpdateDate": "2024-09-24T18:09:33.0790002",
        "ConsentLastUpdateUser": "Rov Rules Admin",
        "ConsentLastUpdateTxId": "846372720137307712"
    }
}
```

### Description
- Records user's consent decision
- Creates a new consent record with unique ID
- Includes detailed audit information
- Response time: ~429ms
- Supports multiple tenant types
- Includes enforcement and language preferences

## Common Elements

### Headers
All APIs require these standard headers:
```
Content-Type: application/json
Accept: application/json
```

### Error Handling
- Success responses: HTTP 200
- Error responses: Standard HTTP error codes (not seen in logs)
- All responses include correlation IDs for tracking

### Security
- Digital signatures required
- Tenant-specific validation
- ECIF ID validation
- Proper correlation tracking

### Audit Trail
Each consent record includes:
- Creation timestamp
- Last update information
- Update user details
- Transaction IDs
- System-specific identifiers

This documentation covers all major APIs in the consent management flow, with their request/response formats and key features.
