import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------
// Mock lodash first - since it's a dependency of the logger
jest.mock('lodash', () => ({
  debounce: jest.fn(fn => fn),
  throttle: jest.fn(fn => fn),
  get: jest.fn((obj, path) => {
    return path.split('.').reduce((o, i) => (o ? o[i] : undefined), obj);
  })
}));

// Mock uuid
jest.mock('uuid', () => ({
  v4: jest.fn(() => 'mocked-uuid')
}));

// Mock perf_hooks
jest.mock('perf_hooks', () => ({
  performance: {
    now: jest.fn(() => 1000)
  }
}));

// Mock logger module
jest.mock('../common/utils/logger', () => ({
  debug: jest.fn(),
  info: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  trace: jest.fn(),
  debugWithSanitize: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
  logBackendServiceError: jest.fn()
}), { virtual: true });

// Mock the dependent services
jest.mock('../src/service/ctccd/creditCardDetailSessionDataService', () => ({
  CreditCardDetailSessionDataService: jest.fn()
}));

jest.mock('../src/service/ccar/creditCardArrangementReportService', () => ({
  CreditCardArrangementReportService: jest.fn()
}));

jest.mock('../src/service/cdbcontext/cdbContextService', () => ({
  CdbContextService: jest.fn()
}));

jest.mock('../src/service/dcn/eligibilityDecisionService', () => ({
  EligibilityDecisionService: jest.fn()
}));

// Mock TransientCreditCardDataHelper
const mockFilterCreditCardAccounts = jest.fn();
const mockGetCardNumber = jest.fn();
const mockIsDateExpired = jest.fn();

jest.mock('../src/service/util/transientCreditCardDataHelper', () => ({
  TransientCreditCardDataHelper: {
    filterCreditCardAccounts: mockFilterCreditCardAccounts,
    getCardNumber: mockGetCardNumber,
    isDateExpired: mockIsDateExpired
  }
}));

// Import our test subjects (after mocks are set up)
import { SbDilTransientCreditCardDataService } from '../src/service/ctccd/sbDilTransientCreditCardDataService';
import { TransientCreditCardDataRequest } from '../src/model/ctccd/transientCreditCardDataRequest';
import { CreditCardDetailSessionDataService } from '../src/service/ctccd/creditCardDetailSessionDataService';
import { CreditCardArrangementReportService } from '../src/service/ccar/creditCardArrangementReportService';
import { CdbContextService } from '../src/service/cdbcontext/cdbContextService';
import { EligibilityDecisionService } from '../src/service/dcn/eligibilityDecisionService';
import { ClientError } from '../src/util/clientError';
import { ErrorCodes } from '../src/util/errorCodes';

describe('SbDilTransientCreditCardDataService Tests', () => {
  // Prepare test variables
  const mockEcifId = 'test-ecif-id';
  const mockSessionId = 'test-session-id';
  const mockCorrelationId = 'test-correlation-id';
  const mockAccountIndex = 1;
  const mockCardNumber = '1234567890123456';
  const mockRequestBody = { accountIndex: mockAccountIndex };
  
  // Create mock objects for services
  let mockCreditCardDetailService;
  let mockCreditCardArrangementService;
  let mockCdbContextService;
  let mockDecisionService;
  
  // Set up before each test
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Initialize mock services
    mockCreditCardDetailService = { fetchCardDetails: jest.fn() };
    mockCreditCardArrangementService = { getCreditCardDetail: jest.fn() };
    mockCdbContextService = { getSessionData: jest.fn() };
    mockDecisionService = { getDilEligibilityDecision: jest.fn() };
    
    // Set up constructor mocks
    (CreditCardDetailSessionDataService as jest.Mock).mockImplementation(() => mockCreditCardDetailService);
    (CreditCardArrangementReportService as jest.Mock).mockImplementation(() => mockCreditCardArrangementService);
    (CdbContextService as jest.Mock).mockImplementation(() => mockCdbContextService);
    (EligibilityDecisionService as jest.Mock).mockImplementation(() => mockDecisionService);
  });
  
  test('should handle successful eligibility check when session data exists', async () => {
    // Mock session response
    const mockSessionResponse = { data: [{ account: 'data' }] };
    mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);
    
    // Mock session data
    const mockSessionData = {
      ecifId: mockEcifId,
      accountIndex: mockAccountIndex,
      ccarCardDetail: {
        lob: 'test-lob',
        accountGeneralInfo: { clientProductCode: 'test-code' },
        customerInfo: [{ customerType: 'test-type' }]
      }
    };
    mockCreditCardDetailService.fetchCardDetails.mockResolvedValue(mockSessionData);
    
    // Mock helper functions
    mockFilterCreditCardAccounts.mockReturnValue([{ cardNumber: mockCardNumber }]);
    mockGetCardNumber.mockReturnValue(mockCardNumber);
    
    // Mock decision response
    const mockDecisionResponse = { eligibility: 'ELIGIBLE' };
    mockDecisionService.getDilEligibilityDecision.mockResolvedValue(mockDecisionResponse);
    
    // Create service instance and call method
    const service = new SbDilTransientCreditCardDataService(
      mockEcifId, 
      mockSessionId, 
      mockRequestBody as TransientCreditCardDataRequest, 
      mockCorrelationId
    );
    
    const result = await service.getSbDilEligibility();
    
    // Assertions
    expect(result).toBeDefined();
    expect(result.statusCode).toBe(200);
    expect(JSON.parse(result.body)).toEqual(mockDecisionResponse);
  });
  
  test('should throw ClientError when no credit cards found', async () => {
    // Mock empty credit card accounts
    const mockSessionResponse = { data: [] };
    mockCdbContextService.getSessionData.mockResolvedValue(mockSessionResponse);
    mockFilterCreditCardAccounts.mockReturnValue([]);
    
    // Create service
    const service = new SbDilTransientCreditCardDataService(
      mockEcifId, 
      mockSessionId, 
      mockRequestBody as TransientCreditCardDataRequest, 
      mockCorrelationId
    );
    
    // Assert error is thrown
    await expect(service.getSbDilEligibility()).rejects.toMatchObject({
      message: ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorMessage,
      code: ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorCode
    });
  });
});
