# BMO Commercial Credit Card Authentication Flow Documentation

## Overview

This document details the comprehensive authentication flow for BMO commercial customers using their credit cards. The authentication process is specifically designed for business customers who need secure access to their accounts and services. The flow differs from the retail debit card process due to the unique security and operational requirements of commercial banking.

## Authentication Process Flow

The commercial credit card authentication process follows these sequential steps:

### 1. Initial Request Processing

1. **Request Validation**
   - Client sends authentication request with credit card number, password, and customerIdentifier="COMMERCIAL_DEBIT_CARD"
   - System generates request ID and logging context
   - Input validation performed:
     - Card number must be 16 digits
     - Password must be 8-13 characters long
     - HTTP Referer must be valid

2. **Mod-10 Check (Luhn Algorithm)**
   - Card number is validated using the mod10Check algorithm to ensure it's a valid card format
   - Failure at this step returns error code 601

3. **BIN Range Validation**
   - System retrieves BIN ranges from cache or calls creditCardUtilityV3Client.getBinRanges()
   - Validates that card BIN falls within acceptable ranges for commercial credit cards
   - Validates product code is supported for commercial use
   - Failure returns error code 608

### 2. Customer Type Verification

1. **Party Information Retrieval**
   - System calls getFinancialSnapshot to retrieve customer information
   - Extracts customerType - must be "0" (Organization) for commercial credit cards
   - If customerType is "0", system sets customerIdentifier = "COMMERCIAL_DEBIT_CARD"
   - Validates customer type with customerTypeResolver.validateCustomerType()
   - Retail customers ("P") using commercial flow are rejected

2. **OTP Lock Status Validation**
   - System skips validateOTPLockStatus() for commercial customers
   - Log entry: "Skip validateOTPLock for commercial card"

### 3. Card Status Verification

1. **Debit Card Details Retrieval**
   - System calls getDebitCardDetails() to retrieve full card information
   - Retrieves card status, association information, registration date

2. **Card Status Check**
   - checkCardStatus() verifies card is not in any of these states:
     - "2" (Compromised) - returns error code 901
     - "3" (Captured) - returns error code 905
     - "4" (Inactive) - returns error code 608
     - "X" (Compromise Exceeded) - returns error code 902
     - "S" (Lost or Stolen) - returns error code 903
     - "0" (Card on Order) - returns error code 904

3. **Registration Check**
   - Verifies tbRegisterDate is not null
   - If null, card is not registered for online banking and returns error code 801

### 4. Credential Validation

1. **ISDS Validation**
   - System calls initialISDSValidations() to check for credential suspension
   - Verifies credential is not in SOFT_LOCKED or HARD_LOCKED state

2. **Credential Authentication**
   - For ISDS flow:
     - Calls isdsValidations() which uses AuthenticatorISDS.authenticate()
     - Based on credential type, uses either hashAuth() or legacyAuth()
   - For legacy database flow:
     - Uses AuthenticatorDAO.authenticate() to validate credentials with database
     - Uses OLB_PASSWORD_ENHANCEMENT_PRG.OLB_Password_SSP stored procedure
     - Updates bad password count on success with updateBadPasswordCountForDebit()

3. **Temporary Password Check**
   - findTemporaryPassword() checks if user has a temporary password
   - If temporary password exists and is not expired - error code 605
   - If temporary password exists and is expired - error code 906

### 5. Risk Assessment

1. **RSA User Status Check**
   - System calls rsaQuery() to verify RSA user status
   - Status must be "VERIFIED" to proceed
   - "DELETED" status returns error code 704
   - Other non-verified statuses return error code 702

2. **TMX Fraud Detection**
   - For commercial customers, TMX integration is skipped
   - System sets tmxParam.setUserStatus(null)
   - Log entry: "Setting userStatus to null for commercial card"

3. **RSA Risk Analysis**
   - System calls rsaAnalyze() with factList (without TMX data)
   - RSA returns risk policy which can be:
     - ALLOW (low risk, no challenges required)
     - CHALLENGE (medium risk, requires additional verification)
     - DENY (high risk, authentication rejected)

### 6. Challenge Flow (if required)

1. **RSA Challenge for Commercial**
   - If RSA returns CHALLENGE policy for commercial customers:
     - System calls rsaChallenge() API directly
     - Unlike retail flow, does not use OTP methods
     - Sets authentication level to "2" (challenge required)

2. **Header Setup**
   - For RSA challenges, system calls setAuthenticationResponseHeaderVerifyChallenge()
   - Sets x_bmo_rsa_session_id with RSA session ID
   - Sets am-eai-auth-level to "2"
   - Publishes EventStatus.SUCCESS event (different from retail flow)

3. **Challenge Response**
   - System returns RSA challenge response to client
   - Client must complete RSA verification to proceed

### 7. Authentication Completion

1. **Proxy ID Retrieval**
   - For ALLOW policy, system retrieves proxy ID:
     - Calls getProxyId(ecifId, "100058", "ECIF", proxyIdType, proxyIdValue, reqBean, deviceTokenCookie)
     - Uses invokePartyIdentificationV5() to call PartyIdentificationV5Client

2. **Direct Authentication**
   - If RSA returns ALLOW policy:
     - System calls setAuthenticationResponseHeaderWhenSkipVerifyChallenge()
     - Sets authentication level to "5" (fully authenticated for commercial)
     - Adds x_bmo_proxyid header with retrieved proxy ID
     - Publishes EventStatus.SUCCESS event
     - Returns authentication success to client

3. **Error Handling**
   - If authentication fails at any step:
     - System publishes EventStatus.FAILURE event with appropriate reason code
     - Returns error response with appropriate error code and message
     - All error codes and messages are standardized and localized

## Error Codes and Handling

| Error Code | Description |
|------------|-------------|
| 501 | System error or service unavailable |
| 601 | Invalid card number or password |
| 603 | Password locked |
| 604 | Replacement card being used |
| 605 | Temporary password exists |
| 606 | Customer type not supported |
| 607 | Incorrect password |
| 608 | Invalid BIN range or inactive card |
| 609 | Card is suspended - possible fraud |
| 702 | RSA user status not verified |
| 703 | RSA user locked out |
| 704 | RSA service error |
| 705 | RSA risk policy deny |
| 801 | Card not registered for online banking |
| 901 | Card is compromised |
| 902 | Compromise exceeded |
| 903 | Card is lost or stolen |
| 904 | Card on order |
| 905 | Card is captured |
| 906 | Temporary password expired |

## Account Lockout Logic

- Password attempts are tracked in the backend database
- After 3 failed password attempts, the account becomes locked (error code 603)
- Commercial customers do not use OTP verification
- Password locks require customer service intervention to reset

## Security Features

1. **Multi-layered Validation**
   - Card format and BIN validation
   - Mod-10 algorithm check
   - Password complexity and validity checks
   - Registration status validation

2. **Commercial-Specific Security**
   - Proxy ID retrieval and validation
   - Higher authentication level (Level "5")
   - RSA challenge instead of OTP
   - Different header management approach

3. **Risk-Based Authentication**
   - RSA risk analysis based on multiple factors
   - Step-up authentication for medium-risk scenarios
   - Complete rejection for high-risk scenarios

4. **Account Protection**
   - Password lockout after multiple failed attempts
   - Specialized commercial account handling

## Events and Auditing

All authentication attempts, successes, and failures are recorded and published to the LoginEventPublisher with:

1. **Event Status**
   - SUCCESS: Successful authentication or challenge initiated (different from retail)
   - FAILURE: Failed authentication with reason code

2. **Context Information**
   - Device information
   - IP address
   - Card number (masked)
   - Timestamp
   - Channel information
   - Commercial customer type

3. **Risk Information**
   - RSA risk policy and rule details
   - Device binding status
   - No TMX data (skipped for commercial)

## Special Conditions Handling

1. **Company Information**
   - For commercial customers, extracts company name instead of first/last name
   - Sets company name in x_bmo_firstname header

2. **Proxy ID Management**
   - Retrieves proxy ID through PartyIdentificationV5Client
   - Adds to response headers as x_bmo_proxyid
   - Only done for commercial customers

3. **Authentication Level**
   - Uses higher authentication level (5) for commercial customers
   - Different from retail authentication level (4)

4. **Challenge Mechanism**
   - Uses RSA challenge instead of OTP/MFA
   - Different event publishing (SUCCESS vs ATTEMPT)
   - Different header management

## Commercial-Specific Headers

- x_bmo_proxyid: Contains the proxy ID for commercial customers
- am-eai-auth-level: Set to "5" for fully authenticated commercial customers
- am-eai-user-id: Formatted as hashedFBC.toUpperCase() + "@ciam"
- x_bmo_customer_type: Set to commercial identifier

## Sequence Flow Diagram

```
[See detailed sequence diagram in separate artifact]
```

This document comprehensively covers the authentication process for BMO commercial credit cards, including all validation steps, security features, and error handling mechanisms. The flow highlights the key differences from the retail debit card authentication process, particularly in the areas of fraud detection, challenge mechanisms, and header management.
