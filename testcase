import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';



// Mock the GetCognitoToken module
jest.mock("../../../common/cognito/get_cognito_token", () => ({
  GetCognitoToken: jest.fn().mockResolvedValue("mock-token"),
}));

import { CreditCardAccountEntryViewReportService } from "../../../src/service/ccaev/creditCardAccountEntryViewService";
import { CrossAccountAPICache } from "../../../common/cross_account/cached_api_information";
import { CognitoTokenCache } from "../../../common/cognito/cached_cognito_token";

// Mock AWS SDK modules
jest.mock("@aws-sdk/client-secrets-manager", () => ({
  SecretsManagerClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      SecretString: JSON.stringify({
        clientId: "test-client-id",
        clientSecret: "test-client-secret",
      }),
    }),
  })),
}));

jest.mock("@aws-sdk/client-sts", () => ({
  STSClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: "mock-access-key",
        SecretAccessKey: "mock-secret-key",
        SessionToken: "mock-session-token",
        Expiration: new Date(),
      },
    }),
  })),
}));

jest.mock("@aws-sdk/client-ssm", () => ({
  SSMClient: jest.fn(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: { Value: "mock-param-value" },
    }),
  })),
}));

// Mock the CrossAccountAPICache
jest.mock("../../../common/cross_account/cached_api_information");
const MockedCrossAccountAPICache = CrossAccountAPICache as jest.MockedClass<typeof CrossAccountAPICache>;

// Mock the CognitoTokenCache
jest.mock("../../../common/cognito/cached_cognito_token");
const MockedCognitoTokenCache = CognitoTokenCache as jest.MockedClass<typeof CognitoTokenCache>;

describe("CreditCardAccountEntryViewReportService", () => {
  const mockCorrelationId = "test-correlation-789";
  let service: CreditCardAccountEntryViewReportService;

  beforeEach(() => {
    // Reset all mocks
    jest.resetAllMocks();

    // Set up environment variables
    process.env = {
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      CrossAccountRoleForCCAEV: "test-role", // Updated role name
      ssmParamCcaevGatewayId: "test-gateway-id", // Updated param name
      cachedCognitoTokenSecretName: "test-cognito-secret",
      cognitoSecretArn: "test-secret-arn",
      getPostedCCTransactionsUrl: "http://mock-api-url", // Added missing URL
      awsProxySgUrl: "http://mock-proxy-url" // Added proxy URL
    };

    // Mock CrossAccountAPICache implementation
    MockedCrossAccountAPICache.mockImplementation(() => ({
      Value: jest.fn().mockResolvedValue({
        apiGatewayId: "mock-gateway-id",
        apiKey: "mock-api-key"
      })
    }));

    // Mock CognitoTokenCache implementation
    MockedCognitoTokenCache.mockImplementation(() => ({
      Value: jest.fn().mockResolvedValue("mock-cognito-token"),
    }));

    // Create new instance of service
    service = new CreditCardAccountEntryViewReportService(mockCorrelationId);
  });

  afterEach(() => {
    process.env = {};
  });

  describe("getPostedCCTransactions", () => {
    it("should retrieve posted transactions successfully", async () => {
      // Mock fetch implementation
      global.fetch = jest.fn().mockResolvedValue({
        status: 200,
        json: jest.fn().mockResolvedValue({ transactions: [] })
      });

      const result = await service.getPostedCCTransactions(
        "test-account",
        "2024-01-01",
        "2024-01-31"
      );

      expect(result).toBeDefined();
      expect(result).toHaveProperty("transactions");
    });

    it("should handle API errors appropriately", async () => {
      // Mock fetch to return error
      global.fetch = jest.fn().mockResolvedValue({
        status: 500,
        statusText: "Internal Server Error"
      });

      await expect(
        service.getPostedCCTransactions("test-account", "2024-01-01", "2024-01-31")
      ).rejects.toThrow();
    });
  });

  describe("initialization", () => {
    it("should initialize with empty environment variables", () => {
      process.env = {};
      const serviceWithNoEnv = new CreditCardAccountEntryViewReportService(mockCorrelationId);
      expect(serviceWithNoEnv).toBeDefined();
    });

    it("should initialize the service successfully", () => {
      const testService = new CreditCardAccountEntryViewReportService(mockCorrelationId);
      expect(testService).toBeDefined();
    });
  });
});
