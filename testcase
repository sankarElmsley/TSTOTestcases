import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------
// File: sbDilTransientCreditCardDataService.test.ts

// Mock required dependencies first
jest.mock('../src/service/ctccd/creditCardDetailSessionDataService', () => ({
  CreditCardDetailSessionDataService: jest.fn(() => ({
    fetchCardDetails: jest.fn()
  }))
}));

jest.mock('../src/service/ccar/creditCardArrangementReportService', () => ({
  CreditCardArrangementReportService: jest.fn(() => ({
    getCreditCardDetail: jest.fn()
  }))
}));

jest.mock('../src/service/cdbcontext/cdbContextService', () => ({
  CdbContextService: jest.fn(() => ({
    getSessionData: jest.fn()
  }))
}));

jest.mock('../src/service/dcn/eligibilityDecisionService', () => ({
  EligibilityDecisionService: jest.fn(() => ({
    getDilEligibilityDecision: jest.fn()
  }))
}));

jest.mock('../src/service/util/transientCreditCardDataHelper', () => ({
  TransientCreditCardDataHelper: {
    filterCreditCardAccounts: jest.fn(),
    getCardNumber: jest.fn(),
    isDateExpired: jest.fn()
  }
}));

// Mock console methods to prevent test output
global.console = {
  ...console,
  trace: jest.fn(),
  info: jest.fn(),
  debug: jest.fn(),
  warn: jest.fn(),
  error: jest.fn()
};

// Now import the necessary modules
import { SbDilTransientCreditCardDataService } from '../src/service/ctccd/sbDilTransientCreditCardDataService';
import { CreditCardDetailSessionDataService } from '../src/service/ctccd/creditCardDetailSessionDataService';
import { CreditCardArrangementReportService } from '../src/service/ccar/creditCardArrangementReportService';
import { CdbContextService } from '../src/service/cdbcontext/cdbContextService';
import { EligibilityDecisionService } from '../src/service/dcn/eligibilityDecisionService';
import { TransientCreditCardDataHelper } from '../src/service/util/transientCreditCardDataHelper';
import { ClientError } from '../src/util/clientError';
import { ErrorCodes } from '../src/util/errorCodes';

describe('SbDilTransientCreditCardDataService', () => {
  // Test setup
  const mockEcifId = 'test-ecif-id';
  const mockSessionId = 'test-session-id';
  const mockCorrelationId = 'test-correlation-id';
  const mockAccountIndex = 1;
  const mockCardNumber = '1234567890123456';
  const mockRequestBody = { accountIndex: mockAccountIndex };
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  test('should create service instance', () => {
    // Basic test to verify the service can be instantiated
    const service = new SbDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    expect(service).toBeDefined();
    expect(CreditCardDetailSessionDataService).toHaveBeenCalledWith(mockCorrelationId);
    expect(CreditCardArrangementReportService).toHaveBeenCalledWith(mockCorrelationId);
    expect(CdbContextService).toHaveBeenCalledWith(mockSessionId, mockEcifId, mockCorrelationId);
    expect(EligibilityDecisionService).toHaveBeenCalledWith(mockCorrelationId);
  });
  
  test('should throw ClientError when no credit cards', async () => {
    // Setup
    const cdbContextService = {
      getSessionData: jest.fn().mockResolvedValue({ data: [] })
    };
    
    (CdbContextService as jest.Mock).mockImplementation(() => cdbContextService);
    (TransientCreditCardDataHelper.filterCreditCardAccounts as jest.Mock).mockReturnValue([]);
    
    const service = new SbDilTransientCreditCardDataService(
      mockEcifId,
      mockSessionId,
      mockRequestBody,
      mockCorrelationId
    );
    
    // Test
    try {
      await service.getSbDilEligibility();
      fail('Expected an error to be thrown');
    } catch (error) {
      // Verify it's the expected ClientError
      expect(error).toBeInstanceOf(ClientError);
      expect(error.message).toBe(ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorMessage);
      expect(error.code).toBe(ErrorCodes.CUSTOMER_CC_COUNT_ZERO.errorCode);
    }
  });
});
