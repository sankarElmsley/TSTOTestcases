import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';



import { CreditCardDetailSessionDataService } from '../../../src/service/ctccd/creditCardDetailSessionDataService';
import { mockClear, mockReset } from 'jest-mock-extended';

// Mock the dependencies
jest.mock('../../../src/util/logging');
jest.mock('../../../src/util/temporaryStorage');

// Import the mocked dependencies
import { getFromTemporaryStorage } from '../../../src/util/temporaryStorage';

describe('CreditCardDetailSessionDataService', () => {
    const mockSessionId = 'test-session-id';
    const mockEcifId = 'test-ecif-id';
    const mockCorrelationId = 'test-correlation-id';
    let service: CreditCardDetailSessionDataService;

    beforeEach(() => {
        // Clear all mocks before each test
        jest.clearAllMocks();
        
        // Initialize the service
        service = new CreditCardDetailSessionDataService(
            mockSessionId,
            mockEcifId,
            mockCorrelationId
        );
    });

    describe('fetchCardDetails', () => {
        it('should fetch card details successfully', async () => {
            // Mock data
            const mockCardDetails = {
                cardNumber: '1234567890123456',
                cardType: 'VISA',
                expiryDate: '12/25'
            };

            // Setup the mock implementation
            (getFromTemporaryStorage as jest.Mock).mockResolvedValue(mockCardDetails);

            // Execute the test
            const result = await service.fetchCardDetails();

            // Assertions
            expect(result).toEqual(mockCardDetails);
            expect(getFromTemporaryStorage).toHaveBeenCalledTimes(1);
            expect(getFromTemporaryStorage).toHaveBeenCalledWith(
                expect.stringContaining(mockSessionId),
                mockCorrelationId
            );
        });

        it('should handle empty response from temporary storage', async () => {
            // Setup mock to return null
            (getFromTemporaryStorage as jest.Mock).mockResolvedValue(null);

            // Execute and verify the error is thrown
            await expect(service.fetchCardDetails()).rejects.toThrow(
                expect.objectContaining({
                    message: expect.stringMatching(/.*fetch.*card detail.*/i),
                    code: expect.any(String)
                })
            );
        });

        it('should handle error from temporary storage', async () => {
            // Setup mock to throw error
            (getFromTemporaryStorage as jest.Mock).mockRejectedValue(
                new Error('Storage error')
            );

            // Execute and verify the error is thrown
            await expect(service.fetchCardDetails()).rejects.toThrow(
                expect.objectContaining({
                    message: expect.stringMatching(/.*fetch.*card detail.*/i),
                    code: expect.any(String)
                })
            );
        });

        // Add more test cases as needed
    });

    // Clean up after all tests
    afterAll(() => {
        jest.resetModules();
        jest.clearAllMocks();
    });
});
