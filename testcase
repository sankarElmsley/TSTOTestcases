import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// Mock required modules
jest.mock("../../common/cross_account/cached_api_information");
jest.mock("../../common/utils/logger");

// Mock fetch
global.fetch = jest.fn();

// Mock performance API
global.performance = {
  now: jest.fn().mockReturnValue(1000)
};

// Mock environment variables
process.env = {
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ClientError } from '../../util/clientError';
import * as logger from "../../common/utils/logger";

describe('EligibilityDecisionService', () => {
  // Test constants
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  
  // Reset mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Set up CrossAccountAPICache mock implementation
    const mockApiInfo = {
      apiGatewayId: 'mock-api-gateway-id',
      apiKey: 'mock-api-key'
    };
    
    // Mock constructor
    (CrossAccountAPICache as jest.Mock).mockImplementation(function() {
      return {
        value: jest.fn().mockResolvedValue(mockApiInfo)
      };
    });
    
    // Mock logger methods to avoid implementation errors
    Object.keys(logger).forEach(key => {
      if (typeof logger[key] === 'function') {
        jest.spyOn(logger, key).mockImplementation(() => {});
      }
    });
  });

  test('should create service instance', () => {
    // Simple test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
  });

  test('should call getDilEligibilityDecision method', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    // Setup fetch mock
    (global.fetch as jest.Mock).mockResolvedValue(mockResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    try {
      // Call the method
      const result = await service.getDilEligibilityDecision(
        mockLob, 
        mockClientProductCode, 
        mockCustomerType
      );
      
      // Verify fetch was called
      expect(global.fetch).toHaveBeenCalled();
      
      // Verify json method was called
      expect(mockResponse.json).toHaveBeenCalled();
      
      // Basic result verification
      expect(result).toBeDefined();
    } catch (error) {
      console.error('Test error:', error);
      fail('Test should not throw an error');
    }
  });

  test('should handle API error response', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        error: 'Bad Request'
      })
    };
    
    // Setup fetch mock
    (global.fetch as jest.Mock).mockResolvedValue(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call the method and expect an error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow();
    
    // Verify fetch was called
    expect(global.fetch).toHaveBeenCalled();
  });

  test('should handle network error', async () => {
    // Setup fetch to throw an error
    (global.fetch as jest.Mock).mockRejectedValue(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Call the method and expect an error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow();
    
    // Verify fetch was called
    expect(global.fetch).toHaveBeenCalled();
  });
});
