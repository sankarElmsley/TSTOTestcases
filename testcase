import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});


@ExtendWith(MockitoExtension.class)
class BatchDeleteTest {

    @Mock
    private MongoTemplate mongoTemplate;

    @Mock 
    private IndexOperations indexOperations;

    @InjectMocks
    private BatchDeleteService batchDeleteService;

    @BeforeEach
    void setUp() {
        // Mock index operations
        when(mongoTemplate.indexOps(MCRawRecord.class)).thenReturn(indexOperations);
        when(indexOperations.ensureIndex(any(Index.class))).thenReturn("fileKey_index");
    }

    @Test
    void testBatchDelete_WithValidRecords() {
        // Given
        List<String> fileKeys = Arrays.asList("fileKey1", "fileKey2");
        Query expectedQuery = Query.query(Criteria.where("fileKey").in(fileKeys));
        DeleteResult mockResult = DeleteResult.acknowledged(2);
        
        when(mongoTemplate.remove(argThat(query -> 
            query.getQueryObject().get("fileKey") != null &&
            query.getQueryObject().get("fileKey").toString().contains("fileKey")
        ), eq(MCRawRecord.class))).thenReturn(mockResult);

        // When
        DeleteResult result = batchDeleteService.performBatchDelete(fileKeys);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getDeletedCount()).isEqualTo(2);
        verify(mongoTemplate).remove(any(Query.class), eq(MCRawRecord.class));
    }

    @Test
    void testBatchDelete_WithNonExistentRecords() {
        // Given
        List<String> fileKeys = Arrays.asList("nonexistent1", "nonexistent2");
        DeleteResult mockResult = DeleteResult.acknowledged(0);
        
        when(mongoTemplate.remove(any(Query.class), eq(MCRawRecord.class)))
            .thenReturn(mockResult);

        // When
        DeleteResult result = batchDeleteService.performBatchDelete(fileKeys);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getDeletedCount()).isEqualTo(0);
        verify(mongoTemplate).remove(any(Query.class), eq(MCRawRecord.class));
    }

    @Test
    void testBatchDelete_WithEmptyList() {
        // Given
        List<String> fileKeys = Collections.emptyList();
        DeleteResult mockResult = DeleteResult.acknowledged(0);
        
        when(mongoTemplate.remove(any(Query.class), eq(MCRawRecord.class)))
            .thenReturn(mockResult);

        // When
        DeleteResult result = batchDeleteService.performBatchDelete(fileKeys);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getDeletedCount()).isEqualTo(0);
        verify(mongoTemplate, never()).remove(any(Query.class), eq(MCRawRecord.class));
    }

    @Test
    void testBatchDelete_WithNullFileKeys() {
        // When
        DeleteResult result = batchDeleteService.performBatchDelete(null);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getDeletedCount()).isEqualTo(0);
        verify(mongoTemplate, never()).remove(any(Query.class), eq(MCRawRecord.class));
    }

    @Test
    void testIndexCreation() {
        // Given
        Index expectedIndex = new Index().on("fileKey", Sort.Direction.ASC);

        // When
        batchDeleteService.initializeIndexes();

        // Then
        verify(mongoTemplate).indexOps(MCRawRecord.class);
        verify(indexOperations).ensureIndex(argThat(index -> 
            index.getIndexKeys().containsKey("fileKey")));
    }

    @Test
    void testIndexCreation_HandlesException() {
        // Given
        when(indexOperations.ensureIndex(any(Index.class)))
            .thenThrow(new MongoException("Failed to create index"));

        // When
        batchDeleteService.initializeIndexes(); // Should not throw exception

        // Then
        verify(mongoTemplate).indexOps(MCRawRecord.class);
        verify(indexOperations).ensureIndex(any(Index.class));
    }

    // Helper method to match Query objects
    private static class QueryMatcher implements ArgumentMatcher<Query> {
        private final List<String> expectedFileKeys;

        public QueryMatcher(List<String> expectedFileKeys) {
            this.expectedFileKeys = expectedFileKeys;
        }

        @Override
        public boolean matches(Query query) {
            Document queryObject = query.getQueryObject();
            Document inClause = (Document) queryObject.get("fileKey");
            List<String> actualFileKeys = (List<String>) inClause.get("$in");
            return expectedFileKeys.equals(actualFileKeys);
        }
    }
}
