import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.service.impl;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.Session;
import com.ymca.prs0.tbp.config.KeyConfig;
import com.ymca.prs0.tbp.exception.InvalidInputException;
import com.ymca.prs0.tbp.factory.SFTPSessionFactory;
import com.ymca.prs0.tbp.model.ApiResponse;
import com.ymca.prs0.tbp.model.EmailProcessStatus;
import com.ymca.prs0.tbp.model.RawRecordStatus;
import com.ymca.prs0.tbp.model.document.SFMCRawRecord;
import com.ymca.prs0.tbp.model.document.Tracker;
import com.ymca.prs0.tbp.model.dto.TemplatedBatchEmailDTO;
import com.ymca.prs0.tbp.repository.SFMCRawRecordRepository;
import com.ymca.prs0.tbp.service.TrackerService;
import com.ymca.prs0.tbp.util.RequestInfoHolder;
import org.bson.types.ObjectId;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.task.TaskExecutor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TemplatedBatchEmailServiceImplTest {

    @Mock
    private TaskExecutor processEmailTaskExecutor;

    @Mock
    private SFMCRawRecordRepository sfmcRawRecordRepository;

    @Mock
    private SFTPSessionFactory sftpSessionFactory;

    @Mock
    private TrackerService trackerService;

    @Mock
    private Session sftpSession;

    @Mock
    private ChannelSftp channelSftp;

    @InjectMocks
    private TemplatedBatchEmailServiceImpl templatedBatchEmailService;

    private static final String FILE_KEY = "test-file-key";
    private static final String REQUEST_ID = "test-request-id";
    private static final int FETCH_BATCH_SIZE = 100;
    private static final int RECORDS_PER_FILE = 1000;
    private static final String REMOTE_DIRECTORY = "/remote/test/dir";
    private static final int BUFFER_SIZE = 8192;
    private static final int MAX_RETRIES = 3;
    private static final int PGP_ENCRYPTION_BLOCK_SIZE = 1024;
    private static final int PGP_LITERAL_DATA_SIZE = 1024;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(templatedBatchEmailService, "fetchBatchSize", FETCH_BATCH_SIZE);
        ReflectionTestUtils.setField(templatedBatchEmailService, "recordsPerFile", RECORDS_PER_FILE);
        ReflectionTestUtils.setField(templatedBatchEmailService, "remoteDirectory", REMOTE_DIRECTORY);
        ReflectionTestUtils.setField(templatedBatchEmailService, "bufferSize", BUFFER_SIZE);
        ReflectionTestUtils.setField(templatedBatchEmailService, "maxRetries", MAX_RETRIES);
        ReflectionTestUtils.setField(templatedBatchEmailService, "pgpEncryptionBlockSize", PGP_ENCRYPTION_BLOCK_SIZE);
        ReflectionTestUtils.setField(templatedBatchEmailService, "pgpLiteralDataSize", PGP_LITERAL_DATA_SIZE);
    }

    @Test
    void processTemplatedBatchEmails_WhenFileNotExists_ShouldThrowException() {
        // Arrange
        TemplatedBatchEmailDTO dto = new TemplatedBatchEmailDTO();
        dto.setFileKey(FILE_KEY);
        when(trackerService.isNewFile(FILE_KEY)).thenReturn(true);

        // Act & Assert
        assertThrows(InvalidInputException.class, () -> 
            templatedBatchEmailService.processTemplatedBatchEmails(dto));
    }

    @Test
    void processTemplatedBatchEmails_WhenFileExistsAndNotProcessed_ShouldSubmitJob() {
        // Arrange
        TemplatedBatchEmailDTO dto = new TemplatedBatchEmailDTO();
        dto.setFileKey(FILE_KEY);
        
        Tracker tracker = new Tracker();
        tracker.setEmailProcessStatus(EmailProcessStatus.PENDING);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(false);
            when(trackerService.getTracker(FILE_KEY)).thenReturn(tracker);
            when(trackerService.lockEmailStatus(FILE_KEY)).thenReturn(true);
            doNothing().when(trackerService).updateEmailProcessStatus(any(), anyString());

            // Act
            ApiResponse response = templatedBatchEmailService.processTemplatedBatchEmails(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task Submitted", response.getMarTechResponse().get("message"));
            assertEquals("Queued", response.getMarTechResponse().get("status"));
            
            verify(trackerService).updateEmailProcessStatus(EmailProcessStatus.INPROGRESS, FILE_KEY);
            verify(processEmailTaskExecutor).execute(any(Runnable.class));
        }
    }

    @Test
    void processTemplatedBatchEmails_WhenProcessingInProgress_ShouldNotSubmitJob() {
        // Arrange
        TemplatedBatchEmailDTO dto = new TemplatedBatchEmailDTO();
        dto.setFileKey(FILE_KEY);
        
        Tracker tracker = new Tracker();
        tracker.setEmailProcessStatus(EmailProcessStatus.INPROGRESS);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(false);
            when(trackerService.getTracker(FILE_KEY)).thenReturn(tracker);

            // Act
            ApiResponse response = templatedBatchEmailService.processTemplatedBatchEmails(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task is in progress or already processed", response.getMarTechResponse().get("message"));
            assertEquals("Not Queued", response.getMarTechResponse().get("status"));
            
            verify(trackerService, never()).updateEmailProcessStatus(any(), anyString());
            verify(processEmailTaskExecutor, never()).execute(any(Runnable.class));
        }
    }

    @Test
    void processTemplatedBatchEmails_WhenFileAlreadyProcessed_ShouldNotSubmitJob() {
        // Arrange
        TemplatedBatchEmailDTO dto = new TemplatedBatchEmailDTO();
        dto.setFileKey(FILE_KEY);
        
        Tracker tracker = new Tracker();
        tracker.setEmailProcessStatus(EmailProcessStatus.PROCESSED);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(false);
            when(trackerService.getTracker(FILE_KEY)).thenReturn(tracker);

            // Act
            ApiResponse response = templatedBatchEmailService.processTemplatedBatchEmails(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task is in progress or already processed", response.getMarTechResponse().get("message"));
            assertEquals("Not Queued", response.getMarTechResponse().get("status"));
            
            verify(trackerService, never()).updateEmailProcessStatus(any(), anyString());
            verify(processEmailTaskExecutor, never()).execute(any(Runnable.class));
        }
    }
}
