import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';


// First mock node-fetch
jest.mock('node-fetch', () => jest.fn());

import { CreditCardAccountAuthorizationService } from "../../../src/service/ccaa/creditCardAccountAuthorizationService";
import { ServerError } from "../../../src/util/serverError";

// Mock logger functions with debugWithSanitize
jest.mock("../../../common/utils/logger", () => ({
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
  error: jest.fn(),
  trace: jest.fn(),
  info: jest.fn(),
  debug: jest.fn(),
  debugWithSanitize: jest.fn(), // Added missing function
}));

// Mock request mapper
jest.mock("../../../src/service/ccaa/creditCardAccountAuthorizationRequestMapper", () => ({
  CreditCardAccountAuthorizationRequestMapper: {
    getCreditCardAccountAuthorizationRequest: jest.fn().mockReturnValue({
      cardNumber: "mock-card-number",
      requestListControl: {
        limitCount: 200
      }
    })
  }
}));

// Mock CrossAccountAPICache
jest.mock("../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    Value: jest.fn().mockResolvedValue({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id",
    }),
  })),
}));

// Mock CognitoTokenCache
jest.mock("../../../common/cognito/cached_cognito_token", () => ({
  CognitoTokenCache: jest.fn().mockImplementation(() => ({
    Value: jest.fn().mockResolvedValue("mock-token"),
  })),
}));

describe("CreditCardAccountAuthorizationService Tests", () => {
  let service: CreditCardAccountAuthorizationService;
  const mockCorrelationId = "test-correlation-id";

  beforeEach(() => {
    // Set required environment variables
    process.env = {
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRoleForCCAA: "test-role",
      ssmParamCcaaGatewayId: "test-gateway-id",
      getPendingCCTransactionsUrl: "http://mock-url",
      cachedCognitoTokenSecretName: "test-secret-name",
      cognitoSecretArn: "test-secret-arn",
      awsProxySgUrl: "http://mock-proxy-url"
    };

    // Mock global fetch
    global.fetch = jest.fn().mockResolvedValue({
      status: 200,
      json: jest.fn().mockResolvedValue({ 
        pendingTransactions: [],
        requestListControl: {
          limitCount: 200,
          offset: 0
        }
      })
    });

    // Clear all mocks
    jest.clearAllMocks();
  });

  afterEach(() => {
    process.env = {};
    jest.resetModules();
  });

  test("should initialize service with default environment variables", () => {
    service = new CreditCardAccountAuthorizationService(mockCorrelationId);
    expect(service).toBeDefined();
  });

  test("should initialize service without environment variables", () => {
    process.env = {};
    service = new CreditCardAccountAuthorizationService(mockCorrelationId);
    expect(service).toBeDefined();
  });

  test("should get pending transactions", async () => {
    service = new CreditCardAccountAuthorizationService(mockCorrelationId);
    const result = await service.getPendingCCTransactions("1234567890");
    expect(result).toBeDefined();
    expect(result).toHaveProperty("pendingTransactions");
  });

  test("should handle API errors appropriately", async () => {
    global.fetch = jest.fn().mockResolvedValue({
      status: 500,
      statusText: "Internal Server Error"
    });

    service = new CreditCardAccountAuthorizationService(mockCorrelationId);
    await expect(service.getPendingCCTransactions("1234567890")).rejects.toThrow();
  });

  test("should log trace messages in getPendingCCTransactions", async () => {
    const mockTrace = require("../../../common/utils/logger").trace;

    service = new CreditCardAccountAuthorizationService(mockCorrelationId);
    await service.getPendingCCTransactions("1234567890").catch(() => {});

    expect(mockTrace).toHaveBeenCalledWith(
      "CreditCardAccountAuthorizationService - In getPendingCCTransactions....",
      mockCorrelationId
    );
  });

  test("should reuse existing API cache if available", () => {
    const CrossAccountAPICache = require("../../../common/cross_account/cached_api_information")
      .CrossAccountAPICache;

    // Create first instance
    const service1 = new CreditCardAccountAuthorizationService(mockCorrelationId);

    // Reset mock to track new calls
    CrossAccountAPICache.mockClear();

    // Create second instance
    const service2 = new CreditCardAccountAuthorizationService(mockCorrelationId);

    // CrossAccountAPICache should not be called again
    expect(CrossAccountAPICache).not.toHaveBeenCalled();
  });
});








test("should handle API errors appropriately", async () => {
  // Mock fetch to return error
  global.fetch = jest.fn().mockResolvedValue({
    status: 500,
    statusText: "Internal Server Error"
  });

  service = new CreditCardAccountAuthorizationService(mockCorrelationId);
  await expect(service.getPendingCCTransactions("1234567890"))
    .rejects
    .toThrow(ErrorCodes.CC_PENDING_TXNS_API_INVALID_RESPONSE_STATUS.errorMessage);
});

test("should log trace messages in getPendingCCTransactions", async () => {
  // Setup mocks
  const mockTrace = jest.fn();
  jest.mock("../../../common/utils/logger", () => ({
    ...jest.requireActual("../../../common/utils/logger"),
    trace: mockTrace,
    debug: jest.fn(),
    debugWithSanitize: jest.fn(),
    info: jest.fn(),
    error: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
  }));

  // Mock successful API response
  global.fetch = jest.fn().mockResolvedValue({
    status: 200,
    json: jest.fn().mockResolvedValue({ 
      pendingTransactions: [],
      requestListControl: {
        limitCount: 200,
        offset: 0
      }
    })
  });

  service = new CreditCardAccountAuthorizationService(mockCorrelationId);
  
  try {
    await service.getPendingCCTransactions("1234567890");
  } catch (error) {
    // Handle any errors
  }

  // Verify the trace calls
  expect(mockTrace).toHaveBeenCalledWith(
    "CreditCardAccountAuthorizationService - In getPendingCCTransactions....",
    mockCorrelationId
  );
  expect(mockTrace).toHaveBeenCalledWith(
    "CreditCardAccountAuthorizationService - Out getPendingCCTransactions.",
    mockCorrelationId
  );
});

// Full test suite context...
describe("CreditCardAccountAuthorizationService Tests", () => {
  let service: CreditCardAccountAuthorizationService;
  const mockCorrelationId = "test-correlation-id";

  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    jest.resetModules();

    // Set required environment variables
    process.env = {
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRoleForCCAA: "test-role",
      ssmParamCcaaGatewayId: "test-gateway-id",
      getPendingCCTransactionsUrl: "http://mock-url",
      cachedCognitoTokenSecretName: "test-secret-name",
      cognitoSecretArn: "test-secret-arn",
      awsProxySgUrl: "http://mock-proxy-url"
    };

    // Mock global fetch default success response
    global.fetch = jest.fn().mockResolvedValue({
      status: 200,
      json: jest.fn().mockResolvedValue({ 
        pendingTransactions: [],
        requestListControl: {
          limitCount: 200,
          offset: 0
        }
      })
    });
  });

  afterEach(() => {
    process.env = {};
    jest.resetModules();
  });

  // ... other test cases ...
});
