import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

import { CdbContextService } from "./CdbContextService";
import { ServerError } from "util/serverError";

jest.mock("node-fetch", () => jest.fn());
jest.mock("common/utils/logger", () => ({
    debug: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    trace: jest.fn(),
    logBackendServiceError: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn()
}));

// Mock CrossAccountAPICache as a class with getValue method
const mockValue = jest.fn().mockResolvedValue({
    apiKey: "test-key",
    apiGatewayId: "test-gateway"
});

class MockCrossAccountAPICache {
    getValue = mockValue;
}

jest.mock("common/cross_account/cached_api_information", () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => new MockCrossAccountAPICache())
}));

describe("Scenario: CdbContextService.getSessionData() handles responses", () => {
    let service: CdbContextService;

    beforeEach(() => {
        process.env.crossRegion = "us-east-1";
        process.env.REGION = "us-east-1";
        process.env.crossAccountRoleForCdbContext = "test-role";
        process.env.ssmParamCdbContextApiKey = "test-api-key";
        process.env.ssmParamCdbContextGatewayId = "test-gateway-id";
        process.env.getSessionDataUrl = "https://api.test.com/(contextId)/data";

        service = new CdbContextService(
            "test-session-id",
            "test-ecif-id",
            "test-correlation-id"
        );

        jest.clearAllMocks();
    });

    afterEach(() => {
        delete process.env.crossRegion;
        delete process.env.REGION;
        delete process.env.crossAccountRoleForCdbContext;
        delete process.env.ssmParamCdbContextApiKey;
        delete process.env.ssmParamCdbContextGatewayId;
        delete process.env.getSessionDataUrl;
    });

    test("Given: valid request to fetch session data; When: response status is 200; Then: returns the API response", async () => {
        const mockResponse = { test: "data" };
        const fetchMock = jest.fn(() =>
            Promise.resolve({
                status: 200,
                json: () => Promise.resolve(mockResponse)
            })
        );

        (global as any).fetch = fetchMock;

        const result = await service.getSessionData();

        expect(result).toEqual(mockResponse);
        expect(fetchMock).toHaveBeenCalledTimes(1);
        expect(fetchMock).toHaveBeenCalledWith(
            "https://api.test.com/test-session-id.test-ecif-id/data",
            expect.objectContaining({
                headers: expect.objectContaining({
                    "x-api-key": "test-key",
                    "x-apigw-api-id": "test-gateway"
                })
            })
        );
    });

    test("Given: valid request; When: response status is not 200; Then: throws ServerError", async () => {
        const fetchMock = jest.fn(() =>
            Promise.resolve({
                status: 404,
                statusText: "Not Found"
            })
        );

        (global as any).fetch = fetchMock;

        await expect(service.getSessionData()).rejects.toThrow(ServerError);
    });

    test("Given: valid request; When: API call fails; Then: throws ServerError", async () => {
        const fetchMock = jest.fn(() =>
            Promise.reject(new Error("Network error"))
        );

        (global as any).fetch = fetchMock;

        await expect(service.getSessionData()).rejects.toThrow(ServerError);
    });
});
