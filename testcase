import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


-----------------------------------------------------------------

// Mock required dependencies
jest.mock("../../common/cross_account/cached_api_information");
jest.mock("../../common/utils/logger");

// Mock fetch
global.fetch = jest.fn();

// Mock performance API
global.performance = {
  ...global.performance,
  now: jest.fn().mockReturnValue(1000)
};

// Mock environment variables
process.env = {
  ...process.env,
  CROSS_REGION: 'us-east-1',
  REGION: 'us-east-1',
  CROSS_ACCOUNT_ROLE_FOR_DCN: 'mock-role-arn',
  SSM_PARAM_DCN_API_KEY: 'mock-api-key-param',
  SSM_PARAM_DCN_GATEWAY_HOST: 'mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
  GET_ELIGIBILITY_DECISION_URL: 'https://mock-api-gateway-id.execute-api.us-east-1.amazonaws.com',
};

// Import the necessary modules
import { EligibilityDecisionService } from '../../service/dcn/eligibilityDecisionService';
import { CrossAccountAPICache } from '../../common/cross_account/cached_api_information';
import { ServerError } from '../../util/serverError';
import { ClientError } from '../../util/clientError';
import { ApiConstants } from '../../util/constants';
import { ErrorCodes } from '../../util/errorCodes';
import { debug, error, info, trace, logBackendServiceError, logBackendServiceRequest, logBackendServiceResponse } from "../../common/utils/logger";

describe('EligibilityDecisionService', () => {
  // Test constants
  const mockCorrelationId = 'test-correlation-id';
  const mockLob = 'creditCard';
  const mockClientProductCode = '123';
  const mockCustomerType = 'individual';
  const mockApiValue = {
    apiGatewayId: 'mock-api-gateway-id',
    apiKey: 'mock-api-key'
  };
  
  // Reset and set up mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Set up CrossAccountAPICache mock implementation
    (CrossAccountAPICache as jest.Mock).mockImplementation(() => ({
      value: jest.fn().mockResolvedValue(mockApiValue)
    }));
    
    // Set up logger mock implementations
    (debug as jest.Mock).mockImplementation(() => {});
    (error as jest.Mock).mockImplementation(() => {});
    (info as jest.Mock).mockImplementation(() => {});
    (trace as jest.Mock).mockImplementation(() => {});
    (logBackendServiceError as jest.Mock).mockImplementation(() => {});
    (logBackendServiceRequest as jest.Mock).mockImplementation(() => {});
    (logBackendServiceResponse as jest.Mock).mockImplementation(() => {});
  });

  test('should create service instance correctly', () => {
    // Basic test to verify the service can be instantiated
    const service = new EligibilityDecisionService(mockCorrelationId);
    expect(service).toBeDefined();
    
    // Verify CrossAccountAPICache was initialized
    expect(CrossAccountAPICache).toHaveBeenCalledWith(
      'us-east-1',
      'us-east-1',
      'mock-role-arn',
      'mock-api-key-param',
      'mock-api-gateway-id',
      expect.any(Number) // Cache time to live
    );
  });

  test('should successfully call getDilEligibilityDecision and return eligible response', async () => {
    // Mock successful API response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true,
            reason: 'QUALIFYING_PRODUCT'
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(true);
    expect(result.result.AllowInstallmentLending.reason).toBe('QUALIFYING_PRODUCT');
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalledWith(
      expect.any(String),
      expect.any(Object)
    );
    
    // Verify logging
    expect(logBackendServiceRequest).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
  });

  test('should successfully call getDilEligibilityDecision and return not eligible response', async () => {
    // Mock successful API response with not eligible result
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: false,
            reason: 'NON_QUALIFYING_PRODUCT'
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(false);
    expect(result.result.AllowInstallmentLending.reason).toBe('NON_QUALIFYING_PRODUCT');
  });

  test('should handle non-200 response from API', async () => {
    // Mock error response
    const mockErrorResponse = {
      status: 400,
      statusText: 'Bad Request',
      json: jest.fn().mockResolvedValue({
        errorCode: 'INVALID_REQUEST',
        errorMessage: 'Invalid request parameters'
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockErrorResponse);
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow();
    
    // Verify error logging
    expect(error).toHaveBeenCalled();
    expect(logBackendServiceResponse).toHaveBeenCalled();
  });

  test('should retry on ClientError and succeed on second attempt', async () => {
    // First attempt fails with a ClientError
    (fetch as jest.Mock).mockRejectedValueOnce(new ClientError('Network error', 'NETWORK_ERROR'));
    
    // Second attempt succeeds
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    const result = await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify result
    expect(result).toBeDefined();
    expect(result.result.AllowInstallmentLending.isEligible).toBe(true);
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalled();
    
    // Verify logging includes retry information
    expect(debug).toHaveBeenCalledWith(
      expect.stringContaining('retry count: 0'),
      mockCorrelationId
    );
    expect(logBackendServiceError).toHaveBeenCalled();
  });

  test('should fail after max retries on ClientError', async () => {
    // All attempts fail with ClientError
    (fetch as jest.Mock)
      .mockRejectedValueOnce(new ClientError('Network error 1', 'NETWORK_ERROR'))
      .mockRejectedValueOnce(new ClientError('Network error 2', 'NETWORK_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow();
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalled();
  });

  test('should immediately throw on ServerError without retry', async () => {
    // Attempt fails with ServerError
    (fetch as jest.Mock).mockRejectedValueOnce(new ServerError('Server error', 'SERVER_ERROR'));
    
    // Create service
    const service = new EligibilityDecisionService(mockCorrelationId);
    
    // Execute and expect error
    await expect(service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    )).rejects.toThrow(ServerError);
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalled();
    
    // Verify error was logged
    expect(logBackendServiceError).toHaveBeenCalled();
  });

  test('should throw ServerError when CrossAccountAPICache initialization fails', async () => {
    // Mock CrossAccountAPICache constructor failure for this test only
    (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
      throw new Error('Failed to initialize CrossAccountAPICache');
    });
    
    // Expect error when creating service
    expect(() => new EligibilityDecisionService(mockCorrelationId)).toThrow();
    
    // Verify error was logged
    expect(error).toHaveBeenCalled();
  });

  test('should use correct request payload and decision name', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: true
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision(
      mockLob, 
      mockClientProductCode, 
      mockCustomerType
    );
    
    // Verify fetch was called
    expect(fetch).toHaveBeenCalledWith(
      expect.any(String),
      expect.any(Object)
    );
    
    // Simply check that fetch was called
    expect(fetch).toHaveBeenCalled();
  });

  test('should handle empty or null inputs appropriately', async () => {
    // Mock successful response
    const mockResponse = {
      status: 200,
      statusText: 'OK',
      json: jest.fn().mockResolvedValue({
        result: {
          AllowInstallmentLending: {
            isEligible: false
          }
        }
      })
    };
    
    (fetch as jest.Mock).mockResolvedValueOnce(mockResponse);
    
    // Create service and call method with empty/null inputs
    const service = new EligibilityDecisionService(mockCorrelationId);
    await service.getDilEligibilityDecision('', null, undefined);
    
    // Simply check that fetch was called
    expect(fetch).toHaveBeenCalled();
  });
});
