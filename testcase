import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { TransientCreditCardDataHelper } from "../src/service/helper/TransientCreditCardDataHelper";
import { Account, SessionSummary } from "../model/cdbcontext/sessionDataResponse";
import { Bin } from "../model/ccu/binRangesResponse";
import { ClientError } from "../src/service/utils/clientError";
import { ErrorCodes } from "../src/service/util/errorCodes";

// Mock logger
jest.mock("../common/utils/logger", () => ({
    debug: jest.fn(),
    debugWithSanitize: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    infoWithSanitize: jest.fn(),
    trace: jest.fn()
}));

describe("TransientCreditCardDataHelper Tests", () => {
    const correlationId = "test-correlation-id";

    describe("getCardNumber", () => {
        const mockCreditCardAccounts: Account[] = [
            {
                accountNumber: "4111111111111111",
                accountCategory: "CREDIT_CARD_ACCOUNTS"
            },
            {
                accountNumber: "5111111111111111",
                accountCategory: "CREDIT_CARD_ACCOUNTS"
            }
        ];

        test("should return correct card number for valid index", () => {
            const result = TransientCreditCardDataHelper.getCardNumber(mockCreditCardAccounts, 0, correlationId);
            expect(result).toBe("4111111111111111");
        });

        test("should throw error for index out of range", () => {
            expect(() => {
                TransientCreditCardDataHelper.getCardNumber(mockCreditCardAccounts, 3, correlationId);
            }).toThrow(ClientError);
        });
    });

    describe("filterCreditCardAccounts", () => {
        const mockSessionData = {
            "mysummary/getMySummary": {
                accounts: [
                    {
                        accountNumber: "4111111111111111",
                        accountCategory: "CREDIT_CARD_ACCOUNTS"
                    },
                    {
                        accountNumber: "1234567890",
                        accountCategory: "CHECKING_ACCOUNTS"
                    }
                ]
            }
        };

        test("should filter only credit card accounts from getMySummary", () => {
            const result = TransientCreditCardDataHelper.filterCreditCardAccounts(mockSessionData, correlationId);
            expect(result.length).toBe(1);
            expect(result[0].accountNumber).toBe("4111111111111111");
        });

        test("should throw error when no session summary available", () => {
            expect(() => {
                TransientCreditCardDataHelper.filterCreditCardAccounts({}, correlationId);
            }).toThrow(ClientError);
        });
    });

    describe("getCreditCardLOB", () => {
        const mockBinRanges: Bin[] = [
            {
                lowBIN: "400000",
                highBIN: "499999",
                LOB: "R"
            },
            {
                lowBIN: "500000",
                highBIN: "599999",
                LOB: "S"
            }
        ];

        test("should return correct LOB for matching bin range", () => {
            const result = TransientCreditCardDataHelper.getCreditCardLOB("4111111111111111", mockBinRanges, correlationId);
            expect(result).toBe("R");
        });

        test("should return empty string for non-matching bin range", () => {
            const result = TransientCreditCardDataHelper.getCreditCardLOB("3111111111111111", mockBinRanges, correlationId);
            expect(result).toBe("");
        });
    });

    describe("checkDateInBetween", () => {
        test("should return true for date within range", () => {
            const result = TransientCreditCardDataHelper.checkDateInBetween(
                "2024-01-15",
                "2024-01-01",
                "2024-01-31"
            );
            expect(result).toBe(true);
        });

        test("should return true for date equal to start date", () => {
            const result = TransientCreditCardDataHelper.checkDateInBetween(
                "2024-01-01",
                "2024-01-01",
                "2024-01-31"
            );
            expect(result).toBe(true);
        });

        test("should return false for date outside range", () => {
            const result = TransientCreditCardDataHelper.checkDateInBetween(
                "2024-02-01",
                "2024-01-01",
                "2024-01-31"
            );
            expect(result).toBe(false);
        });
    });

    describe("formatInDate", () => {
        test("should format date correctly", () => {
            const result = TransientCreditCardDataHelper.formatInDate("2024-01-21T12:00:00");
            expect(result).toBe("2024-01-21");
        });

        test("should return empty string for null input", () => {
            const result = TransientCreditCardDataHelper.formatInDate(null);
            expect(result).toBe("");
        });
    });
});
