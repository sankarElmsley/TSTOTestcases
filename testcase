package com.bmo.channels.api.authentication.helper;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.MockitoSettings;
import org.mockito.quality.Strictness;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class ScHeaderProviderTest {

    @Mock
    private HttpServletRequest mockRequest;
    
    private ScHeaderProvider scHeaderProvider;
    
    private final String appCatId = "83815";
    private final String financialId = "001";
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        scHeaderProvider = new ScHeaderProvider(mockRequest, appCatId, financialId);
    }
    
    @Test
    public void testGetHeaders_NoHeaders() {
        when(mockRequest.getHeaderNames()).thenReturn(Collections.emptyEnumeration());
        
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        assertNotNull(headers);
        assertEquals(2, headers.size());
        assertTrue(headers.containsKey("X-FAPI-FINANCIAL-ID"));
        assertTrue(headers.containsKey("X-APP-CAT-ID"));
    }
    
    @Test
    public void testGetHeaders_WithForwardableHeaders() {
        when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(Arrays.asList(
                "x-api-key", "user-agent", "Authorization", "random-header")));
        when(mockRequest.getHeader("x-api-key")).thenReturn("test-key");
        when(mockRequest.getHeader("user-agent")).thenReturn("Mozilla/5.0");
        when(mockRequest.getHeader("Authorization")).thenReturn("Bearer token");
        when(mockRequest.getHeader("random-header")).thenReturn("value");
        
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        assertEquals(5, headers.size()); // 3 forwardable + 2 defaults
        assertEquals("test-key", headers.get("X-API-KEY"));
        assertEquals("Mozilla/5.0", headers.get("USER-AGENT"));
        assertEquals("Bearer token", headers.get("AUTHORIZATION"));
        assertFalse(headers.containsKey("RANDOM-HEADER")); // Not forwardable
    }
    
    @Test
    public void testGetHeaders_EmptyAndNullValues() {
        when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(Arrays.asList(
                "x-api-key", "user-agent")));
        when(mockRequest.getHeader("x-api-key")).thenReturn("");
        when(mockRequest.getHeader("user-agent")).thenReturn(null);
        
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        assertEquals(2, headers.size()); // Only defaults
        assertFalse(headers.containsKey("X-API-KEY"));
        assertFalse(headers.containsKey("USER-AGENT"));
    }
    
    @Test
    public void testGetHeaders_DefaultHeadersAlwaysIncluded() {
        when(mockRequest.getHeaderNames()).thenReturn(Collections.emptyEnumeration());
        
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        assertEquals(financialId, headers.get("X-FAPI-FINANCIAL-ID"));
        assertEquals(appCatId, headers.get("X-APP-CAT-ID"));
    }
    
    @Test
    public void testGetHeaders_CaseInsensitive() {
        when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(Arrays.asList("X-API-KEY")));
        when(mockRequest.getHeader("X-API-KEY")).thenReturn("test-value");
        
        Map<String, String> headers = scHeaderProvider.getHeaders();
        
        assertTrue(headers.containsKey("X-API-KEY"));
        assertEquals("test-value", headers.get("X-API-KEY"));
    }
    
    @Test
    public void testShouldBeForwarded_ForwardableHeaders() {
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-api-key"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("user-agent"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("Authorization"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("clientId"));
    }
    
    @Test
    public void testShouldBeForwarded_NonForwardableHeaders() {
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-fapi-financial-id"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("x-app-cat-id"));
        assertFalse(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("random-header"));
    }
    
    @Test
    public void testShouldBeForwarded_CaseInsensitive() {
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("X-API-KEY"));
        assertTrue(ScHeaderProvider.HttpHeaderKey.shouldBeForwarded("USER-AGENT"));
    }
    
    @Test
    public void testHttpHeaderKeyMethods() {
        assertEquals("x-api-key", ScHeaderProvider.HttpHeaderKey.X_API_KEY.getCode());
        assertEquals("x-api-key", ScHeaderProvider.HttpHeaderKey.X_API_KEY.toString());
    }
}
