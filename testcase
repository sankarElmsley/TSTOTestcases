import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardRewardService } from "///src/service/ccr/creditCardRewardService";
import { ServerError } from "../../util/serverError";

let creditCardRewardService: CreditCardRewardService;
const mockSessionId = "test-session-123";
const mockEcifId = "test-ecif-456";
const mockCorrelationId = "test-correlation-789";

const mockSuccessResponse = {
  data: {
    rewardPoints: 5000,
    cashbackAmount: 100,
    lastUpdateDate: "2024-12-25"
  }
};

// Mock AWS SDK
jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

// Mock the common/aws/sts module
jest.mock("../../../../common/aws/sts", () => ({
  AssumeRole: jest.fn().mockResolvedValue({
    accessKeyId: "mock-access-key",
    secretAccessKey: "mock-secret-key",
    sessionToken: "mock-session-token"
  })
}));

// Mock the common/aws/ssm module
jest.mock("../../../../common/aws/ssm", () => ({
  GetParamValue: jest.fn().mockResolvedValue("mock-param-value")
}));

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn()
}));

describe("CreditCardRewardService", () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Set up environment variables
    process.env = {
      AWS_REGION: "us-east-1",
      AWS_SDK_LOAD_CONFIG: "1",
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRoleForCdbContext: "test-role",
      ssmParamCdbContextApiKey: "test-api-key",
      ssmParamCdbContextGatewayId: "test-gateway-id",
      getRewardDetailsUrl: "https://test-api.bmo.com/v1/reward-details"
    };

    // Mock the static apiInfoCache directly on the service class
    Object.defineProperty(CreditCardRewardService, 'apiInfoCache', {
      value: {
        value: jest.fn().mockResolvedValue({
          apiKey: "mock-param-value",
          apiGatewayId: "mock-param-value"
        })
      },
      writable: true
    });

    // Create new instance
    creditCardRewardService = new CreditCardRewardService(
      mockSessionId,
      mockEcifId,
      mockCorrelationId
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Reset the static apiInfoCache
    Object.defineProperty(CreditCardRewardService, 'apiInfoCache', {
      value: null,
      writable: true
    });
    // Clean up environment variables
    process.env = {};
  });

  describe("getRewardDetails", () => {
    test("should fetch reward details successfully", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 200,
          json: () => Promise.resolve(mockSuccessResponse)
        })
      ) as jest.Mock;

      const result = await creditCardRewardService.getRewardDetails();
      expect(result).toBe("");  // Currently returns empty string as per implementation
      
      const mockTrace = require("../../../../common/utils/logger").trace;
      expect(mockTrace).toHaveBeenCalledWith(
        "CreditCardRewardService - In getRewardDetails.....",
        mockCorrelationId
      );
    });

    test("should handle API error responses", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 500,
          statusText: "Internal Server Error"
        })
      ) as jest.Mock;

      const result = await creditCardRewardService.getRewardDetails();
      expect(result).toBe("");  // Currently returns empty string as per implementation
    });

    test("should handle network errors", async () => {
      global.fetch = jest.fn(() => 
        Promise.reject(new Error("Network error"))
      ) as jest.Mock;

      const result = await creditCardRewardService.getRewardDetails();
      expect(result).toBe("");  // Currently returns empty string as per implementation
    });

    test("should handle API cache failure", async () => {
      // Mock apiInfoCache to throw error
      Object.defineProperty(CreditCardRewardService, 'apiInfoCache', {
        value: {
          value: jest.fn().mockRejectedValue(new Error("Cache error"))
        },
        writable: true
      });

      const result = await creditCardRewardService.getRewardDetails();
      expect(result).toBe("");  // Currently returns empty string as per implementation
    });
  });

  describe("initialization", () => {
    test("should initialize with empty environment variables", () => {
      process.env = {};
      const service = new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );
      expect(service).toBeDefined();
    });

    test("should handle CrossAccountAPICache initialization error", () => {
      const mockError = require("../../../../common/utils/logger").error;
      
      require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache.mockImplementation(() => {
        throw new Error("Cache initialization failed");
      });

      expect(() => {
        new CreditCardRewardService(
          mockSessionId,
          mockEcifId,
          mockCorrelationId
        );
      }).toThrow(ServerError);

      expect(mockError).toHaveBeenCalled();
    });

    test("should reuse existing API cache", () => {
      const CrossAccountAPICache = require("../../../../common/cross_account/cached_api_information").CrossAccountAPICache;
      
      const service1 = new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );

      CrossAccountAPICache.mockClear();

      const service2 = new CreditCardRewardService(
        mockSessionId,
        mockEcifId,
        mockCorrelationId
      );

      expect(CrossAccountAPICache).not.toHaveBeenCalled();
    });
  });
});
