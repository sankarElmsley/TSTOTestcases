import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

import { CreditCardArrangementReportService } from "../src/service/ccar/creditCardArrangementReportService";

let creditCardArrangementService: CreditCardArrangementReportService;
const mockCardNumber = "4500000000000001";
const mockClientId = "testClient123";
const mockCorrelationId = "test-correlation-id";

const mockSuccessResponse = {
  data: {
    accountNumber: "4500000000000001",
    availableBalance: 5000,
    totalBalance: 1000,
    creditLimit: 6000
  }
};

// Mock AWS SDK
jest.mock('@aws-sdk/client-sts', () => ({
  STSClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Credentials: {
        AccessKeyId: 'mock-access-key',
        SecretAccessKey: 'mock-secret-key',
        SessionToken: 'mock-session-token',
        Expiration: new Date()
      }
    })
  }))
}));

jest.mock('@aws-sdk/client-ssm', () => ({
  SSMClient: jest.fn().mockImplementation(() => ({
    send: jest.fn().mockResolvedValue({
      Parameter: {
        Value: 'mock-param-value'
      }
    })
  }))
}));

// Mock the common/aws/sts module
jest.mock("../../../../common/aws/sts", () => ({
  AssumeRole: jest.fn().mockResolvedValue({
    accessKeyId: "mock-access-key",
    secretAccessKey: "mock-secret-key",
    sessionToken: "mock-session-token"
  })
}));

// Mock the common/aws/ssm module
jest.mock("../../../../common/aws/ssm", () => ({
  GetParamValue: jest.fn().mockResolvedValue("mock-param-value")
}));

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn()
}));

describe("CreditCardArrangementReportService", () => {
  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();
    
    // Set up environment variables
    process.env = {
      AWS_REGION: "us-east-1",
      AWS_SDK_LOAD_CONFIG: "1",
      crossRegion: "us-east-1",
      REGION: "us-east-1",
      crossAccountRoleForCCAR: "test-role",
      ssmParamCcarApiKey: "test-api-key",
      ssmParamCcarGatewayId: "test-gateway-id",
      getCardDetailsUrl: "https://test-api.bmo.com/v1/card-details"
    };

    // Mock the static apiInfoCache directly on the service class
    Object.defineProperty(CreditCardArrangementReportService, 'apiInfoCache', {
      value: {
        value: jest.fn().mockResolvedValue({
          apiKey: "mock-param-value",
          apiGatewayId: "mock-param-value"
        })
      },
      writable: true
    });

    // Create new instance
    creditCardArrangementService = new CreditCardArrangementReportService(
      mockCardNumber,
      mockClientId,
      mockCorrelationId
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
    // Reset the static apiInfoCache
    Object.defineProperty(CreditCardArrangementReportService, 'apiInfoCache', {
      value: null,
      writable: true
    });
    // Clean up environment variables
    process.env = {};
  });

  describe("getCreditCardDetail", () => {
    test("should fetch full credit card details successfully", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 200,
          json: () => Promise.resolve(mockSuccessResponse)
        })
      ) as jest.Mock;

      const result = await creditCardArrangementService.getCreditCardDetail(false);
      
      expect(result).toEqual(mockSuccessResponse);
      expect(global.fetch).toHaveBeenCalled();
      expect(global.fetch.mock.calls[0][0]).toBe("https://test-api.bmo.com/v1/card-details");
      expect(global.fetch.mock.calls[0][1]).toBeTruthy();
    });

    test("should fetch only available balance when specified", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 200,
          json: () => Promise.resolve(mockSuccessResponse)
        })
      ) as jest.Mock;

      const result = await creditCardArrangementService.getCreditCardDetail(true);
      
      expect(result).toEqual(mockSuccessResponse);
      expect(global.fetch).toHaveBeenCalled();
      
      const requestConfig = global.fetch.mock.calls[0][1];
      const requestBody = typeof requestConfig.body === 'string' 
        ? JSON.parse(requestConfig.body) 
        : requestConfig.body;

      expect(requestBody).toBeTruthy();
      expect(requestBody.requestControl?.segmentName).toBeTruthy();
      expect(Array.isArray(requestBody.requestControl.segmentName)).toBe(true);
      expect(requestBody.requestControl.segmentName).toContain("IRA");
    });

    test("should throw error when API returns non-200 status", async () => {
      global.fetch = jest.fn(() =>
        Promise.resolve({
          status: 500,
          statusText: "Internal Server Error"
        })
      ) as jest.Mock;

      await expect(creditCardArrangementService.getCreditCardDetail(false))
        .rejects
        .toThrow();
    });

    test("should throw error when API call fails", async () => {
      global.fetch = jest.fn(() => 
        Promise.reject(new Error("Network error"))
      ) as jest.Mock;

      await expect(creditCardArrangementService.getCreditCardDetail(false))
        .rejects
        .toThrow();
    });

    test("should throw error when API cache fails", async () => {
      // Mock apiInfoCache to throw error
      Object.defineProperty(CreditCardArrangementReportService, 'apiInfoCache', {
        value: {
          value: jest.fn().mockRejectedValue(new Error("Cache error"))
        },
        writable: true
      });

      await expect(creditCardArrangementService.getCreditCardDetail(false))
        .rejects
        .toThrow();
    });
  });
});
