import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});



import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito2.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
@PrepareForTest({DadDAO.class, CSUtil.class, LastDownloadDateService.class, LogManager.class})
public class LastDownloadDateServiceTest {

    private LastDownloadDateService service;
    private static final String ERROR_CODE_600;
    private static final String LAST_DOWNLOAD_DATE_ERROR;

    @Mock
    private Logger loggerMock;

    @Mock
    private LastDownloadDateRequestDTO request;

    @Mock
    private CustomerContextBean customerContext;

    @Mock
    private CustomerContextModel customerContextModel;

    @Mock
    private CreditCardAccountBean creditCardBean;

    @Mock
    private CreditCardAccount creditCardAccount;

    private List<CreditCardAccountBean> creditCardList;

    static {
        // Get the original values of static finals using reflection
        ERROR_CODE_600 = (String) Whitebox.getInternalState(LastDownloadDateService.class, "ERROR_CODE_600");
        LAST_DOWNLOAD_DATE_ERROR = (String) Whitebox.getInternalState(LastDownloadDateService.class, "LAST_DOWNLOAD_DATE_ERROR");
    }

    @Before
    public void setUp() throws Exception {
        service = new LastDownloadDateService();
        creditCardList = new ArrayList<>();
        
        // Mock static classes
        PowerMockito.mockStatic(DadDAO.class);
        PowerMockito.mockStatic(CSUtil.class);
        PowerMockito.mockStatic(LogManager.class);

        // Mock logger
        when(LogManager.getLogger(LastDownloadDateService.class)).thenReturn(loggerMock);
        Whitebox.setInternalState(service, "logger", loggerMock);

        // Set up common mock behaviors
        when(customerContext.getModel()).thenReturn(customerContextModel);
        when(creditCardBean.getCreditCardAccount()).thenReturn(creditCardAccount);
        when(creditCardAccount.getAccountNumber()).thenReturn("1234-5678-9012-3456");
    }

    @Test
    public void testLastDownloadDate_Success() throws Exception {
        // Arrange
        String accountIndex = "0";
        Date expectedDate = new Date();
        creditCardList.add(creditCardBean);

        when(request.getAccountIndex()).thenReturn(accountIndex);
        when(customerContextModel.getAccounts(AccountListSpecifier.CREDIT_CARD_ACCOUNTS_FILTERED_FOR_BOS_SERVICES))
                .thenReturn(creditCardList);
        PowerMockito.when(DadDAO.getLastDownloadDate(anyString())).thenReturn(expectedDate);

        // Act
        LastDownloadDateResponseDTO response = service.lastDownloadDate(request, customerContext);

        // Assert
        assertNotNull(response);
        assertEquals(expectedDate, response.getLastDownloadDate());
        PowerMockito.verifyPrivate(loggerMock).invoke("debug", "() >", "getLastDownloadDate");
        PowerMockito.verifyPrivate(loggerMock).invoke("debug", "() <", "getLastDownloadDate");
    }

    @Test(expected = ServiceErrorException.class)
    public void testLastDownloadDate_InvalidAccountIndex() throws Exception {
        // Arrange
        when(request.getAccountIndex()).thenReturn("invalid");
        PowerMockito.doThrow(new ServiceErrorException(ERROR_CODE_600))
                .when(CSUtil.class);
        CSUtil.handleError(ERROR_CODE_600);

        // Act
        try {
            service.lastDownloadDate(request, customerContext);
        } finally {
            // Verify logger was called with error message
            PowerMockito.verifyPrivate(loggerMock).invoke("error", 
                "() - Invalid account index format", 
                "getLastDownloadDate", 
                NumberFormatException.class);
        }
    }

    @Test(expected = ServiceErrorException.class)
    public void testLastDownloadDate_DAOException() throws Exception {
        // Arrange
        String accountIndex = "0";
        creditCardList.add(creditCardBean);

        when(request.getAccountIndex()).thenReturn(accountIndex);
        when(customerContextModel.getAccounts(AccountListSpecifier.CREDIT_CARD_ACCOUNTS_FILTERED_FOR_BOS_SERVICES))
                .thenReturn(creditCardList);
        PowerMockito.when(DadDAO.getLastDownloadDate(anyString())).thenThrow(new Exception("DAO Error"));
        PowerMockito.doThrow(new ServiceErrorException(LAST_DOWNLOAD_DATE_ERROR))
                .when(CSUtil.class);
        CSUtil.handleError(LAST_DOWNLOAD_DATE_ERROR);

        // Act
        try {
            service.lastDownloadDate(request, customerContext);
        } finally {
            // Verify logger was called with error message
            PowerMockito.verifyPrivate(loggerMock).invoke("error", 
                "Error processing credit card", 
                Exception.class);
        }
    }

    // ... (rest of the test methods remain the same)

    @Test
    public void testErrorConstants() throws Exception {
        // Verify that the error constants match the expected values
        assertEquals("AD/SE/600", ERROR_CODE_600);
        assertEquals("LAST DOWNLOAD DATE CARD ERROR", LAST_DOWNLOAD_DATE_ERROR);
    }
}
