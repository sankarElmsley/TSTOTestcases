import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));


@Slf4j

// Mock binRangesResponse
jest.mock('../../model/ccu/binRangesResponse', () => ({
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn(),
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn()
}));

// Mock CrossAccountAPICache
jest.mock('../../../common/cross-account/cached-apiinformation', () => ({
    CrossAccountAPICache: jest.fn().mockImplementation(() => ({
        Value: () => Promise.resolve({
            expected: {
                apiKey: 'test-api-key',
                apiGatewayId: 'test-gateway-id'
            }
        })
    }))
}));

describe('CreditcardUtilityService', () => {
    const mockCorrelationId = 'test-correlation-id';

    beforeEach(() => {
        jest.clearAllMocks();
        // Set up environment variables
        process.env.crossRegion = 'test-region';
        process.env.REGION = 'test-region';
        process.env.crossAccountRoleForCCU = 'test-role';
        process.env.ssmParamCcuApiKey = 'test-param-key';
        process.env.ssmParamCcuGatewayId = 'test-param-gateway';
        process.env.getBinRangesUrl = '12345';

        // Mock global fetch
        global.fetch = jest.fn();
    });

    describe('getBinRanges', () => {
        it('should successfully retrieve bin ranges', () => {
            const mockBinRanges = {
                binList: {
                    bin: [{
                        binStart: '400000',
                        binEnd: '499999',
                        identifier: 'TEST-BIN-001'
                    }]
                }
            };

            (global.fetch as jest.Mock).mockImplementation(() => 
                Promise.resolve({
                    status: 200,
                    json: () => Promise.resolve(mockBinRanges)
                })
            );

            // Create a new instance
            const service = new CreditcardUtilityService(mockCorrelationId);

            return service.getBinRanges().then((result: any) => {
                expect(result).toEqual(mockBinRanges.binList.bin);
                expect(global.fetch).toHaveBeenCalledWith(
                    12345,
                    expect.objectContaining({
                        method: 'GET',
                        headers: expect.objectContaining({
                            'x-api-key': 'test-api-key',
                            'x-apigw-api-id': 'test-gateway-id',
                            'x-request-id': mockCorrelationId
                        })
                    })
                );
            });
        });

        it('should throw error for non-200 response', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.resolve({
                    status: 500,
                    statusText: 'Internal Server Error'
                })
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorMessage,
                        ErrorCodes.BIN_RANGES_API_INVALID_RESPONSE_STATUS.errorCode
                    )
                );
            });
        });

        it('should throw error when API call fails', () => {
            (global.fetch as jest.Mock).mockImplementation(() =>
                Promise.reject(new Error('Network error'))
            );

            const service = new CreditcardUtilityService(mockCorrelationId);
            
            return service.getBinRanges().catch((error: ServerError) => {
                expect(error).toEqual(
                    new ServerError(
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorMessage,
                        ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR.errorCode
                    )
                );
            });
        });

        it('should throw error when cache initialization fails', () => {
            (CrossAccountAPICache as jest.Mock).mockImplementationOnce(() => {
                throw new Error('Cache initialization failed');
            });

            expect(() => new CreditcardUtilityService(mockCorrelationId)).toThrow(
                new ServerError(
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
                    ErrorCodes.BIN_RANGES_API_UNEXPECTED_ERROR_SSM_PARAM.errorCode
                )
            );
        });
    });
});

package com.ymca.prs0.tbp.service.impl;

import com.ymca.prs0.tbp.exception.InvalidInputException;
import com.ymca.prs0.tbp.model.*;
import com.ymca.prs0.tbp.model.document.Tracker;
import com.ymca.prs0.tbp.model.dto.TemplatedBatchDTO;
import com.ymca.prs0.tbp.processor.TemplatedBatchProcessor;
import com.ymca.prs0.tbp.repository.HeaderContentRepository;
import com.ymca.prs0.tbp.service.*;
import com.ymca.prs0.tbp.util.RequestInfoHolder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.task.TaskExecutor;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TemplatedBatchServiceImplTest {

    @Mock
    private S3Service s3Service;

    @Mock
    private SMBService smbService;

    @Mock
    private TrackerService trackerService;

    @Mock
    private ProcessingEventService processingEventService;

    @Mock
    private TemplatedBatchProcessor templatedBatchProcessor;

    @Mock
    private HeaderContentRepository headerContentRepository;

    @Mock
    private TaskExecutor processBatchTaskExecutor;

    @Mock
    private MessageRawRecordService messageRawRecordService;

    @Mock
    private EmailRawRecordService emailRawRecordService;

    @InjectMocks
    private TemplatedBatchServiceImpl templatedBatchService;

    private static final String FILE_KEY = "test-file-key";
    private static final String REQUEST_ID = "test-request-id";
    private static final long PART_SIZE = 52428800L; // 50MB
    private static final String ARCHIVE_DIRECTORY = "/archive/dir";

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(templatedBatchService, "partSize", PART_SIZE);
        ReflectionTestUtils.setField(templatedBatchService, "archiveDirectory", ARCHIVE_DIRECTORY);
    }

    @Test
    void processTemplatedBatch_WhenFileNotFound_ShouldThrowException() {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            when(s3Service.pollFiles()).thenReturn(Collections.emptyList());

            // Act & Assert
            assertThrows(InvalidInputException.class, () -> 
                templatedBatchService.processTemplatedBatch(dto));
        }
    }

    @Test
    void processTemplatedBatch_WhenNewFileAndLocked_ShouldSubmitJob() {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(s3Service.pollFiles()).thenReturn(Arrays.asList(FILE_KEY));
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(true);
            when(trackerService.isFileLocked(FILE_KEY)).thenReturn(true);

            // Act
            ApiResponse response = templatedBatchService.processTemplatedBatch(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task Submitted", response.getMarTechResponse().get("message"));
            assertEquals("Queued", response.getMarTechResponse().get("status"));
            
            verify(processBatchTaskExecutor).execute(any(Runnable.class));
        }
    }

    @Test
    void processNewFile_WhenValidContentLength_ShouldProcessFile() {
        // Arrange
        long contentLength = 1000L;
        when(s3Service.getS3ObjectContentLength(FILE_KEY)).thenReturn(contentLength);
        when(trackerService.createTrackerAndLockFile(any(Tracker.class))).thenReturn(true);

        // Act
        templatedBatchService.processNewFile(FILE_KEY);

        // Assert
        verify(processBatchTaskExecutor).execute(any(Runnable.class));
        verify(trackerService).createTrackerAndLockFile(argThat(tracker -> 
            tracker.getFileKey().equals(FILE_KEY) &&
            tracker.getStatus() == S3ObjectStatus.INPROGRESS &&
            tracker.getTotalContentlength() == contentLength &&
            tracker.getMcProcessStatus() == MCProcessStatus.PENDING &&
            tracker.getEmailProcessStatus() == EmailProcessStatus.PENDING
        ));
    }

    @Test
    void reProcessFile_WhenValidContentLength_ShouldReprocessFile() {
        // Arrange
        long contentLength = 1000L;
        when(s3Service.getS3ObjectContentLength(FILE_KEY)).thenReturn(contentLength);
        when(trackerService.lockFile(FILE_KEY)).thenReturn(true);

        // Act
        templatedBatchService.reProcessFile(FILE_KEY);

        // Assert
        verify(processBatchTaskExecutor).execute(any(Runnable.class));
    }

    @Test
    void deleteAll_ShouldDeleteAllRelatedRecords() {
        // Act
        templatedBatchService.deleteAll(FILE_KEY);

        // Assert
        verify(processingEventService).deleteAll(FILE_KEY);
        verify(emailRawRecordService).deleteAll(FILE_KEY);
        verify(messageRawRecordService).deleteAll(FILE_KEY);
    }

    @Test
    void processTemplatedBatch_WhenFileInterrupted_ShouldReprocessFile() {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(s3Service.pollFiles()).thenReturn(Arrays.asList(FILE_KEY));
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(false);
            when(trackerService.isFileInProgressOrProcessed(FILE_KEY)).thenReturn(true);
            when(trackerService.isFileAlreadyFailed(FILE_KEY)).thenReturn(false);
            when(trackerService.isFileInterrupted(FILE_KEY)).thenReturn(true);
            when(trackerService.lockFile(FILE_KEY)).thenReturn(true);

            // Act
            ApiResponse response = templatedBatchService.processTemplatedBatch(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task Submitted", response.getMarTechResponse().get("message"));
            assertEquals("Queued", response.getMarTechResponse().get("status"));
            
            verify(processBatchTaskExecutor).execute(any(Runnable.class));
        }
    }

    @Test
    void processTemplatedBatch_WhenFailedChunksExist_ShouldProcessFailedChunks() {
        // Arrange
        TemplatedBatchDTO dto = new TemplatedBatchDTO();
        dto.setFileKey(FILE_KEY);
        
        RequestInfo requestInfo = RequestInfo.builder()
            .requestId(REQUEST_ID)
            .build();

        try (MockedStatic<RequestInfoHolder> requestInfoHolder = mockStatic(RequestInfoHolder.class)) {
            requestInfoHolder.when(RequestInfoHolder::getRequestInfo).thenReturn(requestInfo);
            
            when(s3Service.pollFiles()).thenReturn(Arrays.asList(FILE_KEY));
            when(trackerService.isNewFile(FILE_KEY)).thenReturn(false);
            when(trackerService.isFileInProgressOrProcessed(FILE_KEY)).thenReturn(true);
            when(trackerService.isFileAlreadyFailed(FILE_KEY)).thenReturn(false);
            when(trackerService.isFileInterrupted(FILE_KEY)).thenReturn(false);
            when(trackerService.isFileLocked(FILE_KEY)).thenReturn(false);
            when(processingEventService.isFailedChunksExist(FILE_KEY)).thenReturn(true);
            when(trackerService.lockFile(FILE_KEY)).thenReturn(true);

            // Act
            ApiResponse response = templatedBatchService.processTemplatedBatch(dto);

            // Assert
            assertNotNull(response);
            assertEquals(REQUEST_ID, response.getId());
            assertEquals("Task Submitted", response.getMarTechResponse().get("message"));
            assertEquals("Queued", response.getMarTechResponse().get("status"));
            
            verify(processBatchTaskExecutor).execute(any(Runnable.class));
        }
    }
}
