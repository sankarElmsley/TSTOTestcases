import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

import { CrossAccountAPICache } from "../../../../common/cross_account/cached_api_information";
import {
  logBackendServiceError,
  logBackendServiceRequest,
  logBackendServiceResponse,
  error,
  trace,
  info,
} from "../../../../common/utils/logger";
import { ErrorCodes } from "../../util/errorCodes";
import { ServerError } from "../../util/serverError";

/**
 * Backend API service to manage the endpoints from the CCR API.
 * @author Parthiban
 * @since 25/Dec/2024
 */
export class CreditCardRewardService {
  static readonly LOG_PREFIX = "CreditCardRewardService - ";
  private readonly sessionId: string;
  private readonly ecifId: string;
  private readonly correlationId: string;
  private static apiInfoCache: CrossAccountAPICache | null = null;
  private readonly contextId: string;

  constructor(sessionId: string, ecifId: string, correlationId: string) {
    this.sessionId = sessionId;
    this.ecifId = ecifId;
    this.correlationId = correlationId;
    this.contextId = `${sessionId}.${ecifId}`;
    this.loadApiInfo();
  }

  /**
   * Retrieves the required SSM parameters from the cross account.
   */
  private loadApiInfo(): void {
    if (CreditCardRewardService.apiInfoCache == null) {
      try {
        // Get All Configurations for this call
        const crossRegion = process.env.crossRegion ?? "";
        const crossAccountRoleRegion = process.env.REGION ?? ""; // We always use our own REGION
        const crossAccountRole = process.env.crossAccountRoleForCdbContext ?? "";
        const singleAccountAPIKeyName = process.env.ssmParamCdbContextApiKey ?? "";
        const singleAccountAPIGatewayIDName =
          process.env.ssmParamCdbContextGatewayId ?? "";

        CreditCardRewardService.apiInfoCache = new CrossAccountAPICache(
          crossRegion,
          crossAccountRoleRegion,
          crossAccountRole,
          singleAccountAPIKeyName,
          singleAccountAPIGatewayIDName
        );
      } catch (e) {
        error(
          CreditCardRewardService.LOG_PREFIX.concat(
            "Unexpected error while retrieving the SSM params for making backend API (CCR) call"
          ),
          e,
          this.correlationId
        );
        throw new ServerError(
          ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR_SSM_PARAM.errorMessage,
          ErrorCodes.SESSION_DATA_API_UNEXPECTED_ERROR_SSM_PARAM
        );
      }
    }
  }

  /**
   * Retrieves the customer credit card reward details.
   * @returns rewardData
   */
  async getRewardDetails(): Promise<string> {
    trace(
      CreditCardRewardService.LOG_PREFIX.concat("In getRewardDetails....."),
      this.correlationId
    );

    trace(
      CreditCardRewardService.LOG_PREFIX.concat("Out getRewardDetails."),
      this.correlationId
    );

    return "";
  }
}
