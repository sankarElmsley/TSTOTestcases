import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";
import fetch from 'node-fetch';

/**
 * @jest-environment node
 */

// Mock the CrossAccountAPICache
jest.mock("../../../../common/cross_account/cached_api_information");
import { CrossAccountAPICache } from "../../../../common/cross_account/cached_api_information";
const MockedCrossAccountAPICache = CrossAccountAPICache as jest.MockedClass<typeof CrossAccountAPICache>;

// Mock logger functions
jest.mock("../../../../common/utils/logger", () => ({
    debug: jest.fn(),
    error: jest.fn(),
    info: jest.fn(),
    trace: jest.fn(),
    debugWithSanitize: jest.fn(),
    infoWithSanitize: jest.fn()
}));

import { TransientCreditcardDataService } from "../../src/service/transientCreditCardDataService";

describe('TransientCreditcardDataService', () => {
    const mockSessionId = 'test-session-123';
    const mockEcifId = 'test-ecif-456';
    const mockOcifId = 'test-ocif-789';
    const mockAccountIndex = 0;
    const mockCorrelationId = 'test-correlation-101112';
    let service: TransientCreditcardDataService;

    beforeEach(() => {
        // Reset mocks
        jest.resetAllMocks();

        // Set up environment variables
        process.env = {
            crossRegion: 'us-east-1',
            REGION: 'us-east-1',
            crossAccountRoleForCdbContext: 'test-role',
            ssmParamCdbContextApiKey: 'test-api-key',
            ssmParamCdbContextGatewayId: 'test-gateway-id'
        };

        // Set up CrossAccountAPICache mock
        MockedCrossAccountAPICache.mockImplementation(() => ({
            value: jest.fn().mockResolvedValue({
                apiKey: 'mock-api-key',
                apiGatewayId: 'mock-gateway-id'
            })
        }));

        // Create service instance
        service = new TransientCreditcardDataService(
            mockEcifId,
            mockOcifId,
            mockSessionId,
            mockAccountIndex,
            mockCorrelationId
        );
    });

    afterEach(() => {
        process.env = {};
    });

    describe('Service Tests', () => {
        it('should create service instance', () => {
            expect(service).toBeDefined();
        });

        it('should get credit card data', async () => {
            const result = await service.getCreditcardData();
            expect(result).toBeDefined();
            expect(result.correlationId).toBe(mockCorrelationId);
        });

        it('should handle errors gracefully', async () => {
            // Force an error condition
            process.env = {};
            const result = await service.getCreditcardData();
            expect(result.status).toBe('Failure');
        });
    });
});
