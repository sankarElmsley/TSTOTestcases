import { jest, describe, it, expect, beforeEach } from '@jest/globals';
import { CreditcardUtilityService } from '../../src/services/creditcardUtilityService';
import { CrossAccountAPICache } from '../../../common/cross-account/cached-apiinformation';
import { ServerError } from '../../util/serverError';
import { ErrorCodes } from '../../util/errorCodes';

// Mock lodash
jest.mock('lodash', () => ({
    cloneDeepWith: jest.fn(),
    isObject: jest.fn(),
    toLower: jest.fn(),
    some: jest.fn()
}));

// Mock uuid
jest.mock('uuid', () => ({
    v4: jest.fn()
}));

// Mock logger
jest.mock('../../../common/utils/logger', () => ({
    error: jest.fn(),
    trace: jest.fn(),
    info: jest.fn(),
    logBackendServiceRequest: jest.fn(),
    logBackendServiceResponse: jest.fn(),
    logBackendServiceError: jest.fn()
}));



/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: "ts-jest",
  testEnvironment: "node",
  // Ignore resource files
  testPathIgnorePatterns: [
    "/node_modules/",
    "/test/resources/"
  ],
  // Specify where test files are located
  testMatch: [
    "**/__tests__/**/*.test.ts",
    "**/?(*.)+(spec|test).ts"
  ],
  extensionsToTreatAsEsm: ['.ts'],
  transform: {
    "^.+\\.tsx?$": [
      "ts-jest",
      {
        useESM: true,
        isolatedModules: true,
      },
    ],
  },
};


import { Bin } from "///src/model/ccu/binRangesResponse";
import { CreditcardUtilityService } from "///src/service/ccu/creditcardUtilityService";

// Mocking dependencies
jest.mock("node-fetch", () => jest.fn());
jest.mock("///common/utils/logger", () => ({
  debug: jest.fn(),
  debugWithSanitize: jest.fn(),
  error: jest.fn(),
  info: jest.fn(),
  infoWithSanitize: jest.fn(),
  trace: jest.fn(),
  logBackendServiceError: jest.fn(),
  logBackendServiceRequest: jest.fn(),
  logBackendServiceResponse: jest.fn(),
}));

jest.mock("///common/cross_account/cached_api_information", () => ({
  CrossAccountAPICache: jest.fn().mockImplementation(() => ({
    getValue: jest.fn(() => ({
      apiKey: "mock-api-key",
      apiGatewayId: "mock-gateway-id",
    })),
  })),
}));

describe("CreditcardUtilityService Tests", () => {
  let creditcardUtilityService: CreditcardUtilityService;
  const mockCorrelationId = "test-correlation-id";
  
  beforeEach(() => {
    // Mock all required environment variables
    process.env.crossRegion = "us-east-1";
    process.env.REGION = "us-east-1";
    process.env.crossAccountRoleForCCU = "arn:aws:iam::123456789012:role/test-role";
    process.env.ssmParamCcuApiKey = "test-api-key-param";
    process.env.ssmParamCcuGatewayId = "test-gateway-id-param";
    process.env.getBinRangesUrl = "https://api.test.com/bin-ranges";

    // Reset the fetch mock before each test
    (global as any).fetch = jest.fn();
  });

  afterEach(() => {
    jest.resetAllMocks();
    // Clear environment variables
    delete process.env.crossRegion;
    delete process.env.REGION;
    delete process.env.crossAccountRoleForCCU;
    delete process.env.ssmParamCcuApiKey;
    delete process.env.ssmParamCcuGatewayId;
    delete process.env.getBinRangesUrl;
  });

  describe("getBinRangesCached", () => {
    it("should successfully retrieve BIN ranges when API returns 200", async () => {
      // Mock successful API response
      const mockBinResponse = {
        binList: {
          bin: [
            {
              binStart: "400000",
              binEnd: "499999",
              cardType: "VISA",
            },
          ],
        },
      };

      (global as any).fetch.mockImplementationOnce(() =>
        Promise.resolve({
          status: 200,
          statusText: "OK",
          json: () => Promise.resolve(mockBinResponse),
        })
      );

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      const result = await creditcardUtilityService.getBinRangesCached();

      expect(result).toEqual(mockBinResponse.binList.bin);
      expect(global.fetch).toHaveBeenCalledTimes(1);
      expect(global.fetch).toHaveBeenCalledWith(
        "https://api.test.com/bin-ranges",
        expect.objectContaining({
          method: "GET",
          headers: expect.objectContaining({
            "Content-Type": "application/json",
            "x-api-key": "mock-api-key",
            "x-apigw-api-id": "mock-gateway-id",
            "x-request-id": mockCorrelationId,
            "x-fapi-interaction-id": mockCorrelationId,
            "x-app-cat-id": "63623",
            APIHeaderRequest: "NA",
          }),
        })
      );
    });

    it("should throw ServerError when API returns non-200 status", async () => {
      (global as any).fetch.mockImplementationOnce(() =>
        Promise.resolve({
          status: 500,
          statusText: "Internal Server Error",
        })
      );

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
    });

    it("should throw ServerError when API call fails", async () => {
      (global as any).fetch.mockImplementationOnce(() =>
        Promise.reject(new Error("Network error"))
      );

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      await expect(creditcardUtilityService.getBinRangesCached()).rejects.toThrow();
    });

    it("should use cached values for subsequent calls", async () => {
      const mockBinResponse = {
        binList: {
          bin: [
            {
              binStart: "400000",
              binEnd: "499999",
              cardType: "VISA",
            },
          ],
        },
      };

      (global as any).fetch.mockImplementationOnce(() =>
        Promise.resolve({
          status: 200,
          statusText: "OK",
          json: () => Promise.resolve(mockBinResponse),
        })
      );

      creditcardUtilityService = new CreditcardUtilityService(mockCorrelationId);
      
      // First call should make the API request
      const result1 = await creditcardUtilityService.getBinRangesCached();
      // Second call should use cached value
      const result2 = await creditcardUtilityService.getBinRangesCached();

      expect(result1).toEqual(result2);
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });
  });
});
